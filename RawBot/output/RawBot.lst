FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C27xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
001C: 7D 0D ED LJMP  PSoC_GPIO_ISR      (0145)     ljmp	PSoC_GPIO_ISR
001F: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 0C 0E LJMP  _Timer8Main_ISR    (0149)     ljmp	_Timer8Main_ISR
0023: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 0C 1C LJMP  _Timer8UsTrig_ISR  (0153)     ljmp	_Timer8UsTrig_ISR
0027: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0157)     // call	void_handler
0028: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 0C 8C LJMP  _Timer16UsEcho_ISR (0161)     ljmp	_Timer16UsEcho_ISR
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
0034: 7D 04 28 LJMP  _ServoPWM_ISR      (0169)     ljmp	_ServoPWM_ISR
0037: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0181)     // call	void_handler
0060: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0185)     // call	void_handler
0064: 7E       RETI                     (0186)     reti
0068: 71 10    OR    F,0x10             
                                        (0187)     ;---------------------------------------------------
                                        (0188)     ; Insert your custom code above this banner
                                        (0189)     ;---------------------------------------------------
                                        (0190)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0191) 
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  Start of Execution.
                                        (0194) ;-----------------------------------------------------------------------------
                                        (0195) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0196) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0197) ;
                                        (0198) 
                                        (0199) IF	(TOOLCHAIN & HITECH)
                                        (0200)  	AREA PD_startup(CODE, REL, CON)
                                        (0201) ELSE
                                        (0202)     org 68h
                                        (0203) ENDIF
                                        (0204) __Start:
                                        (0205) 
                                        (0206)     ; initialize SMP values for voltage stabilization, if required,
                                        (0207)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0208)     ; least for now. 
                                        (0209)     ;
                                        (0210)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[0xE3],0x87     (0211)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0212)     M8C_SetBank0
                                        (0213) 
                                        (0214) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0215) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0216)     M8C_EnableWatchDog
                                        (0217) ENDIF
                                        (0218) 
                                        (0219) IF ( SELECT_32K )
                                        (0220)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0221) ELSE
0072: 41 FE FB AND   REG[0xFE],0xFB     (0222)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0223) ENDIF
                                        (0224) 
                                        (0225) IF	(TOOLCHAIN & HITECH) 
                                        (0226)     ;---------------------------
                                        (0227)     ; Set up the Temporary stack
                                        (0228)     ;---------------------------
                                        (0229)     ; A temporary stack is set up for the SSC instructions.
                                        (0230)     ; The real stack start will be assigned later.
                                        (0231)     ;
                                        (0232) 	global		__Lstackps
                                        (0233) 	mov     a,low __Lstackps
                                        (0234) 	swap    a,sp
                                        (0235) ELSE
                                        (0236)     ;------------------
                                        (0237)     ; Set up the stack
                                        (0238)     ;------------------
0075: 50 42    MOV   A,0x42             (0239)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0240)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0241) ENDIF
                                        (0242) 
                                        (0243)     ;-----------------------------------------------
                                        (0244)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0245)     ;-----------------------------------------------
                                        (0246) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0247) IF ( SUPPLY_VOLTAGE )         ; 1 means 5.0V
                                        (0248)  IF ( AGND_BYPASS )
                                        (0249)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0250)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0251)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0252)     ; value using the proper trim values.
                                        (0253)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0254)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0255)  ENDIF
                                        (0256) ELSE    ; 3.3 V Operation, not 5.0V
                                        (0257)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0258) ENDIF ;(SUPPLY_VOLTAGE)
                                        (0259) 
007B: 55 F8 00 MOV   [0xF8],0x0         (0260)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007E: 55 F9 00 MOV   [0xF9],0x0         (0261)     mov  [bSSC_KEYSP], 0
0081: 71 10    OR    F,0x10             
                                        (0262) 
                                        (0263)     ;---------------------------------------
                                        (0264)     ; Initialize Crystal Oscillator and PLL
                                        (0265)     ;---------------------------------------
                                        (0266) 
                                        (0267) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0268)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0269)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0270)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0271)     ; the ECO to stabilize.
                                        (0272)     ;
                                        (0273)     M8C_SetBank1
                                        (0274)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0275)     M8C_SetBank0
                                        (0276)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0277)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0278)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0279) .WaitFor1s:
                                        (0280)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0281)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0282)                                           ;   since interrupts are not globally enabled
                                        (0283) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0284)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0285)     M8C_SetBank1
0083: 62 E0 02 MOV   REG[0xE0],0x2      (0286)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0086: 70 EF    AND   F,0xEF             
0088: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0287)     M8C_SetBank0
                                        (0288)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0289) 
                                        (0290) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0291) 
                                        (0292) IF ( PLL_MODE )
                                        (0293)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0294)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0295)     ;
                                        (0296)     M8C_SetBank1
                                        (0297)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0298)     M8C_SetBank0
                                        (0299)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0300)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0301) 
                                        (0302) .WaitFor16ms:
                                        (0303)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0304)     jz   .WaitFor16ms
                                        (0305)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0306)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0307)     M8C_SetBank0
                                        (0308) 
                                        (0309) IF      ( WAIT_FOR_32K )
                                        (0310) ELSE ; !( WAIT_FOR_32K )
                                        (0311)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0312)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0313) ENDIF ;(WAIT_FOR_32K)
                                        (0314) ENDIF ;(PLL_MODE)
                                        (0315) 
                                        (0316) 	;-------------------------------------------------------
                                        (0317)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0318)     ;-------------------------------------------------------
                                        (0319) 
                                        (0320)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0321) 
                                        (0322) IF (SYSCLK_SOURCE)
                                        (0323)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0324) ENDIF
                                        (0325)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0326) 
                                        (0327)     ;------------------------
                                        (0328)     ; Close CT leakage path.
                                        (0329)     ;------------------------
008B: 62 71 05 MOV   REG[0x71],0x5      (0330)     mov   reg[ACB00CR0], 05h
008E: 62 75 05 MOV   REG[0x75],0x5      (0331)     mov   reg[ACB01CR0], 05h
0091: 62 79 05 MOV   REG[0x79],0x5      (0332)     mov   reg[ACB02CR0], 05h
0094: 62 7D 05 MOV   REG[0x7D],0x5      (0333)     mov   reg[ACB03CR0], 05h
                                        (0334) 
                                        (0335)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0336)     ;---------------------------------------------------
                                        (0337)     ; Insert your custom code below this banner
                                        (0338)     ;---------------------------------------------------
                                        (0339) 
                                        (0340)     ;---------------------------------------------------
                                        (0341)     ; Insert your custom code above this banner
                                        (0342)     ;---------------------------------------------------
                                        (0343)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0344) 
                                        (0345)     ;-------------------------
                                        (0346)     ; Load Base Configuration
                                        (0347)     ;-------------------------
                                        (0348)     ; Load global parameter settings and load the user modules in the
                                        (0349)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0350)     ; to minimize start up time; (2) We may still need to play with the
                                        (0351)     ; Sleep Timer.
                                        (0352)     ;
0097: 7C 02 DB LCALL 0x02DB             (0353)     lcall LoadConfigInit
                                        (0354) 
                                        (0355)     ;-----------------------------------
                                        (0356)     ; Initialize C Run-Time Environment
                                        (0357)     ;-----------------------------------
                                        (0358) IF ( C_LANGUAGE_SUPPORT )
009A: 50 00    MOV   A,0x0              (0359)     mov  A,0                           ; clear the 'bss' segment to zero
009C: 55 3E 42 MOV   [__r0],0x42        (0360)     mov  [__r0],<__bss_start
                                        (0361) BssLoop:
009F: 3C 3E 42 CMP   [__r0],0x42        (0362)     cmp  [__r0],<__bss_end
00A2: A0 05    JZ    0x00A8             (0363)     jz   BssDone
00A4: 3F 3E    MVI   [__r0],A           (0364)     mvi  [__r0],A
00A6: 8F F8    JMP   0x009F             (0365)     jmp  BssLoop
                                        (0366) BssDone:
00A8: 50 01    MOV   A,0x1              (0367)     mov  A,>__idata_start              ; copy idata to data segment
00AA: 57 E6    MOV   X,0xE6             (0368)     mov  X,<__idata_start
00AC: 55 3E 00 MOV   [__r0],0x0         (0369)     mov  [__r0],<__data_start
                                        (0370) IDataLoop:
00AF: 3C 3E 30 CMP   [__r0],0x30        (0371)     cmp  [__r0],<__data_end
00B2: A0 0B    JZ    0x00BE             (0372)     jz   C_RTE_Done
00B4: 08       PUSH  A                  (0373)     push A
00B5: 28       ROMX                     (0374)     romx
00B6: 3F 3E    MVI   [__r0],A           (0375)     mvi  [__r0],A
00B8: 18       POP   A                  (0376)     pop  A
00B9: 75       INC   X                  (0377)     inc  X
00BA: 09 00    ADC   A,0x0              (0378)     adc  A,0
00BC: 8F F2    JMP   0x00AF             (0379)     jmp  IDataLoop
00BE: 71 10    OR    F,0x10             
                                        (0380) 
                                        (0381) C_RTE_Done:
                                        (0382) 
                                        (0383) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0384) 
                                        (0385)     ;-------------------------------
                                        (0386)     ; Voltage Stabilization for SMP
                                        (0387)     ;-------------------------------
                                        (0388) 
                                        (0389) IF ( SUPPLY_VOLTAGE )                  ; 1 Means 5 Volts
                                        (0390) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0391)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0392)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0393)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0394)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0395)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0396)     M8C_SetBank1
                                        (0397)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0398)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0399)     M8C_SetBank0
                                        (0400)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0401)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0402) .WaitFor2ms:
                                        (0403)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0404)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0405) ENDIF ; ( SWITCH_MODE_PUMP ^ 1 )
                                        (0406) ENDIF ; ( SUPPLY_VOLTAGE )
                                        (0407) 
                                        (0408)     ;-------------------------------
                                        (0409)     ; Set Power-On Reset (POR) Level
                                        (0410)     ;-------------------------------
                                        (0411)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0412)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0413)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0414)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0415)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0416) 
                                        (0417)     M8C_SetBank1
                                        (0418) 
                                        (0419) IF ( SUPPLY_VOLTAGE )                       ; 1 Means 5 Volts
                                        (0420)  IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )  ;    Also 24MHz?
                                        (0421)                                             ;       no, set 4.5V POR in user code, if desired
                                        (0422)  ELSE ; 24HMz                               ;
00C0: 43 E3 20 OR    REG[0xE3],0x20     (0423)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
00C3: 70 EF    AND   F,0xEF             
                                        (0424)  ENDIF ; OSC_CRO_CPU_24MHz
                                        (0425) ENDIF ; 5V
                                        (0426) 
                                        (0427)     M8C_SetBank0
                                        (0428) 
                                        (0429)     ;----------------------------
                                        (0430)     ; Wrap up and invoke "main"
                                        (0431)     ;----------------------------
                                        (0432) 
                                        (0433)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0434)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0435)     ;
00C5: 62 E0 00 MOV   REG[0xE0],0x0      (0436)     mov  reg[INT_MSK0],0
00C8: 71 10    OR    F,0x10             
                                        (0437) 
                                        (0438)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0439)     ;
                                        (0440)     M8C_SetBank1
00CA: 62 E0 03 MOV   REG[0xE0],0x3      (0441)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
00CD: 70 EF    AND   F,0xEF             
                                        (0442)     M8C_SetBank0
                                        (0443) 
                                        (0444)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0445)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0446)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0447)     ;
00CF: 62 E2 00 MOV   REG[0xE2],0x0      (0448)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0449)                                    ; have been set during the boot process.
                                        (0450) IF	(TOOLCHAIN & HITECH)
                                        (0451) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0452) ELSE
                                        (0453) IF ENABLE_LJMP_TO_MAIN
                                        (0454)     ljmp  _main                    ; goto main (no return)
                                        (0455) ELSE
00D2: 7C 0D 41 LCALL _main              (0456)     lcall _main                    ; call main
                                        (0457) .Exit:
00D5: 8F FF    JMP   0x00D5             (0458)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0459) ENDIF
                                        (0460) ENDIF ; TOOLCHAIN
                                        (0461) 
                                        (0462)     ;---------------------------------
                                        (0463)     ; Library Access to Global Parms
                                        (0464)     ;---------------------------------
                                        (0465)     ;
                                        (0466)  bGetPowerSetting:
                                        (0467) _bGetPowerSetting:
                                        (0468)     ; Synthesize the "power setting" value used by chips with SlowIMO mode.
                                        (0469)     ; Returns value of POWER_SETTING in the A register.
                                        (0470)     ; No inputs. No Side Effects.
                                        (0471)     ;
                                        (0472) IF ( SUPPLY_VOLTAGE )            ; 1 means 5.0V
00D7: 50 10    MOV   A,0x10             (0473)     mov   A, POWER_SET_5V0_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0474) ELSE        
                                        (0475)     mov   A, POWER_SET_3V3_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0476) ENDIF
00D9: 7F       RET                      (0477)     ret
                                        (0478) 
                                        (0479) IF	(TOOLCHAIN & HITECH)
                                        (0480) ELSE
                                        (0481)     ;---------------------------------
                                        (0482)     ; Order Critical RAM & ROM AREAs
                                        (0483)     ;---------------------------------
                                        (0484)     ;  'TOP' is all that has been defined so far...
                                        (0485) 
                                        (0486)     ;  ROM AREAs for C CONST, static & global items
                                        (0487)     ;
                                        (0488)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0489)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0490) __idata_start:
                                        (0491) 
                                        (0492)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0493) __func_lit_start:
                                        (0494) 
                                        (0495)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0496)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0497) 
                                        (0498)     ; CODE segment for general use
                                        (0499)     ;
                                        (0500)     AREA text (ROM, REL, CON)
                                        (0501) __text_start:
                                        (0502) 
                                        (0503)     ; RAM area usage
                                        (0504)     ;
                                        (0505)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0506) __data_start:
                                        (0507) 
                                        (0508)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0509)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0510)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0511) __bss_start:
                                        (0512) 
                                        (0513) ENDIF ; TOOLCHAIN
                                        (0514) 
                                        (0515) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.2946
0216: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_rawbot_Bank1
                                        (0019) export LoadConfigTBL_rawbot_Bank0
                                        (0020) export LoadConfigTBL_rawbot_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_rawbot_Bank0:
                                        (0023) ;  Instance name LCD, User Module LCD
                                        (0024) ;  Instance name ServoPWM, User Module PWM16
                                        (0025) ;       Instance name ServoPWM, Block Name PWM16_LSB(DBB10)
                                        (0026) 	db		33h, 00h		;ServoPWM_CONTROL_LSB_REG(DBB10CR0)
                                        (0027) 	db		31h, 9fh		;ServoPWM_PERIOD_LSB_REG(DBB10DR1)
                                        (0028) 	db		32h, 2ch		;ServoPWM_COMPARE_LSB_REG(DBB10DR2)
                                        (0029) ;       Instance name ServoPWM, Block Name PWM16_MSB(DBB11)
                                        (0030) 	db		37h, 00h		;ServoPWM_CONTROL_MSB_REG(DBB11CR0)
                                        (0031) 	db		35h, 0fh		;ServoPWM_PERIOD_MSB_REG(DBB11DR1)
                                        (0032) 	db		36h, 01h		;ServoPWM_COMPARE_MSB_REG(DBB11DR2)
                                        (0033) ;  Instance name Timer16UsEcho, User Module Timer16
                                        (0034) ;       Instance name Timer16UsEcho, Block Name TIMER16_LSB(DCB02)
                                        (0035) 	db		2bh, 00h		;Timer16UsEcho_CONTROL_LSB_REG(DCB02CR0)
                                        (0036) 	db		29h, 40h		;Timer16UsEcho_PERIOD_LSB_REG(DCB02DR1)
                                        (0037) 	db		2ah, 00h		;Timer16UsEcho_COMPARE_LSB_REG(DCB02DR2)
                                        (0038) ;       Instance name Timer16UsEcho, Block Name TIMER16_MSB(DCB03)
                                        (0039) 	db		2fh, 04h		;Timer16UsEcho_CONTROL_MSB_REG(DCB03CR0)
                                        (0040) 	db		2dh, b5h		;Timer16UsEcho_PERIOD_MSB_REG(DCB03DR1)
                                        (0041) 	db		2eh, 00h		;Timer16UsEcho_COMPARE_MSB_REG(DCB03DR2)
                                        (0042) ;  Instance name Timer8Main, User Module Timer8
                                        (0043) ;       Instance name Timer8Main, Block Name TIMER8(DBB00)
                                        (0044) 	db		23h, 04h		;Timer8Main_CONTROL_REG(DBB00CR0)
                                        (0045) 	db		21h, c7h		;Timer8Main_PERIOD_REG(DBB00DR1)
                                        (0046) 	db		22h, 00h		;Timer8Main_COMPARE_REG(DBB00DR2)
                                        (0047) ;  Instance name Timer8UsTrig, User Module Timer8
                                        (0048) ;       Instance name Timer8UsTrig, Block Name TIMER8(DBB01)
                                        (0049) 	db		27h, 04h		;Timer8UsTrig_CONTROL_REG(DBB01CR0)
                                        (0050) 	db		25h, 05h		;Timer8UsTrig_PERIOD_REG(DBB01DR1)
                                        (0051) 	db		26h, 00h		;Timer8UsTrig_COMPARE_REG(DBB01DR2)
                                        (0052) ;  Global Register values Bank 0
                                        (0053) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0054) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0055) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0056) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0057) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0058) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0059) 	db		d6h, 00h		; I2CConfig register (I2CCFG)
                                        (0060) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0061) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0062) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0063) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0064) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0065) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0066) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0067) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0068) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0069) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0070) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0071) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0072) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0073) 	db		beh, 20h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0074) 	db		ffh
                                        (0075) LoadConfigTBL_rawbot_Bank1:
                                        (0076) ;  Instance name LCD, User Module LCD
                                        (0077) ;  Instance name ServoPWM, User Module PWM16
                                        (0078) ;       Instance name ServoPWM, Block Name PWM16_LSB(DBB10)
                                        (0079) 	db		30h, 01h		;ServoPWM_FUNC_LSB_REG(DBB10FN)
                                        (0080) 	db		31h, 16h		;ServoPWM_INPUT_LSB_REG(DBB10IN)
                                        (0081) 	db		32h, 40h		;ServoPWM_OUTPUT_LSB_REG(DBB10OU)
                                        (0082) ;       Instance name ServoPWM, Block Name PWM16_MSB(DBB11)
                                        (0083) 	db		34h, 21h		;ServoPWM_FUNC_MSB_REG(DBB11FN)
                                        (0084) 	db		35h, 36h		;ServoPWM_INPUT_MSB_REG(DBB11IN)
                                        (0085) 	db		36h, 47h		;ServoPWM_OUTPUT_MSB_REG(DBB11OU)
                                        (0086) ;  Instance name Timer16UsEcho, User Module Timer16
                                        (0087) ;       Instance name Timer16UsEcho, Block Name TIMER16_LSB(DCB02)
                                        (0088) 	db		28h, 00h		;Timer16UsEcho_FUNC_LSB_REG(DCB02FN)
                                        (0089) 	db		29h, 05h		;Timer16UsEcho_INPUT_LSB_REG(DCB02IN)
                                        (0090) 	db		2ah, 40h		;Timer16UsEcho_OUTPUT_LSB_REG(DCB02OU)
                                        (0091) ;       Instance name Timer16UsEcho, Block Name TIMER16_MSB(DCB03)
                                        (0092) 	db		2ch, 20h		;Timer16UsEcho_FUNC_MSB_REG(DCB03FN)
                                        (0093) 	db		2dh, 35h		;Timer16UsEcho_INPUT_MSB_REG(DCB03IN)
                                        (0094) 	db		2eh, 40h		;Timer16UsEcho_OUTPUT_MSB_REG(DCB03OU)
                                        (0095) ;  Instance name Timer8Main, User Module Timer8
                                        (0096) ;       Instance name Timer8Main, Block Name TIMER8(DBB00)
                                        (0097) 	db		20h, 20h		;Timer8Main_FUNC_REG(DBB00FN)
                                        (0098) 	db		21h, 06h		;Timer8Main_INPUT_REG(DBB00IN)
                                        (0099) 	db		22h, 40h		;Timer8Main_OUTPUT_REG(DBB00OU)
                                        (0100) ;  Instance name Timer8UsTrig, User Module Timer8
                                        (0101) ;       Instance name Timer8UsTrig, Block Name TIMER8(DBB01)
                                        (0102) 	db		24h, 20h		;Timer8UsTrig_FUNC_REG(DBB01FN)
                                        (0103) 	db		25h, 05h		;Timer8UsTrig_INPUT_REG(DBB01IN)
                                        (0104) 	db		26h, 40h		;Timer8UsTrig_OUTPUT_REG(DBB01OU)
                                        (0105) ;  Global Register values Bank 1
                                        (0106) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0107) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0108) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0109) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0110) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0111) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0112) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0113) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0114) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0115) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0116) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0117) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0118) 	db		e1h, b9h		; OscillatorControl_1 register (OSC_CR1)
                                        (0119) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0120) 	db		dfh, c7h		; OscillatorControl_3 register (OSC_CR3)
                                        (0121) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0122) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0123) 	db		ffh
                                        (0124) AREA psoc_config(rom, rel)
                                        (0125) LoadConfigTBL_rawbot_Ordered:
                                        (0126) ;  Ordered Global Register values
                                        (0127) 	M8C_SetBank0
0218: 62 00 00 MOV   REG[0x0],0x0       (0128) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
021B: 71 10    OR    F,0x10             
                                        (0129) 	M8C_SetBank1
021D: 62 00 BF MOV   REG[0x0],0xBF      (0130) 	mov	reg[00h], bfh		; Port_0_DriveMode_0 register (PRT0DM0)
0220: 62 01 40 MOV   REG[0x1],0x40      (0131) 	mov	reg[01h], 40h		; Port_0_DriveMode_1 register (PRT0DM1)
0223: 70 EF    AND   F,0xEF             
                                        (0132) 	M8C_SetBank0
0225: 62 03 40 MOV   REG[0x3],0x40      (0133) 	mov	reg[03h], 40h		; Port_0_DriveMode_2 register (PRT0DM2)
0228: 62 02 80 MOV   REG[0x2],0x80      (0134) 	mov	reg[02h], 80h		; Port_0_GlobalSelect register (PRT0GS)
022B: 71 10    OR    F,0x10             
                                        (0135) 	M8C_SetBank1
022D: 62 02 00 MOV   REG[0x2],0x0       (0136) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
0230: 62 03 00 MOV   REG[0x3],0x0       (0137) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0233: 70 EF    AND   F,0xEF             
                                        (0138) 	M8C_SetBank0
0235: 62 01 00 MOV   REG[0x1],0x0       (0139) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0238: 62 04 00 MOV   REG[0x4],0x0       (0140) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
023B: 71 10    OR    F,0x10             
                                        (0141) 	M8C_SetBank1
023D: 62 04 01 MOV   REG[0x4],0x1       (0142) 	mov	reg[04h], 01h		; Port_1_DriveMode_0 register (PRT1DM0)
0240: 62 05 00 MOV   REG[0x5],0x0       (0143) 	mov	reg[05h], 00h		; Port_1_DriveMode_1 register (PRT1DM1)
0243: 70 EF    AND   F,0xEF             
                                        (0144) 	M8C_SetBank0
0245: 62 07 00 MOV   REG[0x7],0x0       (0145) 	mov	reg[07h], 00h		; Port_1_DriveMode_2 register (PRT1DM2)
0248: 62 06 00 MOV   REG[0x6],0x0       (0146) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
024B: 71 10    OR    F,0x10             
                                        (0147) 	M8C_SetBank1
024D: 62 06 80 MOV   REG[0x6],0x80      (0148) 	mov	reg[06h], 80h		; Port_1_IntCtrl_0 register (PRT1IC0)
0250: 62 07 80 MOV   REG[0x7],0x80      (0149) 	mov	reg[07h], 80h		; Port_1_IntCtrl_1 register (PRT1IC1)
0253: 70 EF    AND   F,0xEF             
                                        (0150) 	M8C_SetBank0
0255: 62 05 80 MOV   REG[0x5],0x80      (0151) 	mov	reg[05h], 80h		; Port_1_IntEn register (PRT1IE)
0258: 62 08 00 MOV   REG[0x8],0x0       (0152) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
025B: 71 10    OR    F,0x10             
                                        (0153) 	M8C_SetBank1
025D: 62 08 7F MOV   REG[0x8],0x7F      (0154) 	mov	reg[08h], 7fh		; Port_2_DriveMode_0 register (PRT2DM0)
0260: 62 09 80 MOV   REG[0x9],0x80      (0155) 	mov	reg[09h], 80h		; Port_2_DriveMode_1 register (PRT2DM1)
0263: 70 EF    AND   F,0xEF             
                                        (0156) 	M8C_SetBank0
0265: 62 0B 80 MOV   REG[0xB],0x80      (0157) 	mov	reg[0bh], 80h		; Port_2_DriveMode_2 register (PRT2DM2)
0268: 62 0A 00 MOV   REG[0xA],0x0       (0158) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
026B: 71 10    OR    F,0x10             
                                        (0159) 	M8C_SetBank1
026D: 62 0A 00 MOV   REG[0xA],0x0       (0160) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0270: 62 0B 00 MOV   REG[0xB],0x0       (0161) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0273: 70 EF    AND   F,0xEF             
                                        (0162) 	M8C_SetBank0
0275: 62 09 00 MOV   REG[0x9],0x0       (0163) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0278: 62 0C 00 MOV   REG[0xC],0x0       (0164) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
027B: 71 10    OR    F,0x10             
                                        (0165) 	M8C_SetBank1
027D: 62 0C 00 MOV   REG[0xC],0x0       (0166) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
0280: 62 0D 00 MOV   REG[0xD],0x0       (0167) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
0283: 70 EF    AND   F,0xEF             
                                        (0168) 	M8C_SetBank0
0285: 62 0F 00 MOV   REG[0xF],0x0       (0169) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
0288: 62 0E 00 MOV   REG[0xE],0x0       (0170) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
028B: 71 10    OR    F,0x10             
                                        (0171) 	M8C_SetBank1
028D: 62 0E 00 MOV   REG[0xE],0x0       (0172) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
0290: 62 0F 00 MOV   REG[0xF],0x0       (0173) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
0293: 70 EF    AND   F,0xEF             
                                        (0174) 	M8C_SetBank0
0295: 62 0D 00 MOV   REG[0xD],0x0       (0175) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
0298: 62 10 00 MOV   REG[0x10],0x0      (0176) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
029B: 71 10    OR    F,0x10             
                                        (0177) 	M8C_SetBank1
029D: 62 10 00 MOV   REG[0x10],0x0      (0178) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
02A0: 62 11 00 MOV   REG[0x11],0x0      (0179) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
02A3: 70 EF    AND   F,0xEF             
                                        (0180) 	M8C_SetBank0
02A5: 62 13 00 MOV   REG[0x13],0x0      (0181) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
02A8: 62 12 00 MOV   REG[0x12],0x0      (0182) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
02AB: 71 10    OR    F,0x10             
                                        (0183) 	M8C_SetBank1
02AD: 62 12 00 MOV   REG[0x12],0x0      (0184) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
02B0: 62 13 00 MOV   REG[0x13],0x0      (0185) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
02B3: 70 EF    AND   F,0xEF             
                                        (0186) 	M8C_SetBank0
02B5: 62 11 00 MOV   REG[0x11],0x0      (0187) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
02B8: 62 14 00 MOV   REG[0x14],0x0      (0188) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
02BB: 71 10    OR    F,0x10             
                                        (0189) 	M8C_SetBank1
02BD: 62 14 00 MOV   REG[0x14],0x0      (0190) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
02C0: 62 15 00 MOV   REG[0x15],0x0      (0191) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
02C3: 70 EF    AND   F,0xEF             
                                        (0192) 	M8C_SetBank0
02C5: 62 17 00 MOV   REG[0x17],0x0      (0193) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
02C8: 62 16 00 MOV   REG[0x16],0x0      (0194) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
02CB: 71 10    OR    F,0x10             
                                        (0195) 	M8C_SetBank1
02CD: 62 16 00 MOV   REG[0x16],0x0      (0196) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
02D0: 62 17 00 MOV   REG[0x17],0x0      (0197) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
02D3: 70 EF    AND   F,0xEF             
                                        (0198) 	M8C_SetBank0
02D5: 62 15 00 MOV   REG[0x15],0x0      (0199) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
02D8: 70 EF    AND   F,0xEF             
                                        (0200) 	M8C_SetBank0
02DA: 7F       RET                      (0201) 	ret
                                        (0202) 
                                        (0203) 
                                        (0204) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_rawbot
                                        (0026) export _LoadConfig_rawbot
                                        (0027) export Port_2_Data_SHADE
                                        (0028) export _Port_2_Data_SHADE
                                        (0029) export Port_2_DriveMode_0_SHADE
                                        (0030) export _Port_2_DriveMode_0_SHADE
                                        (0031) export Port_2_DriveMode_1_SHADE
                                        (0032) export _Port_2_DriveMode_1_SHADE
                                        (0033) 
                                        (0034) 
                                        (0035) export NO_SHADOW
                                        (0036) export _NO_SHADOW
                                        (0037) 
                                        (0038) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0039) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0040) 
                                        (0041) AREA psoc_config(rom, rel)
                                        (0042) 
                                        (0043) ;---------------------------------------------------------------------------
                                        (0044) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0045) ;                  parameters handled by boot code, like CPU speed). This
                                        (0046) ;                  function can be called from user code, but typically it
                                        (0047) ;                  is only called from boot.
                                        (0048) ;
                                        (0049) ;       INPUTS: None.
                                        (0050) ;      RETURNS: Nothing.
                                        (0051) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0052) ;               In the large memory model currently only the page
                                        (0053) ;               pointer registers listed below are modified.  This does
                                        (0054) ;               not guarantee that in future implementations of this
                                        (0055) ;               function other page pointer registers will not be
                                        (0056) ;               modified.
                                        (0057) ;          
                                        (0058) ;               Page Pointer Registers Modified: 
                                        (0059) ;               CUR_PP
                                        (0060) ;
                                        (0061) _LoadConfigInit:
                                        (0062)  LoadConfigInit:
                                        (0063)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0064)     
02DB: 55 3F 00 MOV   [0x3F],0x0         (0065) 	mov		[Port_2_Data_SHADE], 0h
02DE: 55 40 7F MOV   [0x40],0x7F        (0066) 	mov		[Port_2_DriveMode_0_SHADE], 7fh
02E1: 55 41 80 MOV   [0x41],0x80        (0067) 	mov		[Port_2_DriveMode_1_SHADE], 80h
                                        (0068) 
02E4: 7C 02 EB LCALL 0x02EB             (0069) 	lcall	LoadConfig_rawbot
02E7: 7C 02 16 LCALL 0x0216             (0070) 	lcall	LoadConfigTBL_rawbot_Ordered
                                        (0071) 
                                        (0072) 
                                        (0073)     RAM_EPILOGUE RAM_USE_CLASS_4
02EA: 7F       RET                      (0074)     ret
                                        (0075) 
                                        (0076) ;---------------------------------------------------------------------------
                                        (0077) ; Load Configuration rawbot
                                        (0078) ;
                                        (0079) ;    Load configuration registers for rawbot.
                                        (0080) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0081) ;
                                        (0082) ;       INPUTS: None.
                                        (0083) ;      RETURNS: Nothing.
                                        (0084) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0085) ;               modified as may the Page Pointer registers!
                                        (0086) ;               In the large memory model currently only the page
                                        (0087) ;               pointer registers listed below are modified.  This does
                                        (0088) ;               not guarantee that in future implementations of this
                                        (0089) ;               function other page pointer registers will not be
                                        (0090) ;               modified.
                                        (0091) ;          
                                        (0092) ;               Page Pointer Registers Modified: 
                                        (0093) ;               CUR_PP
                                        (0094) ;
                                        (0095) _LoadConfig_rawbot:
                                        (0096)  LoadConfig_rawbot:
                                        (0097)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0098) 
02EB: 10       PUSH  X                  (0099) 	push	x
02EC: 70 EF    AND   F,0xEF             
                                        (0100)     M8C_SetBank0                    ; Force bank 0
02EE: 50 00    MOV   A,0x0              (0101)     mov     a, 0                    ; Specify bank 0
02F0: 67       ASR   A                  (0102)     asr     a                       ; Store in carry flag
                                        (0103)                                     ; Load bank 0 table:
02F1: 50 01    MOV   A,0x1              (0104)     mov     A, >LoadConfigTBL_rawbot_Bank0
02F3: 57 50    MOV   X,0x50             (0105)     mov     X, <LoadConfigTBL_rawbot_Bank0
02F5: 7C 03 06 LCALL 0x0306             (0106)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0107) 
02F8: 50 01    MOV   A,0x1              (0108)     mov     a, 1                    ; Specify bank 1
02FA: 67       ASR   A                  (0109)     asr     a                       ; Store in carry flag
                                        (0110)                                     ; Load bank 1 table:
02FB: 50 01    MOV   A,0x1              (0111)     mov     A, >LoadConfigTBL_rawbot_Bank1
02FD: 57 9F    MOV   X,0x9F             (0112)     mov     X, <LoadConfigTBL_rawbot_Bank1
02FF: 7C 03 06 LCALL 0x0306             (0113)     lcall   LoadConfig              ; Load the bank 1 values
0302: 70 EF    AND   F,0xEF             
                                        (0114) 
                                        (0115)     M8C_SetBank0                    ; Force return to bank 0
0304: 20       POP   X                  (0116) 	pop		x
                                        (0117) 
                                        (0118)     RAM_EPILOGUE RAM_USE_CLASS_4
0305: 7F       RET                      (0119)     ret
                                        (0120) 
                                        (0121) 
                                        (0122) 
                                        (0123) 
                                        (0124) ;---------------------------------------------------------------------------
                                        (0125) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0126) ;              pairs. Terminate on address=0xFF.
                                        (0127) ;
                                        (0128) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0129) ;           Flag Register Carry bit encodes the Register Bank
                                        (0130) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0131) ;
                                        (0132) ;  RETURNS: nothing.
                                        (0133) ;
                                        (0134) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0135) ;                X-3 Temporary store for register address
                                        (0136) ;                X-2 LSB of config table address
                                        (0137) ;                X-1 MSB of config table address
                                        (0138) ;
                                        (0139) LoadConfig:
                                        (0140)     RAM_PROLOGUE RAM_USE_CLASS_2
0306: 38 02    ADD   SP,0x2             (0141)     add     SP, 2                   ; Set up local vars
0308: 10       PUSH  X                  (0142)     push    X                       ; Save config table address on stack
0309: 08       PUSH  A                  (0143)     push    A
030A: 4F       MOV   X,SP               (0144)     mov     X, SP
030B: 56 FC 00 MOV   [X-4],0x0          (0145)     mov     [X-4], 0                ; Set default Destination to Bank 0
030E: D0 04    JNC   0x0313             (0146)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0310: 56 FC 01 MOV   [X-4],0x1          (0147)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0148) .BankSelectSaved:
0313: 18       POP   A                  (0149)     pop     A
0314: 20       POP   X                  (0150)     pop     X
0315: 70 EF    AND   F,0xEF             
0317: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0151) 
                                        (0152) LoadConfigLp:
                                        (0153)     M8C_SetBank0                    ; Switch to bank 0
                                        (0154)     M8C_ClearWDT                    ; Clear the watchdog for long inits
031A: 10       PUSH  X                  (0155)     push    X                       ; Preserve the config table address
031B: 08       PUSH  A                  (0156)     push    A
031C: 28       ROMX                     (0157)     romx                            ; Load register address from table
031D: 39 FF    CMP   A,0xFF             (0158)     cmp     A, END_CONFIG_TABLE     ; End of table?
031F: A0 1F    JZ    0x033F             (0159)     jz      EndLoadConfig           ;   Yes, go wrap it up
0321: 4F       MOV   X,SP               (0160)     mov     X, SP                   ;
0322: 48 FC 01 TST   [X-4],0x1          (0161)     tst     [X-4], 1                ; Loading IO Bank 1?
0325: A0 03    JZ    0x0329             (0162)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
0327: 71 10    OR    F,0x10             
                                        (0163)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0164) .IOBankNowSet:
0329: 54 FD    MOV   [X-3],A            (0165)     mov     [X-3], A                ; Stash the register address
032B: 18       POP   A                  (0166)     pop     A                       ; Retrieve the table address
032C: 20       POP   X                  (0167)     pop     X
032D: 75       INC   X                  (0168)     inc     X                       ; Advance to the data byte
032E: 09 00    ADC   A,0x0              (0169)     adc     A, 0
0330: 10       PUSH  X                  (0170)     push    X                       ; Save the config table address again
0331: 08       PUSH  A                  (0171)     push    A
0332: 28       ROMX                     (0172)     romx                            ; load config data from the table
0333: 4F       MOV   X,SP               (0173)     mov     X, SP                   ; retrieve the register address
0334: 59 FD    MOV   X,[X-3]            (0174)     mov     X, [X-3]
0336: 61 00    MOV   REG[X+0x0],A       (0175)     mov     reg[X], A               ; Configure the register
0338: 18       POP   A                  (0176)     pop     A                       ; retrieve the table address
0339: 20       POP   X                  (0177)     pop     X
033A: 75       INC   X                  (0178)     inc     X                       ; advance to next table entry
033B: 09 00    ADC   A,0x0              (0179)     adc     A, 0
033D: 8F D7    JMP   0x0315             (0180)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0181) EndLoadConfig:
033F: 38 FC    ADD   SP,0xFC            (0182)     add     SP, -4
                                        (0183)     RAM_EPILOGUE RAM_USE_CLASS_2
0341: 7F       RET                      (0184)     ret
                                        (0185) 
                                        (0186) AREA InterruptRAM(ram, rel)
                                        (0187) 
                                        (0188) NO_SHADOW:
                                        (0189) _NO_SHADOW:
                                        (0190) ; write only register shadows
                                        (0191) _Port_2_Data_SHADE:
                                        (0192) Port_2_Data_SHADE:	BLK	1
                                        (0193) _Port_2_DriveMode_0_SHADE:
                                        (0194) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0195) _Port_2_DriveMode_1_SHADE:
                                        (0196) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0197) 
FILE: lib\timer8ustrig.asm              (0001) ;;*****************************************************************************
0342: 43 E1 02 OR    REG[0xE1],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer8UsTrig.asm
                                        (0004) ;;   Version: 2.70, Updated on 2013/5/19 at 10:44:42
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Timer8UsTrig.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Timer8UsTrig_EnableInt
                                        (0030) export _Timer8UsTrig_EnableInt
                                        (0031) export  Timer8UsTrig_DisableInt
                                        (0032) export _Timer8UsTrig_DisableInt
                                        (0033) export  Timer8UsTrig_Start
                                        (0034) export _Timer8UsTrig_Start
                                        (0035) export  Timer8UsTrig_Stop
                                        (0036) export _Timer8UsTrig_Stop
                                        (0037) export  Timer8UsTrig_WritePeriod
                                        (0038) export _Timer8UsTrig_WritePeriod
                                        (0039) export  Timer8UsTrig_WriteCompareValue
                                        (0040) export _Timer8UsTrig_WriteCompareValue
                                        (0041) export  Timer8UsTrig_bReadCompareValue
                                        (0042) export _Timer8UsTrig_bReadCompareValue
                                        (0043) export  Timer8UsTrig_bReadTimer
                                        (0044) export _Timer8UsTrig_bReadTimer
                                        (0045) export  Timer8UsTrig_bReadTimerSaveCV
                                        (0046) export _Timer8UsTrig_bReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  bTimer8UsTrig_ReadCompareValue  ; deprecated
                                        (0051) export _bTimer8UsTrig_ReadCompareValue  ; deprecated
                                        (0052) export  bTimer8UsTrig_ReadTimer         ; deprecated
                                        (0053) export _bTimer8UsTrig_ReadTimer         ; deprecated
                                        (0054) export  bTimer8UsTrig_ReadTimerSaveCV   ; deprecated
                                        (0055) export _bTimer8UsTrig_ReadTimerSaveCV   ; deprecated
                                        (0056) 
                                        (0057) export  bTimer8UsTrig_ReadCounter       ; obsolete
                                        (0058) export _bTimer8UsTrig_ReadCounter       ; obsolete
                                        (0059) export  bTimer8UsTrig_CaptureCounter    ; obsolete
                                        (0060) export _bTimer8UsTrig_CaptureCounter    ; obsolete
                                        (0061) 
                                        (0062) 
                                        (0063) AREA rawbot_RAM (RAM,REL)
                                        (0064) 
                                        (0065) ;-----------------------------------------------
                                        (0066) ;  Constant Definitions
                                        (0067) ;-----------------------------------------------
                                        (0068) 
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: Timer8UsTrig_EnableInt
                                        (0080) ;
                                        (0081) ;  DESCRIPTION:
                                        (0082) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0083) ;     associated with this User Module. This function has no effect until and
                                        (0084) ;     unless the global interrupts are enabled (for example by using the
                                        (0085) ;     macro M8C_EnableGInt).
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;
                                        (0088) ;  ARGUMENTS:    None.
                                        (0089) ;  RETURNS:      Nothing.
                                        (0090) ;  SIDE EFFECTS: 
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097)  Timer8UsTrig_EnableInt:
                                        (0098) _Timer8UsTrig_EnableInt:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0100)    Timer8UsTrig_EnableInt_M
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
0345: 7F       RET                      (0102)    ret
0346: 41 E1 FD AND   REG[0xE1],0xFD     
                                        (0103) 
                                        (0104) .ENDSECTION
                                        (0105) 
                                        (0106) 
                                        (0107) .SECTION
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109) ;  FUNCTION NAME: Timer8UsTrig_DisableInt
                                        (0110) ;
                                        (0111) ;  DESCRIPTION:
                                        (0112) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0113) ;     mask bit associated with this User Module.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS: 
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  Timer8UsTrig_DisableInt:
                                        (0126) _Timer8UsTrig_DisableInt:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    Timer8UsTrig_DisableInt_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
0349: 7F       RET                      (0130)    ret
034A: 43 27 01 OR    REG[0x27],0x1      
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) 
                                        (0135) .SECTION
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  FUNCTION NAME: Timer8UsTrig_Start
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;     Sets the start bit in the Control register of this user module.  The
                                        (0141) ;     timer will begin counting on the next input clock.
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:    None
                                        (0145) ;  RETURNS:      Nothing
                                        (0146) ;  SIDE EFFECTS: 
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  Timer8UsTrig_Start:
                                        (0154) _Timer8UsTrig_Start:
                                        (0155)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0156)    Timer8UsTrig_Start_M
                                        (0157)    RAM_EPILOGUE RAM_USE_CLASS_1
034D: 7F       RET                      (0158)    ret
034E: 41 27 FE AND   REG[0x27],0xFE     
                                        (0159) 
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: Timer8UsTrig_Stop
                                        (0166) ;
                                        (0167) ;  DESCRIPTION:
                                        (0168) ;     Disables timer operation by clearing the start bit in the Control
                                        (0169) ;     register.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    None
                                        (0173) ;  RETURNS:      Nothing
                                        (0174) ;  SIDE EFFECTS: 
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  Timer8UsTrig_Stop:
                                        (0182) _Timer8UsTrig_Stop:
                                        (0183)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0184)    Timer8UsTrig_Stop_M
                                        (0185)    RAM_EPILOGUE RAM_USE_CLASS_1
0351: 7F       RET                      (0186)    ret
                                        (0187) 
                                        (0188) .ENDSECTION
                                        (0189) 
                                        (0190) 
                                        (0191) .SECTION
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  FUNCTION NAME: Timer8UsTrig_WritePeriod
                                        (0194) ;
                                        (0195) ;  DESCRIPTION:
                                        (0196) ;     Write the 8-bit period value into the Period register (DR1). If the
                                        (0197) ;     Timer user module is stopped, then this value will also be latched
                                        (0198) ;     into the Count register (DR0).
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;
                                        (0201) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0202) ;  RETURNS:   Nothing
                                        (0203) ;  SIDE EFFECTS: 
                                        (0204) ;    The A and X registers may be modified by this or future implementations
                                        (0205) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0206) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0207) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0208) ;    functions.
                                        (0209) ;
                                        (0210)  Timer8UsTrig_WritePeriod:
                                        (0211) _Timer8UsTrig_WritePeriod:
                                        (0212)    RAM_PROLOGUE RAM_USE_CLASS_1
0352: 60 25    MOV   REG[0x25],A        (0213)    mov   reg[Timer8UsTrig_PERIOD_REG], A
                                        (0214)    RAM_EPILOGUE RAM_USE_CLASS_1
0354: 7F       RET                      (0215)    ret
                                        (0216) 
                                        (0217) .ENDSECTION
                                        (0218) 
                                        (0219) 
                                        (0220) .SECTION
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;  FUNCTION NAME: Timer8UsTrig_WriteCompareValue
                                        (0223) ;
                                        (0224) ;  DESCRIPTION:
                                        (0225) ;     Writes compare value into the Compare register (DR2).
                                        (0226) ;
                                        (0227) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0228) ;           Compare register. (Call Timer8UsTrig_Stop to disable).
                                        (0229) ;-----------------------------------------------------------------------------
                                        (0230) ;
                                        (0231) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0232) ;  RETURNS:      Nothing
                                        (0233) ;  SIDE EFFECTS: 
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240)  Timer8UsTrig_WriteCompareValue:
                                        (0241) _Timer8UsTrig_WriteCompareValue:
                                        (0242)    RAM_PROLOGUE RAM_USE_CLASS_1
0355: 60 26    MOV   REG[0x26],A        (0243)    mov   reg[Timer8UsTrig_COMPARE_REG], A
                                        (0244)    RAM_EPILOGUE RAM_USE_CLASS_1
0357: 7F       RET                      (0245)    ret
                                        (0246) 
                                        (0247) .ENDSECTION
                                        (0248) 
                                        (0249) 
                                        (0250) .SECTION
                                        (0251) ;-----------------------------------------------------------------------------
                                        (0252) ;  FUNCTION NAME: Timer8UsTrig_bReadCompareValue
                                        (0253) ;
                                        (0254) ;  DESCRIPTION:
                                        (0255) ;     Reads the Compare register.
                                        (0256) ;-----------------------------------------------------------------------------
                                        (0257) ;
                                        (0258) ;  ARGUMENTS:    None
                                        (0259) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0260) ;  SIDE EFFECTS: 
                                        (0261) ;    The A and X registers may be modified by this or future implementations
                                        (0262) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0263) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0264) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0265) ;    functions.
                                        (0266) ;
                                        (0267)  Timer8UsTrig_bReadCompareValue:
                                        (0268) _Timer8UsTrig_bReadCompareValue:
                                        (0269)  bTimer8UsTrig_ReadCompareValue:                 ; this name deprecated
                                        (0270) _bTimer8UsTrig_ReadCompareValue:                 ; this name deprecated
                                        (0271)    RAM_PROLOGUE RAM_USE_CLASS_1
0358: 5D 26    MOV   A,REG[0x26]        (0272)    mov   A, reg[Timer8UsTrig_COMPARE_REG]
                                        (0273)    RAM_EPILOGUE RAM_USE_CLASS_1
035A: 7F       RET                      (0274)    ret
                                        (0275) 
                                        (0276) .ENDSECTION
                                        (0277) 
                                        (0278) 
                                        (0279) .SECTION
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;  FUNCTION NAME: Timer8UsTrig_bReadTimerSaveCV
                                        (0282) ;
                                        (0283) ;  DESCRIPTION:
                                        (0284) ;     Returns the value in the Count register (DR0), preserving the
                                        (0285) ;     value in the compare register (DR2).
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS: None
                                        (0289) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0292) ;     2) If enabled, Global interrupts are momentarily disabled.
                                        (0293) ;     3) The user module is stopped momentarily while the compare value is
                                        (0294) ;        restored.  This may cause the Count register to miss one or more
                                        (0295) ;        counts depending on the input clock speed.
                                        (0296) ;     4) The A and X registers may be modified by this or future implementations
                                        (0297) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0298) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0299) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0300) ;        functions.
                                        (0301) ;
                                        (0302) ;  THEORY of OPERATION:
                                        (0303) ;     1) Read and save the Compare register.
                                        (0304) ;     2) Read the Count register, causing its data to be latched into
                                        (0305) ;        the Compare register.
                                        (0306) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0307) ;        to the buffer.
                                        (0308) ;     4) Disable global interrupts
                                        (0309) ;     5) Halt the timer
                                        (0310) ;     6) Restore the Compare register values
                                        (0311) ;     7) Start the Timer again
                                        (0312) ;     8) Restore global interrupt state
                                        (0313) ;
                                        (0314)  Timer8UsTrig_bReadTimerSaveCV:
                                        (0315) _Timer8UsTrig_bReadTimerSaveCV:
                                        (0316)  bTimer8UsTrig_ReadTimerSaveCV:                  ; this name deprecated
                                        (0317) _bTimer8UsTrig_ReadTimerSaveCV:                  ; this name deprecated
                                        (0318)  bTimer8UsTrig_ReadCounter:                      ; this name deprecated
                                        (0319) _bTimer8UsTrig_ReadCounter:                      ; this name deprecated
                                        (0320) 
                                        (0321) CpuFlags:      equ   0
                                        (0322) bCount:        equ   1
                                        (0323) 
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_2
035B: 4F       MOV   X,SP               (0325)    mov   X, SP                                   ; X <- stack frame pointer
035C: 38 02    ADD   SP,0x2             (0326)    add   SP, 2                                   ; Reserve space for flags, count
035E: 5D 27    MOV   A,REG[0x27]        (0327)    mov   A, reg[Timer8UsTrig_CONTROL_REG]        ; save the Control register
0360: 08       PUSH  A                  (0328)    push  A
0361: 5D 26    MOV   A,REG[0x26]        (0329)    mov   A, reg[Timer8UsTrig_COMPARE_REG]        ; save the Compare register
0363: 08       PUSH  A                  (0330)    push  A
0364: 5D 24    MOV   A,REG[0x24]        (0331)    mov   A, reg[Timer8UsTrig_COUNTER_REG]        ; synchronous copy DR2 <- DR0
                                        (0332)                                                  ; This may cause an interrupt!
0366: 5D 26    MOV   A,REG[0x26]        (0333)    mov   A, reg[Timer8UsTrig_COMPARE_REG]        ; Now grab DR2 (DR0) and save
0368: 54 01    MOV   [X+1],A            (0334)    mov   [X+bCount], A
036A: 50 00    MOV   A,0x0              (0335)    mov   A, 0                                    ; Guess the global interrupt state
036C: 49 F7 01 TST   REG[0xF7],0x1      (0336)    tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
036F: A0 03    JZ    0x0373             (0337)    jz    .SetupStatusFlag                        ;   Yes, guess was correct
0371: 50 01    MOV   A,0x1              (0338)    mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
                                        (0339) .SetupStatusFlag:                                ; and ...
0373: 54 00    MOV   [X+0],A            (0340)    mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
0375: 70 FE    AND   F,0xFE             
0377: 41 27 FE AND   REG[0x27],0xFE     
                                        (0341)    M8C_DisableGInt                               ; Disable interrupts globally
                                        (0342)    Timer8UsTrig_Stop_M                           ; Stop the timer
037A: 18       POP   A                  (0343)    pop   A                                       ; Restore the Compare register
037B: 60 26    MOV   REG[0x26],A        (0344)    mov   reg[Timer8UsTrig_COMPARE_REG], A
037D: 18       POP   A                  (0345)    pop   A                                       ; restore start state of the timer
037E: 60 27    MOV   REG[0x27],A        (0346)    mov   reg[Timer8UsTrig_CONTROL_REG], A
0380: 18       POP   A                  (0347)    pop   A                                       ; Return result stored in stack frame
                                        (0348)    RAM_EPILOGUE RAM_USE_CLASS_2
0381: 7E       RETI                     (0349)    reti                                          ; Flag Reg <- StackFrame[0]
                                        (0350) 
                                        (0351) .ENDSECTION
                                        (0352) 
                                        (0353) 
                                        (0354) .SECTION
                                        (0355) ;-----------------------------------------------------------------------------
                                        (0356) ;  FUNCTION NAME: Timer8UsTrig_bReadTimer
                                        (0357) ;
                                        (0358) ;  DESCRIPTION:
                                        (0359) ;     Performs a software capture of the Count register.  A synchronous
                                        (0360) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0361) ;
                                        (0362) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;
                                        (0365) ;  ARGUMENTS:    None
                                        (0366) ;  RETURNS:      fastcall16 BYTE bCount, (value of DR0 in the A register)
                                        (0367) ;  SIDE EFFECTS:
                                        (0368) ;    May cause an interrupt.
                                        (0369) ;
                                        (0370) ;    The A and X registers may be modified by this or future implementations
                                        (0371) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0372) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0373) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0374) ;    functions.
                                        (0375) ;
                                        (0376) ;  THEORY of OPERATION:
                                        (0377) ;     1) Read the Count register - this causes the count value to be
                                        (0378) ;        latched into the Compare register.
                                        (0379) ;     2) Read and return the Count register values from the Compare
                                        (0380) ;        registers into the return buffer.
                                        (0381) ;
                                        (0382)  Timer8UsTrig_bReadTimer:
                                        (0383) _Timer8UsTrig_bReadTimer:
                                        (0384)  bTimer8UsTrig_ReadTimer:                        ; this name deprecated
                                        (0385) _bTimer8UsTrig_ReadTimer:                        ; this name deprecated
                                        (0386)  bTimer8UsTrig_CaptureCounter:                   ; this name deprecated
                                        (0387) _bTimer8UsTrig_CaptureCounter:                   ; this name deprecated
                                        (0388) 
                                        (0389)    RAM_PROLOGUE RAM_USE_CLASS_1
0382: 5D 24    MOV   A,REG[0x24]        (0390)    mov   A, reg[Timer8UsTrig_COUNTER_REG]        ; synchronous copy DR2 <- DR0
                                        (0391)                                                  ; This may cause an interrupt!
0384: 5D 26    MOV   A,REG[0x26]        (0392)    mov   A, reg[Timer8UsTrig_COMPARE_REG]        ; Return DR2 (actually DR0)
                                        (0393)    RAM_EPILOGUE RAM_USE_CLASS_1
0386: 7F       RET                      (0394)    ret
                                        (0395) 
                                        (0396) .ENDSECTION
                                        (0397) 
                                        (0398) ; End of File Timer8UsTrig.asm
FILE: lib\timer8main.asm                (0001) ;;*****************************************************************************
0387: 43 E1 01 OR    REG[0xE1],0x1      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer8Main.asm
                                        (0004) ;;   Version: 2.70, Updated on 2013/5/19 at 10:44:42
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Timer8Main.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Timer8Main_EnableInt
                                        (0030) export _Timer8Main_EnableInt
                                        (0031) export  Timer8Main_DisableInt
                                        (0032) export _Timer8Main_DisableInt
                                        (0033) export  Timer8Main_Start
                                        (0034) export _Timer8Main_Start
                                        (0035) export  Timer8Main_Stop
                                        (0036) export _Timer8Main_Stop
                                        (0037) export  Timer8Main_WritePeriod
                                        (0038) export _Timer8Main_WritePeriod
                                        (0039) export  Timer8Main_WriteCompareValue
                                        (0040) export _Timer8Main_WriteCompareValue
                                        (0041) export  Timer8Main_bReadCompareValue
                                        (0042) export _Timer8Main_bReadCompareValue
                                        (0043) export  Timer8Main_bReadTimer
                                        (0044) export _Timer8Main_bReadTimer
                                        (0045) export  Timer8Main_bReadTimerSaveCV
                                        (0046) export _Timer8Main_bReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  bTimer8Main_ReadCompareValue  ; deprecated
                                        (0051) export _bTimer8Main_ReadCompareValue  ; deprecated
                                        (0052) export  bTimer8Main_ReadTimer         ; deprecated
                                        (0053) export _bTimer8Main_ReadTimer         ; deprecated
                                        (0054) export  bTimer8Main_ReadTimerSaveCV   ; deprecated
                                        (0055) export _bTimer8Main_ReadTimerSaveCV   ; deprecated
                                        (0056) 
                                        (0057) export  bTimer8Main_ReadCounter       ; obsolete
                                        (0058) export _bTimer8Main_ReadCounter       ; obsolete
                                        (0059) export  bTimer8Main_CaptureCounter    ; obsolete
                                        (0060) export _bTimer8Main_CaptureCounter    ; obsolete
                                        (0061) 
                                        (0062) 
                                        (0063) AREA rawbot_RAM (RAM,REL)
                                        (0064) 
                                        (0065) ;-----------------------------------------------
                                        (0066) ;  Constant Definitions
                                        (0067) ;-----------------------------------------------
                                        (0068) 
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: Timer8Main_EnableInt
                                        (0080) ;
                                        (0081) ;  DESCRIPTION:
                                        (0082) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0083) ;     associated with this User Module. This function has no effect until and
                                        (0084) ;     unless the global interrupts are enabled (for example by using the
                                        (0085) ;     macro M8C_EnableGInt).
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;
                                        (0088) ;  ARGUMENTS:    None.
                                        (0089) ;  RETURNS:      Nothing.
                                        (0090) ;  SIDE EFFECTS: 
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097)  Timer8Main_EnableInt:
                                        (0098) _Timer8Main_EnableInt:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0100)    Timer8Main_EnableInt_M
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
038A: 7F       RET                      (0102)    ret
038B: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0103) 
                                        (0104) .ENDSECTION
                                        (0105) 
                                        (0106) 
                                        (0107) .SECTION
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109) ;  FUNCTION NAME: Timer8Main_DisableInt
                                        (0110) ;
                                        (0111) ;  DESCRIPTION:
                                        (0112) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0113) ;     mask bit associated with this User Module.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS: 
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  Timer8Main_DisableInt:
                                        (0126) _Timer8Main_DisableInt:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    Timer8Main_DisableInt_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
038E: 7F       RET                      (0130)    ret
038F: 43 23 01 OR    REG[0x23],0x1      
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) 
                                        (0135) .SECTION
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  FUNCTION NAME: Timer8Main_Start
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;     Sets the start bit in the Control register of this user module.  The
                                        (0141) ;     timer will begin counting on the next input clock.
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:    None
                                        (0145) ;  RETURNS:      Nothing
                                        (0146) ;  SIDE EFFECTS: 
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  Timer8Main_Start:
                                        (0154) _Timer8Main_Start:
                                        (0155)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0156)    Timer8Main_Start_M
                                        (0157)    RAM_EPILOGUE RAM_USE_CLASS_1
0392: 7F       RET                      (0158)    ret
0393: 41 23 FE AND   REG[0x23],0xFE     
                                        (0159) 
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: Timer8Main_Stop
                                        (0166) ;
                                        (0167) ;  DESCRIPTION:
                                        (0168) ;     Disables timer operation by clearing the start bit in the Control
                                        (0169) ;     register.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    None
                                        (0173) ;  RETURNS:      Nothing
                                        (0174) ;  SIDE EFFECTS: 
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  Timer8Main_Stop:
                                        (0182) _Timer8Main_Stop:
                                        (0183)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0184)    Timer8Main_Stop_M
                                        (0185)    RAM_EPILOGUE RAM_USE_CLASS_1
0396: 7F       RET                      (0186)    ret
                                        (0187) 
                                        (0188) .ENDSECTION
                                        (0189) 
                                        (0190) 
                                        (0191) .SECTION
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  FUNCTION NAME: Timer8Main_WritePeriod
                                        (0194) ;
                                        (0195) ;  DESCRIPTION:
                                        (0196) ;     Write the 8-bit period value into the Period register (DR1). If the
                                        (0197) ;     Timer user module is stopped, then this value will also be latched
                                        (0198) ;     into the Count register (DR0).
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;
                                        (0201) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0202) ;  RETURNS:   Nothing
                                        (0203) ;  SIDE EFFECTS: 
                                        (0204) ;    The A and X registers may be modified by this or future implementations
                                        (0205) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0206) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0207) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0208) ;    functions.
                                        (0209) ;
                                        (0210)  Timer8Main_WritePeriod:
                                        (0211) _Timer8Main_WritePeriod:
                                        (0212)    RAM_PROLOGUE RAM_USE_CLASS_1
0397: 60 21    MOV   REG[0x21],A        (0213)    mov   reg[Timer8Main_PERIOD_REG], A
                                        (0214)    RAM_EPILOGUE RAM_USE_CLASS_1
0399: 7F       RET                      (0215)    ret
                                        (0216) 
                                        (0217) .ENDSECTION
                                        (0218) 
                                        (0219) 
                                        (0220) .SECTION
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;  FUNCTION NAME: Timer8Main_WriteCompareValue
                                        (0223) ;
                                        (0224) ;  DESCRIPTION:
                                        (0225) ;     Writes compare value into the Compare register (DR2).
                                        (0226) ;
                                        (0227) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0228) ;           Compare register. (Call Timer8Main_Stop to disable).
                                        (0229) ;-----------------------------------------------------------------------------
                                        (0230) ;
                                        (0231) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0232) ;  RETURNS:      Nothing
                                        (0233) ;  SIDE EFFECTS: 
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240)  Timer8Main_WriteCompareValue:
                                        (0241) _Timer8Main_WriteCompareValue:
                                        (0242)    RAM_PROLOGUE RAM_USE_CLASS_1
039A: 60 22    MOV   REG[0x22],A        (0243)    mov   reg[Timer8Main_COMPARE_REG], A
                                        (0244)    RAM_EPILOGUE RAM_USE_CLASS_1
039C: 7F       RET                      (0245)    ret
                                        (0246) 
                                        (0247) .ENDSECTION
                                        (0248) 
                                        (0249) 
                                        (0250) .SECTION
                                        (0251) ;-----------------------------------------------------------------------------
                                        (0252) ;  FUNCTION NAME: Timer8Main_bReadCompareValue
                                        (0253) ;
                                        (0254) ;  DESCRIPTION:
                                        (0255) ;     Reads the Compare register.
                                        (0256) ;-----------------------------------------------------------------------------
                                        (0257) ;
                                        (0258) ;  ARGUMENTS:    None
                                        (0259) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0260) ;  SIDE EFFECTS: 
                                        (0261) ;    The A and X registers may be modified by this or future implementations
                                        (0262) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0263) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0264) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0265) ;    functions.
                                        (0266) ;
                                        (0267)  Timer8Main_bReadCompareValue:
                                        (0268) _Timer8Main_bReadCompareValue:
                                        (0269)  bTimer8Main_ReadCompareValue:                   ; this name deprecated
                                        (0270) _bTimer8Main_ReadCompareValue:                   ; this name deprecated
                                        (0271)    RAM_PROLOGUE RAM_USE_CLASS_1
039D: 5D 22    MOV   A,REG[0x22]        (0272)    mov   A, reg[Timer8Main_COMPARE_REG]
                                        (0273)    RAM_EPILOGUE RAM_USE_CLASS_1
039F: 7F       RET                      (0274)    ret
                                        (0275) 
                                        (0276) .ENDSECTION
                                        (0277) 
                                        (0278) 
                                        (0279) .SECTION
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;  FUNCTION NAME: Timer8Main_bReadTimerSaveCV
                                        (0282) ;
                                        (0283) ;  DESCRIPTION:
                                        (0284) ;     Returns the value in the Count register (DR0), preserving the
                                        (0285) ;     value in the compare register (DR2).
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS: None
                                        (0289) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0292) ;     2) If enabled, Global interrupts are momentarily disabled.
                                        (0293) ;     3) The user module is stopped momentarily while the compare value is
                                        (0294) ;        restored.  This may cause the Count register to miss one or more
                                        (0295) ;        counts depending on the input clock speed.
                                        (0296) ;     4) The A and X registers may be modified by this or future implementations
                                        (0297) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0298) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0299) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0300) ;        functions.
                                        (0301) ;
                                        (0302) ;  THEORY of OPERATION:
                                        (0303) ;     1) Read and save the Compare register.
                                        (0304) ;     2) Read the Count register, causing its data to be latched into
                                        (0305) ;        the Compare register.
                                        (0306) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0307) ;        to the buffer.
                                        (0308) ;     4) Disable global interrupts
                                        (0309) ;     5) Halt the timer
                                        (0310) ;     6) Restore the Compare register values
                                        (0311) ;     7) Start the Timer again
                                        (0312) ;     8) Restore global interrupt state
                                        (0313) ;
                                        (0314)  Timer8Main_bReadTimerSaveCV:
                                        (0315) _Timer8Main_bReadTimerSaveCV:
                                        (0316)  bTimer8Main_ReadTimerSaveCV:                    ; this name deprecated
                                        (0317) _bTimer8Main_ReadTimerSaveCV:                    ; this name deprecated
                                        (0318)  bTimer8Main_ReadCounter:                        ; this name deprecated
                                        (0319) _bTimer8Main_ReadCounter:                        ; this name deprecated
                                        (0320) 
                                        (0321) CpuFlags:      equ   0
                                        (0322) bCount:        equ   1
                                        (0323) 
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_2
03A0: 4F       MOV   X,SP               (0325)    mov   X, SP                                   ; X <- stack frame pointer
03A1: 38 02    ADD   SP,0x2             (0326)    add   SP, 2                                   ; Reserve space for flags, count
03A3: 5D 23    MOV   A,REG[0x23]        (0327)    mov   A, reg[Timer8Main_CONTROL_REG]          ; save the Control register
03A5: 08       PUSH  A                  (0328)    push  A
03A6: 5D 22    MOV   A,REG[0x22]        (0329)    mov   A, reg[Timer8Main_COMPARE_REG]          ; save the Compare register
03A8: 08       PUSH  A                  (0330)    push  A
03A9: 5D 20    MOV   A,REG[0x20]        (0331)    mov   A, reg[Timer8Main_COUNTER_REG]          ; synchronous copy DR2 <- DR0
                                        (0332)                                                  ; This may cause an interrupt!
03AB: 5D 22    MOV   A,REG[0x22]        (0333)    mov   A, reg[Timer8Main_COMPARE_REG]          ; Now grab DR2 (DR0) and save
03AD: 54 01    MOV   [X+1],A            (0334)    mov   [X+bCount], A
03AF: 50 00    MOV   A,0x0              (0335)    mov   A, 0                                    ; Guess the global interrupt state
03B1: 49 F7 01 TST   REG[0xF7],0x1      (0336)    tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
03B4: A0 03    JZ    0x03B8             (0337)    jz    .SetupStatusFlag                        ;   Yes, guess was correct
03B6: 50 01    MOV   A,0x1              (0338)    mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
                                        (0339) .SetupStatusFlag:                                ; and ...
03B8: 54 00    MOV   [X+0],A            (0340)    mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
03BA: 70 FE    AND   F,0xFE             
03BC: 41 23 FE AND   REG[0x23],0xFE     
                                        (0341)    M8C_DisableGInt                               ; Disable interrupts globally
                                        (0342)    Timer8Main_Stop_M                             ; Stop the timer
03BF: 18       POP   A                  (0343)    pop   A                                       ; Restore the Compare register
03C0: 60 22    MOV   REG[0x22],A        (0344)    mov   reg[Timer8Main_COMPARE_REG], A
03C2: 18       POP   A                  (0345)    pop   A                                       ; restore start state of the timer
03C3: 60 23    MOV   REG[0x23],A        (0346)    mov   reg[Timer8Main_CONTROL_REG], A
03C5: 18       POP   A                  (0347)    pop   A                                       ; Return result stored in stack frame
                                        (0348)    RAM_EPILOGUE RAM_USE_CLASS_2
03C6: 7E       RETI                     (0349)    reti                                          ; Flag Reg <- StackFrame[0]
                                        (0350) 
                                        (0351) .ENDSECTION
                                        (0352) 
                                        (0353) 
                                        (0354) .SECTION
                                        (0355) ;-----------------------------------------------------------------------------
                                        (0356) ;  FUNCTION NAME: Timer8Main_bReadTimer
                                        (0357) ;
                                        (0358) ;  DESCRIPTION:
                                        (0359) ;     Performs a software capture of the Count register.  A synchronous
                                        (0360) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0361) ;
                                        (0362) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;
                                        (0365) ;  ARGUMENTS:    None
                                        (0366) ;  RETURNS:      fastcall16 BYTE bCount, (value of DR0 in the A register)
                                        (0367) ;  SIDE EFFECTS:
                                        (0368) ;    May cause an interrupt.
                                        (0369) ;
                                        (0370) ;    The A and X registers may be modified by this or future implementations
                                        (0371) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0372) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0373) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0374) ;    functions.
                                        (0375) ;
                                        (0376) ;  THEORY of OPERATION:
                                        (0377) ;     1) Read the Count register - this causes the count value to be
                                        (0378) ;        latched into the Compare register.
                                        (0379) ;     2) Read and return the Count register values from the Compare
                                        (0380) ;        registers into the return buffer.
                                        (0381) ;
                                        (0382)  Timer8Main_bReadTimer:
                                        (0383) _Timer8Main_bReadTimer:
                                        (0384)  bTimer8Main_ReadTimer:                          ; this name deprecated
                                        (0385) _bTimer8Main_ReadTimer:                          ; this name deprecated
                                        (0386)  bTimer8Main_CaptureCounter:                     ; this name deprecated
                                        (0387) _bTimer8Main_CaptureCounter:                     ; this name deprecated
                                        (0388) 
                                        (0389)    RAM_PROLOGUE RAM_USE_CLASS_1
03C7: 5D 20    MOV   A,REG[0x20]        (0390)    mov   A, reg[Timer8Main_COUNTER_REG]          ; synchronous copy DR2 <- DR0
                                        (0391)                                                  ; This may cause an interrupt!
03C9: 5D 22    MOV   A,REG[0x22]        (0392)    mov   A, reg[Timer8Main_COMPARE_REG]          ; Return DR2 (actually DR0)
                                        (0393)    RAM_EPILOGUE RAM_USE_CLASS_1
03CB: 7F       RET                      (0394)    ret
                                        (0395) 
                                        (0396) .ENDSECTION
                                        (0397) 
                                        (0398) ; End of File Timer8Main.asm
FILE: lib\timer16usecho.asm             (0001) ;;*****************************************************************************
03CC: 43 E1 08 OR    REG[0xE1],0x8      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer16UsEcho.asm
                                        (0004) ;;   Version: 2.6, Updated on 2013/5/19 at 10:44:39
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Timer16UsEcho.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Timer16UsEcho_EnableInt
                                        (0030) export _Timer16UsEcho_EnableInt
                                        (0031) export  Timer16UsEcho_DisableInt
                                        (0032) export _Timer16UsEcho_DisableInt
                                        (0033) export  Timer16UsEcho_Start
                                        (0034) export _Timer16UsEcho_Start
                                        (0035) export  Timer16UsEcho_Stop
                                        (0036) export _Timer16UsEcho_Stop
                                        (0037) export  Timer16UsEcho_WritePeriod
                                        (0038) export _Timer16UsEcho_WritePeriod
                                        (0039) export  Timer16UsEcho_WriteCompareValue
                                        (0040) export _Timer16UsEcho_WriteCompareValue
                                        (0041) export  Timer16UsEcho_wReadCompareValue
                                        (0042) export _Timer16UsEcho_wReadCompareValue
                                        (0043) export  Timer16UsEcho_wReadTimer
                                        (0044) export _Timer16UsEcho_wReadTimer
                                        (0045) export  Timer16UsEcho_wReadTimerSaveCV
                                        (0046) export _Timer16UsEcho_wReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  wTimer16UsEcho_ReadCompareValue  ; deprecated
                                        (0051) export _wTimer16UsEcho_ReadCompareValue  ; deprecated
                                        (0052) export  wTimer16UsEcho_ReadTimer         ; deprecated
                                        (0053) export _wTimer16UsEcho_ReadTimer         ; deprecated
                                        (0054) export  wTimer16UsEcho_ReadTimerSaveCV   ; deprecated
                                        (0055) export _wTimer16UsEcho_ReadTimerSaveCV   ; deprecated
                                        (0056) 
                                        (0057) export  wTimer16UsEcho_ReadCounter       ; obsolete
                                        (0058) export _wTimer16UsEcho_ReadCounter       ; obsolete
                                        (0059) export  wTimer16UsEcho_CaptureCounter    ; obsolete
                                        (0060) export _wTimer16UsEcho_CaptureCounter    ; obsolete
                                        (0061) 
                                        (0062) 
                                        (0063) AREA rawbot_RAM (RAM,REL)
                                        (0064) 
                                        (0065) ;-----------------------------------------------
                                        (0066) ;  Constant Definitions
                                        (0067) ;-----------------------------------------------
                                        (0068) 
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: Timer16UsEcho_EnableInt
                                        (0080) ;
                                        (0081) ;  DESCRIPTION:
                                        (0082) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0083) ;     associated with this User Module. This function has no effect until and
                                        (0084) ;     unless the global interrupts are enabled (for example by using the
                                        (0085) ;     macro M8C_EnableGInt).
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;
                                        (0088) ;  ARGUMENTS:    None.
                                        (0089) ;  RETURNS:      Nothing.
                                        (0090) ;  SIDE EFFECTS: 
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097)  Timer16UsEcho_EnableInt:
                                        (0098) _Timer16UsEcho_EnableInt:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0100)    Timer16UsEcho_EnableInt_M
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
03CF: 7F       RET                      (0102)    ret
03D0: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0103) 
                                        (0104) .ENDSECTION
                                        (0105) 
                                        (0106) 
                                        (0107) .SECTION
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109) ;  FUNCTION NAME: Timer16UsEcho_DisableInt
                                        (0110) ;
                                        (0111) ;  DESCRIPTION:
                                        (0112) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0113) ;     mask bit associated with this User Module.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS: 
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  Timer16UsEcho_DisableInt:
                                        (0126) _Timer16UsEcho_DisableInt:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    Timer16UsEcho_DisableInt_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
03D3: 7F       RET                      (0130)    ret
03D4: 43 2B 01 OR    REG[0x2B],0x1      
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) 
                                        (0135) .SECTION
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  FUNCTION NAME: Timer16UsEcho_Start
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;     Sets the start bit in the Control register of this user module.  The
                                        (0141) ;     timer will begin counting on the next input clock.
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:    None
                                        (0145) ;  RETURNS:      Nothing
                                        (0146) ;  SIDE EFFECTS: 
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  Timer16UsEcho_Start:
                                        (0154) _Timer16UsEcho_Start:
                                        (0155)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0156)    Timer16UsEcho_Start_M
                                        (0157)    RAM_EPILOGUE RAM_USE_CLASS_1
03D7: 7F       RET                      (0158)    ret
03D8: 41 2B FE AND   REG[0x2B],0xFE     
                                        (0159) 
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: Timer16UsEcho_Stop
                                        (0166) ;
                                        (0167) ;  DESCRIPTION:
                                        (0168) ;     Disables timer operation by clearing the start bit in the Control
                                        (0169) ;     register of the LSB block.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    None
                                        (0173) ;  RETURNS:      Nothing
                                        (0174) ;  SIDE EFFECTS: 
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  Timer16UsEcho_Stop:
                                        (0182) _Timer16UsEcho_Stop:
                                        (0183)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0184)    Timer16UsEcho_Stop_M
                                        (0185)    RAM_EPILOGUE RAM_USE_CLASS_1
03DB: 7F       RET                      (0186)    ret
                                        (0187) 
                                        (0188) .ENDSECTION
                                        (0189) 
                                        (0190) 
                                        (0191) .SECTION
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  FUNCTION NAME: Timer16UsEcho_WritePeriod
                                        (0194) ;
                                        (0195) ;  DESCRIPTION:
                                        (0196) ;     Write the 16-bit period value into the Period register (DR1). If the
                                        (0197) ;     Timer user module is stopped, then this value will also be latched
                                        (0198) ;     into the Count register (DR0).
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;
                                        (0201) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0202) ;  RETURNS:   Nothing
                                        (0203) ;  SIDE EFFECTS:
                                        (0204) ;    The A and X registers may be modified by this or future implementations
                                        (0205) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0206) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0207) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0208) ;    functions.
                                        (0209) ;
                                        (0210)  Timer16UsEcho_WritePeriod:
                                        (0211) _Timer16UsEcho_WritePeriod:
                                        (0212)    RAM_PROLOGUE RAM_USE_CLASS_1
03DC: 60 29    MOV   REG[0x29],A        (0213)    mov   reg[Timer16UsEcho_PERIOD_LSB_REG], A
03DE: 5B       MOV   A,X                (0214)    mov   A, X
03DF: 60 2D    MOV   REG[0x2D],A        (0215)    mov   reg[Timer16UsEcho_PERIOD_MSB_REG], A
                                        (0216)    RAM_EPILOGUE RAM_USE_CLASS_1
03E1: 7F       RET                      (0217)    ret
                                        (0218) 
                                        (0219) .ENDSECTION
                                        (0220) 
                                        (0221) 
                                        (0222) .SECTION
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;  FUNCTION NAME: Timer16UsEcho_WriteCompareValue
                                        (0225) ;
                                        (0226) ;  DESCRIPTION:
                                        (0227) ;     Writes compare value into the Compare register (DR2).
                                        (0228) ;
                                        (0229) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0230) ;           Compare register. (Call Timer16UsEcho_Stop to disable).
                                        (0231) ;-----------------------------------------------------------------------------
                                        (0232) ;
                                        (0233) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0234) ;  RETURNS:      Nothing
                                        (0235) ;  SIDE EFFECTS: 
                                        (0236) ;    The A and X registers may be modified by this or future implementations
                                        (0237) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0238) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0239) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0240) ;    functions.
                                        (0241) ;
                                        (0242)  Timer16UsEcho_WriteCompareValue:
                                        (0243) _Timer16UsEcho_WriteCompareValue:
                                        (0244)    RAM_PROLOGUE RAM_USE_CLASS_1
03E2: 60 2A    MOV   REG[0x2A],A        (0245)    mov   reg[Timer16UsEcho_COMPARE_LSB_REG], A
03E4: 5B       MOV   A,X                (0246)    mov   A, X
03E5: 60 2E    MOV   REG[0x2E],A        (0247)    mov   reg[Timer16UsEcho_COMPARE_MSB_REG], A
                                        (0248)    RAM_EPILOGUE RAM_USE_CLASS_1
03E7: 7F       RET                      (0249)    ret
                                        (0250) 
                                        (0251) .ENDSECTION
                                        (0252) 
                                        (0253) 
                                        (0254) .SECTION
                                        (0255) ;-----------------------------------------------------------------------------
                                        (0256) ;  FUNCTION NAME: Timer16UsEcho_wReadCompareValue
                                        (0257) ;
                                        (0258) ;  DESCRIPTION:
                                        (0259) ;     Reads the Compare registers.
                                        (0260) ;-----------------------------------------------------------------------------
                                        (0261) ;
                                        (0262) ;  ARGUMENTS:    None
                                        (0263) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0264) ;  SIDE EFFECTS: 
                                        (0265) ;    The A and X registers may be modified by this or future implementations
                                        (0266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0269) ;    functions.
                                        (0270) ;
                                        (0271)  Timer16UsEcho_wReadCompareValue:
                                        (0272) _Timer16UsEcho_wReadCompareValue:
                                        (0273)  wTimer16UsEcho_ReadCompareValue:                ; this name deprecated
                                        (0274) _wTimer16UsEcho_ReadCompareValue:                ; this name deprecated
                                        (0275)    RAM_PROLOGUE RAM_USE_CLASS_1
03E8: 5D 2E    MOV   A,REG[0x2E]        (0276)    mov   A, reg[Timer16UsEcho_COMPARE_MSB_REG]
03EA: 5C       MOV   X,A                (0277)    mov   X, A
03EB: 5D 2A    MOV   A,REG[0x2A]        (0278)    mov   A, reg[Timer16UsEcho_COMPARE_LSB_REG]
                                        (0279)    RAM_EPILOGUE RAM_USE_CLASS_1
03ED: 7F       RET                      (0280)    ret
                                        (0281) 
                                        (0282) .ENDSECTION
                                        (0283) 
                                        (0284) 
                                        (0285) .SECTION
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;  FUNCTION NAME: Timer16UsEcho_wReadTimerSaveCV
                                        (0288) ;
                                        (0289) ;  DESCRIPTION:
                                        (0290) ;     Returns the value in the Count register (DR0), preserving the
                                        (0291) ;     value in the compare register (DR2).
                                        (0292) ;-----------------------------------------------------------------------------
                                        (0293) ;
                                        (0294) ;  ARGUMENTS: None
                                        (0295) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0296) ;  SIDE EFFECTS:
                                        (0297) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0298) ;     2) If enabled, Global interrupts are momentarily disabled.
                                        (0299) ;     3) The user module is stopped momentarily while the compare value is
                                        (0300) ;        restored.  This may cause the Count register to miss one or more
                                        (0301) ;        counts depending on the input clock speed.
                                        (0302) ;     4) The A and X registers may be modified by this or future implementations
                                        (0303) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0304) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0305) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0306) ;        functions.
                                        (0307) ;
                                        (0308) ;  THEORY of OPERATION:
                                        (0309) ;     1) Read and save the Compare register.
                                        (0310) ;     2) Read the Count register, causing its data to be latched into
                                        (0311) ;        the Compare register.
                                        (0312) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0313) ;        to the buffer.
                                        (0314) ;     4) Disable global interrupts
                                        (0315) ;     5) Halt the timer
                                        (0316) ;     6) Restore the Compare register values
                                        (0317) ;     7) Start the Timer again
                                        (0318) ;     8) Restore global interrupt state
                                        (0319) ;
                                        (0320)  Timer16UsEcho_wReadTimerSaveCV:
                                        (0321) _Timer16UsEcho_wReadTimerSaveCV:
                                        (0322)  wTimer16UsEcho_ReadTimerSaveCV:                 ; this name deprecated
                                        (0323) _wTimer16UsEcho_ReadTimerSaveCV:                 ; this name deprecated
                                        (0324)  wTimer16UsEcho_ReadCounter:                     ; this name deprecated
                                        (0325) _wTimer16UsEcho_ReadCounter:                     ; this name deprecated
                                        (0326) 
                                        (0327) CpuFlags:      equ   0
                                        (0328) wCount_MSB:    equ   1
                                        (0329) wCount_LSB:    equ   2
                                        (0330) 
                                        (0331)    RAM_PROLOGUE RAM_USE_CLASS_2
03EE: 4F       MOV   X,SP               (0332)    mov   X, SP                                   ; X <- stack frame pointer
03EF: 38 03    ADD   SP,0x3             (0333)    add   SP, 3                                   ; Reserve space for flags, count
03F1: 5D 2B    MOV   A,REG[0x2B]        (0334)    mov   A, reg[Timer16UsEcho_CONTROL_LSB_REG]   ; save the Control register
03F3: 08       PUSH  A                  (0335)    push  A
03F4: 5D 2A    MOV   A,REG[0x2A]        (0336)    mov   A, reg[Timer16UsEcho_COMPARE_LSB_REG]   ; save the Compare register
03F6: 08       PUSH  A                  (0337)    push  A
03F7: 5D 2E    MOV   A,REG[0x2E]        (0338)    mov   A, reg[Timer16UsEcho_COMPARE_MSB_REG]
03F9: 08       PUSH  A                  (0339)    push  A
03FA: 5D 28    MOV   A,REG[0x28]        (0340)    mov   A, reg[Timer16UsEcho_COUNTER_LSB_REG]   ; synchronous copy DR2 <- DR0
                                        (0341)                                                  ; This may cause an interrupt!
03FC: 5D 2E    MOV   A,REG[0x2E]        (0342)    mov   A, reg[Timer16UsEcho_COMPARE_MSB_REG]   ; Now grab DR2 (DR0) and save
03FE: 54 01    MOV   [X+1],A            (0343)    mov   [X+wCount_MSB], A
0400: 5D 2A    MOV   A,REG[0x2A]        (0344)    mov   A, reg[Timer16UsEcho_COMPARE_LSB_REG]
0402: 54 02    MOV   [X+2],A            (0345)    mov   [X+wCount_LSB], A
0404: 50 00    MOV   A,0x0              (0346)    mov   A, 0                                    ; Guess the global interrupt state
0406: 49 F7 01 TST   REG[0xF7],0x1      (0347)    tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
0409: A0 03    JZ    0x040D             (0348)    jz    .SetupStatusFlag                        ;   Yes, guess was correct
040B: 50 01    MOV   A,0x1              (0349)    mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
                                        (0350) .SetupStatusFlag:                                ; and ...
040D: 54 00    MOV   [X+0],A            (0351)    mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
040F: 70 FE    AND   F,0xFE             
0411: 41 2B FE AND   REG[0x2B],0xFE     
                                        (0352)    M8C_DisableGInt                               ; Disable interrupts globally
                                        (0353)    Timer16UsEcho_Stop_M                          ; Disable (stop) the timer
0414: 18       POP   A                  (0354)    pop   A                                       ; Restore the Compare register
0415: 60 2E    MOV   REG[0x2E],A        (0355)    mov   reg[Timer16UsEcho_COMPARE_MSB_REG], A
0417: 18       POP   A                  (0356)    pop   A
0418: 60 2A    MOV   REG[0x2A],A        (0357)    mov   reg[Timer16UsEcho_COMPARE_LSB_REG], A
041A: 18       POP   A                  (0358)    pop   A                                       ; restore start state of the timer
041B: 60 2B    MOV   REG[0x2B],A        (0359)    mov   reg[Timer16UsEcho_CONTROL_LSB_REG], A
041D: 18       POP   A                  (0360)    pop   A                                       ; Return result stored in stack frame
041E: 20       POP   X                  (0361)    pop   X
                                        (0362)    RAM_EPILOGUE RAM_USE_CLASS_2
041F: 7E       RETI                     (0363)    reti                                          ; Flag Reg <- StackFrame[0]
                                        (0364) 
                                        (0365) .ENDSECTION
                                        (0366) 
                                        (0367) 
                                        (0368) .SECTION
                                        (0369) ;-----------------------------------------------------------------------------
                                        (0370) ;  FUNCTION NAME: Timer16UsEcho_wReadTimer
                                        (0371) ;
                                        (0372) ;  DESCRIPTION:
                                        (0373) ;     Performs a software capture of the Count register.  A synchronous
                                        (0374) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0375) ;
                                        (0376) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0377) ;-----------------------------------------------------------------------------
                                        (0378) ;
                                        (0379) ;  ARGUMENTS:    None
                                        (0380) ;  RETURNS:      fastcall16 WORD wCount, (value of DR0 in the X & A registers)
                                        (0381) ;  SIDE EFFECTS:
                                        (0382) ;    May cause an interrupt.
                                        (0383) ;
                                        (0384) ;    The A and X registers may be modified by this or future implementations
                                        (0385) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0386) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0387) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0388) ;    functions.
                                        (0389) ;
                                        (0390) ;  THEORY of OPERATION:
                                        (0391) ;     1) Read the Count register - this causes the count value to be
                                        (0392) ;        latched into the Compare registers.
                                        (0393) ;     2) Read and return the Count register values from the Compare
                                        (0394) ;        registers into the return buffer.
                                        (0395) ;
                                        (0396)  Timer16UsEcho_wReadTimer:
                                        (0397) _Timer16UsEcho_wReadTimer:
                                        (0398)  wTimer16UsEcho_ReadTimer:                       ; this name deprecated
                                        (0399) _wTimer16UsEcho_ReadTimer:                       ; this name deprecated
                                        (0400)  wTimer16UsEcho_CaptureCounter:                  ; this name deprecated
                                        (0401) _wTimer16UsEcho_CaptureCounter:                  ; this name deprecated
                                        (0402) 
                                        (0403)    RAM_PROLOGUE RAM_USE_CLASS_1
0420: 5D 28    MOV   A,REG[0x28]        (0404)    mov   A, reg[Timer16UsEcho_COUNTER_LSB_REG]   ; synchronous copy DR2 <- DR0
                                        (0405)                                                  ; This may cause an interrupt!
                                        (0406) 
0422: 5D 2E    MOV   A,REG[0x2E]        (0407)    mov   A, reg[Timer16UsEcho_COMPARE_MSB_REG]   ; Return DR2 (actually DR0)
0424: 5C       MOV   X,A                (0408)    mov   X, A
0425: 5D 2A    MOV   A,REG[0x2A]        (0409)    mov   A, reg[Timer16UsEcho_COMPARE_LSB_REG]
                                        (0410)    RAM_EPILOGUE RAM_USE_CLASS_1
0427: 7F       RET                      (0411)    ret
                                        (0412) 
                                        (0413) .ENDSECTION
                                        (0414) 
                                        (0415) ; End of File Timer16UsEcho.asm
FILE: lib\servopwmint.asm               (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: ServoPWMINT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2013/5/19 at 10:44:6
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "ServoPWM.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _ServoPWM_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _ServoPWM_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _ServoPWM_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0428: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file ServoPWMINT.asm
FILE: lib\servopwm.asm                  (0001) ;;*****************************************************************************
0429: 43 E1 20 OR    REG[0xE1],0x20     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: ServoPWM.asm
                                        (0004) ;;   Version: 2.5, Updated on 2013/5/19 at 10:44:6
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "ServoPWM.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  ServoPWM_EnableInt
                                        (0030) export _ServoPWM_EnableInt
                                        (0031) export  ServoPWM_DisableInt
                                        (0032) export _ServoPWM_DisableInt
                                        (0033) export  ServoPWM_Start
                                        (0034) export _ServoPWM_Start
                                        (0035) export  ServoPWM_Stop
                                        (0036) export _ServoPWM_Stop
                                        (0037) export  ServoPWM_WritePeriod
                                        (0038) export _ServoPWM_WritePeriod
                                        (0039) export  ServoPWM_WritePulseWidth
                                        (0040) export _ServoPWM_WritePulseWidth
                                        (0041) export  ServoPWM_wReadPulseWidth
                                        (0042) export _ServoPWM_wReadPulseWidth
                                        (0043) export  ServoPWM_wReadCounter
                                        (0044) export _ServoPWM_wReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  wServoPWM_ReadPulseWidth    ; deprecated
                                        (0049) export _wServoPWM_ReadPulseWidth    ; deprecated
                                        (0050) export  wServoPWM_ReadCounter       ; deprecated
                                        (0051) export _wServoPWM_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA rawbot_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: ServoPWM_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS: 
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  ServoPWM_EnableInt:
                                        (0091) _ServoPWM_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    ServoPWM_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
042C: 7F       RET                      (0095)    ret
042D: 41 E1 DF AND   REG[0xE1],0xDF     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: ServoPWM_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  ServoPWM_DisableInt:
                                        (0119) _ServoPWM_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    ServoPWM_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0430: 7F       RET                      (0123)    ret
0431: 43 33 01 OR    REG[0x33],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: ServoPWM_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  ServoPWM_Start:
                                        (0148) _ServoPWM_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    ServoPWM_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
0434: 7F       RET                      (0152)    ret
0435: 41 33 FE AND   REG[0x33],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: ServoPWM_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register of the LSB block.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  ServoPWM_Stop:
                                        (0176) _ServoPWM_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    ServoPWM_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
0438: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: ServoPWM_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 16-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count registers (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  ServoPWM_WritePeriod:
                                        (0206) _ServoPWM_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
0439: 60 31    MOV   REG[0x31],A        (0208)    mov   reg[ServoPWM_PERIOD_LSB_REG], A
043B: 5B       MOV   A,X                (0209)    mov   A, X
043C: 60 35    MOV   REG[0x35],A        (0210)    mov   reg[ServoPWM_PERIOD_MSB_REG], A
                                        (0211)    RAM_EPILOGUE RAM_USE_CLASS_1
043E: 7F       RET                      (0212)    ret
                                        (0213) 
                                        (0214) 
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) .SECTION
                                        (0218) ;-----------------------------------------------------------------------------
                                        (0219) ;  FUNCTION NAME: ServoPWM_WritePulseWidth
                                        (0220) ;
                                        (0221) ;  DESCRIPTION:
                                        (0222) ;     Writes the pulse width value into the Compare register (DR2).
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;
                                        (0225) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0226) ;  RETURNS:      Nothing
                                        (0227) ;  SIDE EFFECTS:
                                        (0228) ;    The A and X registers may be modified by this or future implementations
                                        (0229) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0230) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0231) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0232) ;    functions.
                                        (0233) ;
                                        (0234)  ServoPWM_WritePulseWidth:
                                        (0235) _ServoPWM_WritePulseWidth:
                                        (0236)    RAM_PROLOGUE RAM_USE_CLASS_1
043F: 60 32    MOV   REG[0x32],A        (0237)    mov   reg[ServoPWM_COMPARE_LSB_REG], A
0441: 5B       MOV   A,X                (0238)    mov   A, X
0442: 60 36    MOV   REG[0x36],A        (0239)    mov   reg[ServoPWM_COMPARE_MSB_REG], A
                                        (0240)    RAM_EPILOGUE RAM_USE_CLASS_1
0444: 7F       RET                      (0241)    ret
                                        (0242) 
                                        (0243) 
                                        (0244) .ENDSECTION
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: ServoPWM_wReadPulseWidth
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Reads the Compare register.
                                        (0252) ;-----------------------------------------------------------------------------
                                        (0253) ;
                                        (0254) ;  ARGUMENTS:    None
                                        (0255) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0256) ;  SIDE EFFECTS:
                                        (0257) ;    The A and X registers may be modified by this or future implementations
                                        (0258) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0259) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0260) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0261) ;    functions.
                                        (0262) ;
                                        (0263)  ServoPWM_wReadPulseWidth:
                                        (0264) _ServoPWM_wReadPulseWidth:
                                        (0265)  wServoPWM_ReadPulseWidth:                       ; this name deprecated
                                        (0266) _wServoPWM_ReadPulseWidth:                       ; this name deprecated
                                        (0267)    RAM_PROLOGUE RAM_USE_CLASS_1
0445: 5D 36    MOV   A,REG[0x36]        (0268)    mov   A, reg[ServoPWM_COMPARE_MSB_REG]
0447: 5C       MOV   X,A                (0269)    mov   X, A
0448: 5D 32    MOV   A,REG[0x32]        (0270)    mov   A, reg[ServoPWM_COMPARE_LSB_REG]
                                        (0271)    RAM_EPILOGUE RAM_USE_CLASS_1
044A: 7F       RET                      (0272)    ret
                                        (0273) 
                                        (0274) 
                                        (0275) .ENDSECTION
                                        (0276) 
                                        (0277) .SECTION
                                        (0278) ;-----------------------------------------------------------------------------
                                        (0279) ;  FUNCTION NAME: ServoPWM_wReadCounter
                                        (0280) ;
                                        (0281) ;  DESCRIPTION:
                                        (0282) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0283) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0284) ;     from the Count to the Compare register by holding the clock low in
                                        (0285) ;     the MSB PSoC block.
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS: None
                                        (0289) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0292) ;     2) The A and X registers may be modified by this or future implementations
                                        (0293) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0294) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0295) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0296) ;        functions.
                                        (0297) ;
                                        (0298)  ServoPWM_wReadCounter:
                                        (0299) _ServoPWM_wReadCounter:
                                        (0300)  wServoPWM_ReadCounter:                          ; this name deprecated
                                        (0301) _wServoPWM_ReadCounter:                          ; this name deprecated
                                        (0302) 
                                        (0303)    bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
                                        (0304)    bOrigClockSetting:      EQU   2                  ; Frame offset to temp Input   store
                                        (0305)    wCounter:               EQU   3                  ; Frame offset to temp Count   store
                                        (0306)    STACK_FRAME_SIZE:       EQU   5                  ; max stack frame size is 5 bytes
                                        (0307) 
                                        (0308)    RAM_PROLOGUE RAM_USE_CLASS_2
044B: 4F       MOV   X,SP               (0309)    mov   X, SP                                      ; X <-  stack frame pointer
044C: 5D 36    MOV   A,REG[0x36]        (0310)    mov   A, reg[ServoPWM_COMPARE_MSB_REG]        ; Save the Compare register on the stack
044E: 08       PUSH  A                  (0311)    push  A                                          ;
044F: 5D 32    MOV   A,REG[0x32]        (0312)    mov   A, reg[ServoPWM_COMPARE_LSB_REG]        ;
0451: 08       PUSH  A                  (0313)    push  A                                          ;  -stack frame now 2 bytes-
0452: 41 33 FE AND   REG[0x33],0xFE     
0455: 71 10    OR    F,0x10             
                                        (0314)    ServoPWM_Stop_M                               ; Disable the PWM function
                                        (0315)    M8C_SetBank1                                     ;
0457: 5D 31    MOV   A,REG[0x31]        (0316)    mov   A, reg[ServoPWM_INPUT_LSB_REG]          ; save the LSB clock input setting
0459: 08       PUSH  A                  (0317)    push  A                                          ;   on the stack (now 3 bytes) and ...
                                        (0318)                                                     ;   hold the clock low:
045A: 62 31 00 MOV   REG[0x31],0x0      (0319)    mov   reg[ServoPWM_INPUT_LSB_REG], INPUT_REG_NULL
045D: 70 EF    AND   F,0xEF             
                                        (0320)    M8C_SetBank0                                     ; Extract the Count via DR2 register
045F: 5D 34    MOV   A,REG[0x34]        (0321)    mov   A, reg[ServoPWM_COUNTER_MSB_REG]        ; DR2 <- DR0 (in the MSB block)
0461: 5D 36    MOV   A,REG[0x36]        (0322)    mov   A, reg[ServoPWM_COMPARE_MSB_REG]        ; Stash the Count MSB on the stack
0463: 08       PUSH  A                  (0323)    push  A                                          ;  -stack frame is now 4 bytes
0464: 5D 30    MOV   A,REG[0x30]        (0324)    mov   A, reg[ServoPWM_COUNTER_LSB_REG]        ; DR2 <- DR0 (in the LSB block)
0466: 5D 32    MOV   A,REG[0x32]        (0325)    mov   A, reg[ServoPWM_COMPARE_LSB_REG]        ; Stash the Count LSB on the stack
0468: 08       PUSH  A                  (0326)    push  A                                          ;   -stack frame is now 5 bytes-
0469: 52 00    MOV   A,[X+0]            (0327)    mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
046B: 60 36    MOV   REG[0x36],A        (0328)    mov   reg[ServoPWM_COMPARE_MSB_REG], A        ;
046D: 52 01    MOV   A,[X+1]            (0329)    mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
046F: 60 32    MOV   REG[0x32],A        (0330)    mov   reg[ServoPWM_COMPARE_LSB_REG], A        ;
0471: 71 10    OR    F,0x10             
                                        (0331)    M8C_SetBank1                                     ; ---Restore the PWM operation
0473: 52 02    MOV   A,[X+2]            (0332)    mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
0475: 60 31    MOV   REG[0x31],A        (0333)    mov   reg[ServoPWM_INPUT_LSB_REG], A          ;    and restore it
0477: 70 EF    AND   F,0xEF             
0479: 43 33 01 OR    REG[0x33],0x1      
                                        (0334)    M8C_SetBank0                                     ;
                                        (0335)    ServoPWM_Start_M                              ; Now re-enable the PWM function
047C: 18       POP   A                  (0336)    pop   A                                          ; Setup the return value
047D: 20       POP   X                  (0337)    pop   X                                          ;
047E: 38 FD    ADD   SP,0xFD            (0338)    ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
                                        (0339)    RAM_EPILOGUE RAM_USE_CLASS_2
0480: 7F       RET                      (0340)    ret
                                        (0341) 
                                        (0342) .ENDSECTION
                                        (0343) 
                                        (0344) ; End of File ServoPWM.asm
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2013/5/19 at 10:43:48
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
0481: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
0482: 10       PUSH  X                  (0209)     push  X
0483: 28       ROMX                     (0210)     romx                               ; Get character from ROM
0484: B0 04    JNZ   0x0489             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
0486: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
0487: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
0488: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
0489: 90 3C    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_Write_Data|LCD_WriteData(0218)     call  LCD_WriteData                ; Write data to LCD
048B: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
048C: 18       POP   A                  (0220)     pop   A
048D: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
048E: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
0490: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
0491: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
04A3: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
04A4: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
04A5: 67       ASR   A                  (0262)     asr   A
04A6: 67       ASR   A                  (0263)     asr   A
04A7: 67       ASR   A                  (0264)     asr   A
04A8: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
04AA: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
04AC: 90 19    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_Write_Data|LCD_WriteData(0267)     call  LCD_WriteData                ; Write data to screen
04AE: 18       POP   A                  (0268)     pop   A                            ; Restore value
04AF: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
04B1: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
04B3: 90 12    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_Write_Data|LCD_WriteData(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
04B5: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
04B6: 4B       SWAP  A,X                (0305)     swap  A,X
04B7: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
04B9: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
04BA: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
04BC: 7F       RET                      (0310)     ret
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
04BD: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
04BF: A0 06    JZ    0x04C6             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
04C1: 90 04    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_Write_Data|LCD_WriteData(0349)     call  LCD_WriteData                ; Write data to screen
04C3: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
04C4: 8F F8    JMP   _LCD_PrString      (0351)     jmp   .Loop_PrString               ; Go get next character
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
04C6: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
04C7: 90 5F    CALL  0x0528             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
04C9: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
04CA: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
04CB: 67       ASR   A                  (0390)     asr   A
04CC: 67       ASR   A                  (0391)     asr   A
04CD: 67       ASR   A                  (0392)     asr   A
04CE: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
04D0: 90 38    CALL  0x050A             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
04D2: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
04D3: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
04D5: 40       NOP                      (0397)     nop
04D6: 40       NOP                      (0398)     nop
04D7: 40       NOP                      (0399)     nop
04D8: 90 30    CALL  0x050A             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
04DA: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
04DB: 90 4B    CALL  0x0528             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
04DD: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
04DE: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
04DF: 67       ASR   A                  (0436)     asr   A
04E0: 67       ASR   A                  (0437)     asr   A
04E1: 67       ASR   A                  (0438)     asr   A
04E2: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
04E4: 90 09    CALL  0x04EF             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
04E6: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
04E7: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
04E9: 40       NOP                      (0443)     nop
04EA: 40       NOP                      (0444)     nop
04EB: 40       NOP                      (0445)     nop
04EC: 90 01    CALL  0x04EF             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
04EE: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
04EF: 08       PUSH  A                  (0477)     push  A
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
04F0: 26 3F 80 AND   [0x3F],0x80        (0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
04F3: 51 3F    MOV   A,[0x3F]           (0480)     mov   A,[Port_2_Data_SHADE]
04F5: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
04F7: 18       POP   A                  (0483)     pop   A
04F8: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
04FA: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
04FC: 2A 3F    OR    A,[0x3F]           (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
04FE: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
0500: 53 3F    MOV   [0x3F],A           (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0502: 40       NOP                      (0489)     nop
0503: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
0505: 53 3F    MOV   [0x3F],A           (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0507: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
0509: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
050A: 08       PUSH  A                  (0523)     push  A
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
050B: 26 3F 80 AND   [0x3F],0x80        (0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
050E: 2E 3F 20 OR    [0x3F],0x20        (0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
0511: 51 3F    MOV   A,[0x3F]           (0527)     mov   A,[Port_2_Data_SHADE]
0513: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
0515: 18       POP   A                  (0530)     pop   A
0516: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
0518: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
051A: 2A 3F    OR    A,[0x3F]           (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
051C: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
051E: 53 3F    MOV   [0x3F],A           (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
0520: 40       NOP                      (0536)     NOP
0521: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
0523: 53 3F    MOV   [0x3F],A           (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
0525: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
0527: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
0528: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
0529: 26 3F 80 AND   [0x3F],0x80        (0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
052C: 51 3F    MOV   A,[0x3F]           (0574)     mov   A,[Port_2_Data_SHADE]
052E: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
0530: 26 40 F0 AND   [0x40],0xF0        (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
0533: 51 40    MOV   A,[0x40]           (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
0535: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
0537: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
0539: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
053B: 2E 3F 40 OR    [0x3F],0x40        (0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
053E: 51 3F    MOV   A,[0x3F]           (0584)     mov   A,[Port_2_Data_SHADE]
0540: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
0542: 40       NOP                      (0586)     NOP
                                        (0587) 
0543: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
0544: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
0546: 2E 3F 50 OR    [0x3F],0x50        (0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
0549: 51 3F    MOV   A,[0x3F]           (0593)     mov   A,[Port_2_Data_SHADE]
054B: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
054D: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
054E: 40       NOP                      (0597)     nop
054F: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
0551: 08       PUSH  A                  (0610)     push  A
0552: 26 3F C0 AND   [0x3F],0xC0        (0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
0555: 51 3F    MOV   A,[0x3F]           (0612)     mov   A,[Port_2_Data_SHADE]
0557: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
0559: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
055A: 40       NOP                      (0616)     nop                                    ; fastest PSoC
055B: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
055C: 2E 3F 50 OR    [0x3F],0x50        (0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
055F: 51 3F    MOV   A,[0x3F]           (0620)     mov   A,[Port_2_Data_SHADE]
0561: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
0563: 40       NOP                      (0623)     nop
0564: 40       NOP                      (0624)     nop
                                        (0625) 
0565: 26 3F C0 AND   [0x3F],0xC0        (0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
0568: 51 3F    MOV   A,[0x3F]           (0627)     mov   A,[Port_2_Data_SHADE]
056A: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
056C: 18       POP   A                  (0630)     pop   A
056D: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
056F: A0 04    JZ    0x0574             (0633)     jz    .UNLOCK
0571: 79       DEC   X                  (0634)     dec   X
0572: BF D3    JNZ   0x0546             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
0574: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
0575: 2E 40 7F OR    [0x40],0x7F        (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
0578: 51 40    MOV   A,[0x40]           (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
057A: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
057C: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
057E: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
0580: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
0581: 7F       RET                      (0646)     ret
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
0582: 26 40 80 AND   [0x40],0x80        (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
0585: 2E 40 7F OR    [0x40],0x7F        (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
0588: 26 41 80 AND   [0x41],0x80        (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
058B: 51 40    MOV   A,[0x40]           (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
058D: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
058F: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
0591: 51 41    MOV   A,[0x41]           (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
0593: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
0595: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
0597: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0599: 90 63    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
059B: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
059D: 90 5F    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
059F: 50 03    MOV   A,0x3              (0701)     mov   A,03h
05A1: 9F 4C    CALL  0x04EF             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
05A3: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
05A5: 90 57    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
05A7: 50 03    MOV   A,0x3              (0707)     mov   A,03h
05A9: 9F 44    CALL  0x04EF             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
05AB: 90 5F    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
05AD: 90 5D    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
05AF: 90 5B    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
05B1: 50 03    MOV   A,0x3              (0714)     mov   A,03h
05B3: 9F 3A    CALL  0x04EF             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
05B5: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
05B7: 90 45    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
05B9: 50 02    MOV   A,0x2              (0720)     mov   A,02h
05BB: 9F 32    CALL  0x04EF             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
05BD: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
05BF: 90 3D    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
05C1: 50 08    MOV   A,0x8              (0726)     mov   A,08h
05C3: 9F 16    CALL  _LCD_Control       (0727)     call  LCD_Control
05C5: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
05C7: 90 35    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
05C9: 50 01    MOV   A,0x1              (0731)     mov   A,01h
05CB: 9F 0E    CALL  _LCD_Control       (0732)     call  LCD_Control
05CD: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
05CF: 90 2D    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
05D1: 50 06    MOV   A,0x6              (0736)     mov   A,06h
05D3: 9F 06    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
05D5: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
05D7: 9F 02    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
05D9: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
05DB: 9E FE    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
05DD: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
05DF: 9E FA    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
05E1: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
05E3: 9E F6    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
05E5: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
05E7: 9E F2    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
05E9: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
05EB: 90 11    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
05ED: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
05F2: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
05F4: 10       PUSH  X                  (0791)     push  X                            ; Store COL
05F5: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
05F7: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
05F8: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
05FA: 20       POP   X                  (0795)     pop   X
                                        (0796) 
05FB: 9E DE    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
05FD: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
05FE: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
0600: 78       DEC   A                  (0828)     dec   A
0601: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
0603: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
060C: 08       PUSH  A                  (0871)     push  A
060D: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
060F: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
0611: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
0613: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
0615: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
0617: D0 06    JNC   0x061E             (0877)     jnc   .Delay50u_End
0619: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
061B: 78       DEC   A                  (0880)     dec   A                              ; [4]
061C: BF FE    JNZ   0x061B             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
061E: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
061F: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
0620: 10       PUSH  X                  (0943)     push  X
0621: 59 00    MOV   X,[X+0]            (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
0623: 9F CD    CALL  _LCD_Position      (0945)     call  LCD_Position                 ; Set cursor position
0625: 20       POP   X                  (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
0626: 3D FE 00 CMP   [X-2],0x0          (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
0629: B0 05    JNZ   0x062F             (0950)     jnz   .LCD_CHECK1X
062B: 50 00    MOV   A,0x0              (0951)     mov   A,00h                         ; Load empty character
062D: 80 11    JMP   0x063F             (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
062F: 3D FE 06 CMP   [X-2],0x6          (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
0632: D0 07    JNC   0x063A             (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
0634: 52 FE    MOV   A,[X-2]            (0957)     mov   A,[X+BG_LENGTHX]
0636: 15 FE    SUB   [X-2],A            (0958)     sub   [X+BG_LENGTHX],A
0638: 80 06    JMP   0x063F             (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
063A: 50 06    MOV   A,0x6              (0962)     mov   A, 06h
063C: 17 FE 05 SUB   [X-2],0x5          (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
063F: 9E 86    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_Write_Data|LCD_WriteData(0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
0641: 7B FF    DEC   [X-1]              (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
0643: BF E2    JNZ   0x0626             (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
0645: 7F       RET                      (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
0646: 4F       MOV   X,SP               (1015)     mov   X, SP
0647: 10       PUSH  X                  (1016)     push  X
0648: 52 FD    MOV   A,[X-3]            (1017)     mov   A,[X+BG_ROW]                 ; Row in A
064A: 59 FC    MOV   X,[X-4]            (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
064C: 9F A4    CALL  _LCD_Position      (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
064E: 20       POP   X                  (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
064F: 3D FA 00 CMP   [X-6],0x0          (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
0652: B0 05    JNZ   0x0658             (1026)     jnz   .LCD_CHECK1
0654: 50 00    MOV   A,0x0              (1027)     mov   A,00h                        ; Load empty character
0656: 80 11    JMP   0x0668             (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
0658: 3D FA 06 CMP   [X-6],0x6          (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
065B: D0 07    JNC   0x0663             (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
065D: 52 FA    MOV   A,[X-6]            (1033)     mov   A,[X+BG_LENGTH]
065F: 15 FA    SUB   [X-6],A            (1034)     sub   [X+BG_LENGTH],A
0661: 80 06    JMP   0x0668             (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
0663: 50 06    MOV   A,0x6              (1038)     mov   A, 06h
0665: 17 FA 05 SUB   [X-6],0x5          (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
0668: 9E 5D    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_Write_Data|LCD_WriteData(1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
066A: 7B FB    DEC   [X-5]              (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
066C: BF E2    JNZ   0x064F             (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
066E: 7F       RET                      (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
066F: 21 03    AND   A,0x3              (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
0671: 08       PUSH  A                  (1098)     push  A
0672: FF 7A    INDEX LCD_ROW_OFFSET     (1099)     index LCD_ROW_OFFSET  ; Get row offset
0674: 03 00    ADD   A,[X+0]            (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
0676: 9E 63    CALL  _LCD_Control       (1101)     call  LCD_Control                  ; Position Cursor
0678: 3D FE 00 CMP   [X-2],0x0          (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
067B: B0 05    JNZ   0x0681             (1103)     jnz   .VBG_NZ_SEGX
067D: 50 20    MOV   A,0x20             (1104)     mov   A,' '                        ; Load space character
067F: 80 13    JMP   0x0693             (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
0681: 3D FE 09 CMP   [X-2],0x9          (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
0684: D0 09    JNC   0x068E             (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
0686: 52 FE    MOV   A,[X-2]            (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
0688: 78       DEC   A                  (1111)     dec   A
0689: 56 FE 00 MOV   [X-2],0x0          (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
068C: 80 06    JMP   0x0693             (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
068E: 17 FE 08 SUB   [X-2],0x8          (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
0691: 50 07    MOV   A,0x7              (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
0693: 9E 32    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_Write_Data|LCD_WriteData(1120)     call  LCD_WriteData                ; Write value
0695: 18       POP   A                  (1121)     pop   A
0696: 78       DEC   A                  (1122)     dec   A
0697: 7B FF    DEC   [X-1]              (1123)     dec   [X+VBG_CHAR_HEIGHTX]
0699: BF D7    JNZ   0x0671             (1124)     jnz   .VBG_LOOPX
069B: 7F       RET                      (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
069C: 4F       MOV   X,SP               (1168)     mov   X, SP
069D: 52 FD    MOV   A,[X-3]            (1169)     mov   A, [X+VBG_ROW]
069F: 21 03    AND   A,0x3              (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
06A1: 08       PUSH  A                  (1172)     push  A
06A2: FF 4A    INDEX LCD_ROW_OFFSET     (1173)     index LCD_ROW_OFFSET  ; Get row offset
06A4: 03 FC    ADD   A,[X-4]            (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
06A6: 9E 33    CALL  _LCD_Control       (1175)     call  LCD_Control                  ; Position Cursor
06A8: 3D FA 00 CMP   [X-6],0x0          (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
06AB: B0 05    JNZ   0x06B1             (1177)     jnz   .VBG_NZ_SEG
06AD: 50 20    MOV   A,0x20             (1178)     mov   A,' '                        ; Load space character
06AF: 80 13    JMP   0x06C3             (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
06B1: 3D FA 09 CMP   [X-6],0x9          (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
06B4: D0 09    JNC   0x06BE             (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
06B6: 52 FA    MOV   A,[X-6]            (1184)     mov   A,[X+VBG_SEG_HEIGHT]
06B8: 78       DEC   A                  (1185)     dec   A
06B9: 56 FA 00 MOV   [X-6],0x0          (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
06BC: 80 06    JMP   0x06C3             (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
06BE: 17 FA 08 SUB   [X-6],0x8          (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
06C1: 50 07    MOV   A,0x7              (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
06C3: 9E 02    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_Write_Data|LCD_WriteData(1194)     call  LCD_WriteData                ; Write value
06C5: 18       POP   A                  (1195)     pop   A
06C6: 78       DEC   A                  (1196)     dec   A
06C7: 7B FB    DEC   [X-5]              (1197)     dec   [X+VBG_CHAR_HEIGHT]
06C9: BF D7    JNZ   0x06A1             (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
06CB: 7F       RET                      (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
06CC: 4F       MOV   X,SP               (1238)     mov   X,SP                         ; Get location of stack
06CD: 08       PUSH  A                  (1239)     push  A                            ; Create 2 locations
06CE: 08       PUSH  A                  (1240)     push  A
                                        (1241) 
06CF: 50 40    MOV   A,0x40             (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
06D1: 9E 08    CALL  _LCD_Control       (1243)     call  LCD_Control                  ; Position the CG pointer
06D3: 56 00 01 MOV   [X+0],0x1          (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
06D6: 56 01 08 MOV   [X+1],0x8          (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
06D9: 52 00    MOV   A,[X+0]            (1249)     mov   A,[X+VBGDATA_CTR]
06DB: 3B 01    CMP   A,[X+1]            (1250)     cmp   A,[X+VBG_BYTES]
06DD: D0 05    JNC   0x06E3             (1251)     jnc   .VBG_SOLID
06DF: 50 00    MOV   A,0x0              (1252)     mov   A,00h                        ; Empty line
06E1: 80 03    JMP   0x06E5             (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
06E3: 50 FF    MOV   A,0xFF             (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
06E5: 9D E0    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_Write_Data|LCD_WriteData(1257)     call  LCD_WriteData                ; character data
06E7: 7B 01    DEC   [X+1]              (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
06E9: BF EF    JNZ   0x06D9             (1259)     jnz   .VBG_Loop2                    ; End Loop 2
06EB: 77 00    INC   [X+0]              (1260)     inc   [X+VBGDATA_CTR]
06ED: 3D 00 09 CMP   [X+0],0x9          (1261)     cmp   [X+VBGDATA_CTR],09h
06F0: BF E5    JNZ   0x06D6             (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
06F2: 18       POP   A                  (1264)     pop  A
06F3: 18       POP   A                  (1265)     pop  A
06F4: 50 0C    MOV   A,0xC              (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
06F6: 9D E3    CALL  _LCD_Control       (1267)     call LCD_Control                   ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
06F8: 7F       RET                      (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
0707: 4F       MOV   X,SP               (1319)     mov   X,SP                         ; Get location of stack
0708: 38 03    ADD   SP,0x3             (1320)     add   SP,3
070A: 54 02    MOV   [X+2],A            (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
070C: 50 40    MOV   A,0x40             (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
070E: 9D CB    CALL  _LCD_Control       (1324)     call  LCD_Control                  ; Position the CG pointer
0710: 56 00 00 MOV   [X+0],0x0          (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
0713: 56 01 08 MOV   [X+1],0x8          (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
0716: 52 00    MOV   A,[X+0]            (1330)     mov   A,[X+BGDATA_PTR]
0718: 3D 02 00 CMP   [X+2],0x0          (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
071B: B0 05    JNZ   0x0721             (1332)     jnz   .BG_OTHER
071D: FF DA    INDEX LCD_BG_TYPE1       (1333)     index LCD_BG_TYPE1
071F: 80 03    JMP   0x0723             (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
0721: FF DD    INDEX LCD_BG_TYPE2       (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
0723: 9D A2    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_Write_Data|LCD_WriteData(1338)     call  LCD_WriteData
0725: 7B 01    DEC   [X+1]              (1339)     dec   [X+BGCHARS]                  ; Character builder counter
0727: BF EE    JNZ   0x0716             (1340)     jnz   .BG_Loop2
0729: 77 00    INC   [X+0]              (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
072B: 3D 00 07 CMP   [X+0],0x7          (1342)     cmp   [X+BGDATA_PTR],07h
072E: BF E4    JNZ   0x0713             (1343)     jnz   .BG_Loop1
                                        (1344) 
0730: 38 FD    ADD   SP,0xFD            (1345)     add   SP,-3
0732: 50 0C    MOV   A,0xC              (1346)     mov   A,LCD_DISP_ON
0734: 9D A5    CALL  _LCD_Control       (1347)     call  LCD_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
0736: 7F       RET                      (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: C:\Projects\RawBot\RawBot\functions.c
(0001) /*************
(0002) *  Includes  *
(0003) *************/
(0004) 
(0005) #include "Functions.h"
(0006) #include <m8c.h>
(0007) #include "PSoCAPI.h"
(0008) 
(0009) char lcdBuffer[4][8] = {0};
(0010) 
(0011) /**********
(0012) *  Servo  *
(0013) **********/
(0014) 
(0015) void servoStart(unsigned int period) {
__UserModules_end|__text_start|_servoStart|_servoStart:
  period               --> X-5
    0737: 10       PUSH  X
    0738: 4F       MOV   X,SP
(0016) 	ServoPWM_WritePeriod(period);
    0739: 10       PUSH  X
    073A: 52 FB    MOV   A,[X-5]
    073C: 08       PUSH  A
    073D: 52 FC    MOV   A,[X-4]
    073F: 20       POP   X
    0740: 7C 04 39 LCALL _ServoPWM_WritePeriod
(0017) 	ServoPWM_Start();	
    0743: 7C 04 31 LCALL _ServoPWM_Start
    0746: 20       POP   X
    0747: 20       POP   X
    0748: 7F       RET   
(0018) }
(0019) 
(0020) void servoStop(void) {
(0021) 	ServoPWM_Stop(); // Just for uniformity
_servoStop:
    0749: 10       PUSH  X
    074A: 7C 04 35 LCALL _ServoPWM_Stop
    074D: 20       POP   X
    074E: 7F       RET   
(0022) }
(0023) 
(0024) // Servo moving
(0025) void servoMove(int angle, unsigned int middle, unsigned int range) {
_servoMove:
  range                --> X-9
  middle               --> X-7
  angle                --> X-5
    074F: 10       PUSH  X
    0750: 4F       MOV   X,SP
(0026) 	ServoPWM_WritePulseWidth(middle + (angle*((range*2)/180)));
    0751: 52 F8    MOV   A,[X-8]
    0753: 53 3D    MOV   [__r1],A
    0755: 52 F7    MOV   A,[X-9]
    0757: 53 3E    MOV   [__r0],A
    0759: 65 3D    ASL   [__r1]
    075B: 6B 3E    RLC   [__r0]
    075D: 50 00    MOV   A,0x0
    075F: 08       PUSH  A
    0760: 50 B4    MOV   A,0xB4
    0762: 08       PUSH  A
    0763: 51 3E    MOV   A,[__r0]
    0765: 08       PUSH  A
    0766: 51 3D    MOV   A,[__r1]
    0768: 08       PUSH  A
    0769: 7C 0D F1 LCALL 0x0DF1
    076C: 18       POP   A
    076D: 53 3D    MOV   [__r1],A
    076F: 18       POP   A
    0770: 38 FE    ADD   SP,0xFE
    0772: 08       PUSH  A
    0773: 51 3D    MOV   A,[__r1]
    0775: 08       PUSH  A
    0776: 52 FB    MOV   A,[X-5]
    0778: 08       PUSH  A
    0779: 52 FC    MOV   A,[X-4]
    077B: 08       PUSH  A
    077C: 7C 0E 8D LCALL 0x0E8D
    077F: 38 FC    ADD   SP,0xFC
    0781: 5F 3D 32 MOV   [__r1],[__rX]
    0784: 5F 3E 31 MOV   [__r0],[__rY]
    0787: 52 FA    MOV   A,[X-6]
    0789: 02 3D    ADD   A,[__r1]
    078B: 53 3D    MOV   [__r1],A
    078D: 52 F9    MOV   A,[X-7]
    078F: 0A 3E    ADC   A,[__r0]
    0791: 10       PUSH  X
    0792: 08       PUSH  A
    0793: 51 3D    MOV   A,[__r1]
    0795: 20       POP   X
    0796: 7C 04 3F LCALL _ServoPWM_WritePulseWidth
    0799: 20       POP   X
    079A: 20       POP   X
    079B: 7F       RET   
(0027) }
(0028) 
(0029) /***************
(0030) *  Ultrasound  *
(0031) ***************/
(0032) 
(0033) void usTrigSend(void) {
(0034) 	digitalWrite(0, 6, 1); // Start the trigger signal
_usTrigSend:
    079C: 50 01    MOV   A,0x1
    079E: 08       PUSH  A
    079F: 50 06    MOV   A,0x6
    07A1: 08       PUSH  A
    07A2: 50 00    MOV   A,0x0
    07A4: 08       PUSH  A
    07A5: 92 E3    CALL  _digitalWrite
    07A7: 38 FD    ADD   SP,0xFD
(0035) 	Timer8UsTrig_Start(); // Used to measure 10us trigger pulse
    07A9: 10       PUSH  X
    07AA: 7C 03 4A LCALL _Timer8UsTrig_Start
    07AD: 20       POP   X
    07AE: 7F       RET   
(0036) }
(0037) 
(0038) int usCalculateDistance(unsigned long usRawTime) {
_usCalculateDistance:
  usRawTime            --> X-7
    07AF: 10       PUSH  X
    07B0: 4F       MOV   X,SP
(0039) 	return (((46400 - usRawTime) / 2) / 58);
    07B1: 50 40    MOV   A,0x40
    07B3: 13 FC    SUB   A,[X-4]
    07B5: 53 3B    MOV   [__r3],A
    07B7: 50 B5    MOV   A,0xB5
    07B9: 1B FB    SBB   A,[X-5]
    07BB: 53 3C    MOV   [__r2],A
    07BD: 50 00    MOV   A,0x0
    07BF: 1B FA    SBB   A,[X-6]
    07C1: 53 3D    MOV   [__r1],A
    07C3: 50 00    MOV   A,0x0
    07C5: 1B F9    SBB   A,[X-7]
    07C7: 53 3E    MOV   [__r0],A
    07C9: 70 FB    AND   F,0xFB
    07CB: 6E 3E    RRC   [__r0]
    07CD: 6E 3D    RRC   [__r1]
    07CF: 6E 3C    RRC   [__r2]
    07D1: 6E 3B    RRC   [__r3]
    07D3: 50 00    MOV   A,0x0
    07D5: 08       PUSH  A
    07D6: 08       PUSH  A
    07D7: 08       PUSH  A
    07D8: 50 3A    MOV   A,0x3A
    07DA: 08       PUSH  A
    07DB: 51 3E    MOV   A,[__r0]
    07DD: 08       PUSH  A
    07DE: 51 3D    MOV   A,[__r1]
    07E0: 08       PUSH  A
    07E1: 51 3C    MOV   A,[__r2]
    07E3: 08       PUSH  A
    07E4: 51 3B    MOV   A,[__r3]
    07E6: 08       PUSH  A
    07E7: 7C 0D F8 LCALL 0x0DF8
    07EA: 18       POP   A
    07EB: 53 3B    MOV   [__r3],A
    07ED: 18       POP   A
    07EE: 53 3C    MOV   [__r2],A
    07F0: 18       POP   A
    07F1: 18       POP   A
    07F2: 38 FC    ADD   SP,0xFC
    07F4: 5F 3D 3B MOV   [__r1],[__r3]
    07F7: 5F 3E 3C MOV   [__r0],[__r2]
    07FA: 20       POP   X
    07FB: 7F       RET   
(0040) }
(0041) 
(0042) /************
(0043) *  Driving  *
(0044) ************/
(0045) 
(0046) // Connections : H-bridge is connected to
(0047) // Used to drive the H-Bridge; think of a numpad for controls
(0048) // IN1 = Port0 Pin0 , IN2 = Port0 Pin1 etc
(0049) void drive(unsigned char dir) {
_drive:
  dir                  --> X-4
    07FC: 10       PUSH  X
    07FD: 4F       MOV   X,SP
    07FE: 38 02    ADD   SP,0x2
(0050) 	switch (dir) {
    0800: 52 FC    MOV   A,[X-4]
    0802: 54 01    MOV   [X+1],A
    0804: 56 00 00 MOV   [X+0],0x0
    0807: 3D 00 00 CMP   [X+0],0x0
    080A: B0 06    JNZ   0x0811
    080C: 3D 01 02 CMP   [X+1],0x2
    080F: A0 2B    JZ    0x083B
    0811: 3D 00 00 CMP   [X+0],0x0
    0814: B0 06    JNZ   0x081B
    0816: 3D 01 04 CMP   [X+1],0x4
    0819: A0 29    JZ    0x0843
    081B: 3D 00 00 CMP   [X+0],0x0
    081E: B0 06    JNZ   0x0825
    0820: 3D 01 05 CMP   [X+1],0x5
    0823: A0 27    JZ    0x084B
    0825: 3D 00 00 CMP   [X+0],0x0
    0828: B0 06    JNZ   0x082F
    082A: 3D 01 06 CMP   [X+1],0x6
    082D: A0 22    JZ    0x0850
    082F: 3D 00 00 CMP   [X+0],0x0
    0832: B0 06    JNZ   0x0839
    0834: 3D 01 08 CMP   [X+1],0x8
    0837: A0 20    JZ    0x0858
    0839: 80 26    JMP   0x0860
(0051) 		case 2: // Back (0101)
(0052) 			PRT0DR &= ~0x0A;
    083B: 41 00 F5 AND   REG[0x0],0xF5
(0053) 			PRT0DR |= 0x05;
    083E: 43 00 05 OR    REG[0x0],0x5
(0054) 			break;
    0841: 80 21    JMP   0x0863
(0055) 			
(0056) 		case 4: // Left (0110)
(0057) 			PRT0DR &= ~0x09;
    0843: 41 00 F6 AND   REG[0x0],0xF6
(0058) 			PRT0DR |= 0x06;
    0846: 43 00 06 OR    REG[0x0],0x6
(0059) 			break;	
    0849: 80 19    JMP   0x0863
(0060) 			
(0061) 		case 5: // Stop
(0062) 			PRT0DR &= ~0x0F; // All pins low;
    084B: 41 00 F0 AND   REG[0x0],0xF0
(0063) 			break;
    084E: 80 14    JMP   0x0863
(0064) 			
(0065) 		case 6: // Right (1001)
(0066) 			PRT0DR &= ~0x06;
    0850: 41 00 F9 AND   REG[0x0],0xF9
(0067) 			PRT0DR |= 0x09;
    0853: 43 00 09 OR    REG[0x0],0x9
(0068) 			break;
    0856: 80 0C    JMP   0x0863
(0069) 		
(0070) 		case 8: // Forward (1010)
(0071) 			PRT0DR &= ~0x05;
    0858: 41 00 FA AND   REG[0x0],0xFA
(0072) 			PRT0DR |= 0x0A;
    085B: 43 00 0A OR    REG[0x0],0xA
(0073) 			break;
    085E: 80 04    JMP   0x0863
(0074) 			
(0075) 		default:
(0076) 			PRT0DR &= ~0x0F; // All pins low;
    0860: 41 00 F0 AND   REG[0x0],0xF0
(0077) 			break;
    0863: 38 FE    ADD   SP,0xFE
    0865: 20       POP   X
    0866: 7F       RET   
(0078) 	}	
(0079) }
(0080) 
(0081) 
(0082) 
(0083) /*****************
(0084) *  General PSoC  *
(0085) *****************/
(0086) 
(0087) void backlight(unsigned char toggle) {
_backlight:
  toggle               --> X-4
    0867: 10       PUSH  X
    0868: 4F       MOV   X,SP
(0088) 	pinMode(2,7,1); // set the pin to strong
    0869: 50 01    MOV   A,0x1
    086B: 08       PUSH  A
    086C: 50 07    MOV   A,0x7
    086E: 08       PUSH  A
    086F: 50 02    MOV   A,0x2
    0871: 08       PUSH  A
    0872: 90 2C    CALL  _pinMode
    0874: 38 FD    ADD   SP,0xFD
(0089) 	if (toggle == 0) { BL_Data_ADDR=(BL_DataShadow&=~BL_MASK); }
    0876: 3D FC 00 CMP   [X-4],0x0
    0879: B0 0A    JNZ   0x0884
    087B: 26 3F 7F AND   [0x3F],0x7F
    087E: 51 3F    MOV   A,[0x3F]
    0880: 60 08    MOV   REG[0x8],A
    0882: 80 1B    JMP   0x089E
(0090) 	else if (toggle == 1) { BL_Data_ADDR=(BL_DataShadow|=BL_MASK); }
    0884: 3D FC 01 CMP   [X-4],0x1
    0887: B0 0A    JNZ   0x0892
    0889: 2E 3F 80 OR    [0x3F],0x80
    088C: 51 3F    MOV   A,[0x3F]
    088E: 60 08    MOV   REG[0x8],A
    0890: 80 0D    JMP   0x089E
(0091) 	else if (toggle == 2) { BL_Data_ADDR=(BL_DataShadow^=BL_MASK); }
    0892: 3D FC 02 CMP   [X-4],0x2
    0895: B0 08    JNZ   0x089E
    0897: 36 3F 80 XOR   [0x3F],0x80
    089A: 51 3F    MOV   A,[0x3F]
    089C: 60 08    MOV   REG[0x8],A
    089E: 20       POP   X
    089F: 7F       RET   
(0092) }
(0093) 
(0094) // Sets the pin mode
(0095) void pinMode(unsigned char port, unsigned char pin, unsigned char state) {
_pinMode:
  bitMask              --> X+2
  i                    --> X+0
  state                --> X-6
  pin                  --> X-5
  port                 --> X-4
    08A0: 10       PUSH  X
    08A1: 4F       MOV   X,SP
    08A2: 38 05    ADD   SP,0x5
(0096) 	int i;
(0097) 	BYTE bitMask = 1;
    08A4: 56 02 01 MOV   [X+2],0x1
(0098) 	for(i = 0; i < pin; i++) { bitMask *= 2; }
    08A7: 56 01 00 MOV   [X+1],0x0
    08AA: 56 00 00 MOV   [X+0],0x0
    08AD: 80 08    JMP   0x08B6
    08AF: 66 02    ASL   [X+2]
    08B1: 77 01    INC   [X+1]
    08B3: 0F 00 00 ADC   [X+0],0x0
    08B6: 52 FB    MOV   A,[X-5]
    08B8: 53 3D    MOV   [__r1],A
    08BA: 52 01    MOV   A,[X+1]
    08BC: 12 3D    SUB   A,[__r1]
    08BE: 50 00    MOV   A,0x0
    08C0: 31 80    XOR   A,0x80
    08C2: 53 32    MOV   [__rX],A
    08C4: 52 00    MOV   A,[X+0]
    08C6: 31 80    XOR   A,0x80
    08C8: 1A 32    SBB   A,[__rX]
    08CA: CF E4    JC    0x08AF
(0099) 
(0100) 	switch (state) {
    08CC: 52 FA    MOV   A,[X-6]
    08CE: 54 04    MOV   [X+4],A
    08D0: 56 03 00 MOV   [X+3],0x0
    08D3: 3D 03 00 CMP   [X+3],0x0
    08D6: B0 06    JNZ   0x08DD
    08D8: 3D 04 00 CMP   [X+4],0x0
    08DB: A0 17    JZ    0x08F3
    08DD: 3D 03 00 CMP   [X+3],0x0
    08E0: B0 06    JNZ   0x08E7
    08E2: 3D 04 01 CMP   [X+4],0x1
    08E5: A0 91    JZ    0x0977
    08E7: 3D 03 00 CMP   [X+3],0x0
    08EA: B0 06    JNZ   0x08F1
    08EC: 3D 04 03 CMP   [X+4],0x3
    08EF: A1 0E    JZ    0x09FE
    08F1: 81 94    JMP   0x0A86
(0101) 		case 0: // Resistive Pulldown
(0102) 			if(port == 0) { PRT0DM2 &= ~bitMask; PRT0DM1 &= ~bitMask; PRT0DM0 &= ~bitMask; }
    08F3: 3D FC 00 CMP   [X-4],0x0
    08F6: B0 28    JNZ   0x091F
    08F8: 52 02    MOV   A,[X+2]
    08FA: 73       CPL   A
    08FB: 53 3E    MOV   [__r0],A
    08FD: 5D 03    MOV   A,REG[0x3]
    08FF: 22 3E    AND   A,[__r0]
    0901: 60 03    MOV   REG[0x3],A
    0903: 52 02    MOV   A,[X+2]
    0905: 73       CPL   A
    0906: 53 3E    MOV   [__r0],A
    0908: 71 10    OR    F,0x10
    090A: 5D 01    MOV   A,REG[0x1]
    090C: 22 3E    AND   A,[__r0]
    090E: 60 01    MOV   REG[0x1],A
    0910: 52 02    MOV   A,[X+2]
    0912: 73       CPL   A
    0913: 53 3E    MOV   [__r0],A
    0915: 5D 00    MOV   A,REG[0x0]
    0917: 22 3E    AND   A,[__r0]
    0919: 60 00    MOV   REG[0x0],A
    091B: 70 CF    AND   F,0xCF
    091D: 81 68    JMP   0x0A86
(0103) 			else if(port == 1) { PRT1DM2 &= ~bitMask; PRT1DM1 &= ~bitMask; PRT1DM0 &= ~bitMask; }
    091F: 3D FC 01 CMP   [X-4],0x1
    0922: B0 28    JNZ   0x094B
    0924: 52 02    MOV   A,[X+2]
    0926: 73       CPL   A
    0927: 53 3E    MOV   [__r0],A
    0929: 5D 07    MOV   A,REG[0x7]
    092B: 22 3E    AND   A,[__r0]
    092D: 60 07    MOV   REG[0x7],A
    092F: 52 02    MOV   A,[X+2]
    0931: 73       CPL   A
    0932: 53 3E    MOV   [__r0],A
    0934: 71 10    OR    F,0x10
    0936: 5D 05    MOV   A,REG[0x5]
    0938: 22 3E    AND   A,[__r0]
    093A: 60 05    MOV   REG[0x5],A
    093C: 52 02    MOV   A,[X+2]
    093E: 73       CPL   A
    093F: 53 3E    MOV   [__r0],A
    0941: 5D 04    MOV   A,REG[0x4]
    0943: 22 3E    AND   A,[__r0]
    0945: 60 04    MOV   REG[0x4],A
    0947: 70 CF    AND   F,0xCF
    0949: 81 3C    JMP   0x0A86
(0104) 			else if(port == 2) { PRT2DM2 &= ~bitMask; PRT2DM1 &= ~bitMask; PRT2DM0 &= ~bitMask; }
    094B: 3D FC 02 CMP   [X-4],0x2
    094E: B1 37    JNZ   0x0A86
    0950: 52 02    MOV   A,[X+2]
    0952: 73       CPL   A
    0953: 53 3E    MOV   [__r0],A
    0955: 5D 0B    MOV   A,REG[0xB]
    0957: 22 3E    AND   A,[__r0]
    0959: 60 0B    MOV   REG[0xB],A
    095B: 52 02    MOV   A,[X+2]
    095D: 73       CPL   A
    095E: 53 3E    MOV   [__r0],A
    0960: 71 10    OR    F,0x10
    0962: 5D 09    MOV   A,REG[0x9]
    0964: 22 3E    AND   A,[__r0]
    0966: 60 09    MOV   REG[0x9],A
    0968: 52 02    MOV   A,[X+2]
    096A: 73       CPL   A
    096B: 53 3E    MOV   [__r0],A
    096D: 5D 08    MOV   A,REG[0x8]
    096F: 22 3E    AND   A,[__r0]
    0971: 60 08    MOV   REG[0x8],A
(0105) 			break;
    0973: 70 CF    AND   F,0xCF
    0975: 81 10    JMP   0x0A86
(0106) 			
(0107) 		case 1: // Strong
(0108) 			if(port == 0) { PRT0DM2 &= ~bitMask; PRT0DM1 &= ~bitMask; PRT0DM0 |= bitMask; }
    0977: 3D FC 00 CMP   [X-4],0x0
    097A: B0 29    JNZ   0x09A4
    097C: 52 02    MOV   A,[X+2]
    097E: 73       CPL   A
    097F: 53 3E    MOV   [__r0],A
    0981: 5D 03    MOV   A,REG[0x3]
    0983: 22 3E    AND   A,[__r0]
    0985: 60 03    MOV   REG[0x3],A
    0987: 52 02    MOV   A,[X+2]
    0989: 73       CPL   A
    098A: 53 3E    MOV   [__r0],A
    098C: 71 10    OR    F,0x10
    098E: 5D 01    MOV   A,REG[0x1]
    0990: 22 3E    AND   A,[__r0]
    0992: 60 01    MOV   REG[0x1],A
    0994: 5D 00    MOV   A,REG[0x0]
    0996: 53 3E    MOV   [__r0],A
    0998: 52 02    MOV   A,[X+2]
    099A: 2C 3E    OR    [__r0],A
    099C: 51 3E    MOV   A,[__r0]
    099E: 60 00    MOV   REG[0x0],A
    09A0: 70 CF    AND   F,0xCF
    09A2: 80 E3    JMP   0x0A86
(0109) 			else if(port == 1) { PRT1DM2 &= ~bitMask; PRT1DM1 &= ~bitMask; PRT1DM0 |= bitMask; }
    09A4: 3D FC 01 CMP   [X-4],0x1
    09A7: B0 29    JNZ   0x09D1
    09A9: 52 02    MOV   A,[X+2]
    09AB: 73       CPL   A
    09AC: 53 3E    MOV   [__r0],A
    09AE: 5D 07    MOV   A,REG[0x7]
    09B0: 22 3E    AND   A,[__r0]
    09B2: 60 07    MOV   REG[0x7],A
    09B4: 52 02    MOV   A,[X+2]
    09B6: 73       CPL   A
    09B7: 53 3E    MOV   [__r0],A
    09B9: 71 10    OR    F,0x10
    09BB: 5D 05    MOV   A,REG[0x5]
    09BD: 22 3E    AND   A,[__r0]
    09BF: 60 05    MOV   REG[0x5],A
    09C1: 5D 04    MOV   A,REG[0x4]
    09C3: 53 3E    MOV   [__r0],A
    09C5: 52 02    MOV   A,[X+2]
    09C7: 2C 3E    OR    [__r0],A
    09C9: 51 3E    MOV   A,[__r0]
    09CB: 60 04    MOV   REG[0x4],A
    09CD: 70 CF    AND   F,0xCF
    09CF: 80 B6    JMP   0x0A86
(0110) 			else if(port == 2) { PRT2DM2 &= ~bitMask; PRT2DM1 &= ~bitMask; PRT2DM0 |= bitMask; }
    09D1: 3D FC 02 CMP   [X-4],0x2
    09D4: B0 B1    JNZ   0x0A86
    09D6: 52 02    MOV   A,[X+2]
    09D8: 73       CPL   A
    09D9: 53 3E    MOV   [__r0],A
    09DB: 5D 0B    MOV   A,REG[0xB]
    09DD: 22 3E    AND   A,[__r0]
    09DF: 60 0B    MOV   REG[0xB],A
    09E1: 52 02    MOV   A,[X+2]
    09E3: 73       CPL   A
    09E4: 53 3E    MOV   [__r0],A
    09E6: 71 10    OR    F,0x10
    09E8: 5D 09    MOV   A,REG[0x9]
    09EA: 22 3E    AND   A,[__r0]
    09EC: 60 09    MOV   REG[0x9],A
    09EE: 5D 08    MOV   A,REG[0x8]
    09F0: 53 3E    MOV   [__r0],A
    09F2: 52 02    MOV   A,[X+2]
    09F4: 2C 3E    OR    [__r0],A
    09F6: 51 3E    MOV   A,[__r0]
    09F8: 60 08    MOV   REG[0x8],A
(0111) 			break;
    09FA: 70 CF    AND   F,0xCF
    09FC: 80 89    JMP   0x0A86
(0112) 			
(0113) 		case 3: // Pull up
(0114) 			if(port == 0) { PRT0DM2 &= ~bitMask; PRT0DM1 |= bitMask; PRT0DM0 |= bitMask; }
    09FE: 3D FC 00 CMP   [X-4],0x0
    0A01: B0 2A    JNZ   0x0A2C
    0A03: 52 02    MOV   A,[X+2]
    0A05: 73       CPL   A
    0A06: 53 3E    MOV   [__r0],A
    0A08: 5D 03    MOV   A,REG[0x3]
    0A0A: 22 3E    AND   A,[__r0]
    0A0C: 60 03    MOV   REG[0x3],A
    0A0E: 71 10    OR    F,0x10
    0A10: 5D 01    MOV   A,REG[0x1]
    0A12: 53 3E    MOV   [__r0],A
    0A14: 52 02    MOV   A,[X+2]
    0A16: 2C 3E    OR    [__r0],A
    0A18: 51 3E    MOV   A,[__r0]
    0A1A: 60 01    MOV   REG[0x1],A
    0A1C: 5D 00    MOV   A,REG[0x0]
    0A1E: 53 3E    MOV   [__r0],A
    0A20: 52 02    MOV   A,[X+2]
    0A22: 2C 3E    OR    [__r0],A
    0A24: 51 3E    MOV   A,[__r0]
    0A26: 60 00    MOV   REG[0x0],A
    0A28: 70 CF    AND   F,0xCF
    0A2A: 80 5B    JMP   0x0A86
(0115) 			else if(port == 1) { PRT1DM2 &= ~bitMask; PRT1DM1 |= bitMask; PRT1DM0 |= bitMask; }
    0A2C: 3D FC 01 CMP   [X-4],0x1
    0A2F: B0 2A    JNZ   0x0A5A
    0A31: 52 02    MOV   A,[X+2]
    0A33: 73       CPL   A
    0A34: 53 3E    MOV   [__r0],A
    0A36: 5D 07    MOV   A,REG[0x7]
    0A38: 22 3E    AND   A,[__r0]
    0A3A: 60 07    MOV   REG[0x7],A
    0A3C: 71 10    OR    F,0x10
    0A3E: 5D 05    MOV   A,REG[0x5]
    0A40: 53 3E    MOV   [__r0],A
    0A42: 52 02    MOV   A,[X+2]
    0A44: 2C 3E    OR    [__r0],A
    0A46: 51 3E    MOV   A,[__r0]
    0A48: 60 05    MOV   REG[0x5],A
    0A4A: 5D 04    MOV   A,REG[0x4]
    0A4C: 53 3E    MOV   [__r0],A
    0A4E: 52 02    MOV   A,[X+2]
    0A50: 2C 3E    OR    [__r0],A
    0A52: 51 3E    MOV   A,[__r0]
    0A54: 60 04    MOV   REG[0x4],A
    0A56: 70 CF    AND   F,0xCF
    0A58: 80 2D    JMP   0x0A86
(0116) 			else if(port == 2) { PRT2DM2 &= ~bitMask; PRT2DM1 |= bitMask; PRT2DM0 |= bitMask; }
    0A5A: 3D FC 02 CMP   [X-4],0x2
    0A5D: B0 28    JNZ   0x0A86
    0A5F: 52 02    MOV   A,[X+2]
    0A61: 73       CPL   A
    0A62: 53 3E    MOV   [__r0],A
    0A64: 5D 0B    MOV   A,REG[0xB]
    0A66: 22 3E    AND   A,[__r0]
    0A68: 60 0B    MOV   REG[0xB],A
    0A6A: 71 10    OR    F,0x10
    0A6C: 5D 09    MOV   A,REG[0x9]
    0A6E: 53 3E    MOV   [__r0],A
    0A70: 52 02    MOV   A,[X+2]
    0A72: 2C 3E    OR    [__r0],A
    0A74: 51 3E    MOV   A,[__r0]
    0A76: 60 09    MOV   REG[0x9],A
    0A78: 5D 08    MOV   A,REG[0x8]
    0A7A: 53 3E    MOV   [__r0],A
    0A7C: 52 02    MOV   A,[X+2]
    0A7E: 2C 3E    OR    [__r0],A
    0A80: 51 3E    MOV   A,[__r0]
    0A82: 60 08    MOV   REG[0x8],A
(0117) 			break;
(0118) 			
(0119) 		default:
(0120) 			break;
    0A84: 70 CF    AND   F,0xCF
    0A86: 38 FB    ADD   SP,0xFB
    0A88: 20       POP   X
    0A89: 7F       RET   
(0121) 	} 
(0122) }
(0123) 
(0124) 
(0125) // Function for setting pins
(0126) // 0 = low, 1 = high, 2 = toggle
(0127) void digitalWrite(unsigned char port, unsigned char pin, unsigned char state) {
_digitalWrite:
  bitMask              --> X+2
  i                    --> X+0
  state                --> X-6
  pin                  --> X-5
  port                 --> X-4
    0A8A: 10       PUSH  X
    0A8B: 4F       MOV   X,SP
    0A8C: 38 05    ADD   SP,0x5
(0128) 	int i ;
(0129) 	BYTE bitMask = 1; 
    0A8E: 56 02 01 MOV   [X+2],0x1
(0130) 	for(i = 0; i < pin; i++) { bitMask *= 2; }
    0A91: 56 01 00 MOV   [X+1],0x0
    0A94: 56 00 00 MOV   [X+0],0x0
    0A97: 80 08    JMP   0x0AA0
    0A99: 66 02    ASL   [X+2]
    0A9B: 77 01    INC   [X+1]
    0A9D: 0F 00 00 ADC   [X+0],0x0
    0AA0: 52 FB    MOV   A,[X-5]
    0AA2: 53 3D    MOV   [__r1],A
    0AA4: 52 01    MOV   A,[X+1]
    0AA6: 12 3D    SUB   A,[__r1]
    0AA8: 50 00    MOV   A,0x0
    0AAA: 31 80    XOR   A,0x80
    0AAC: 53 32    MOV   [__rX],A
    0AAE: 52 00    MOV   A,[X+0]
    0AB0: 31 80    XOR   A,0x80
    0AB2: 1A 32    SBB   A,[__rX]
    0AB4: CF E4    JC    0x0A99
(0131) 
(0132) 	switch (state) {
    0AB6: 52 FA    MOV   A,[X-6]
    0AB8: 54 04    MOV   [X+4],A
    0ABA: 56 03 00 MOV   [X+3],0x0
    0ABD: 3D 03 00 CMP   [X+3],0x0
    0AC0: B0 06    JNZ   0x0AC7
    0AC2: 3D 04 00 CMP   [X+4],0x0
    0AC5: A0 17    JZ    0x0ADD
    0AC7: 3D 03 00 CMP   [X+3],0x0
    0ACA: B0 06    JNZ   0x0AD1
    0ACC: 3D 04 01 CMP   [X+4],0x1
    0ACF: A0 43    JZ    0x0B13
    0AD1: 3D 03 00 CMP   [X+3],0x0
    0AD4: B0 06    JNZ   0x0ADB
    0AD6: 3D 04 02 CMP   [X+4],0x2
    0AD9: A0 72    JZ    0x0B4C
    0ADB: 80 A7    JMP   0x0B83
(0133) 		case 0:
(0134) 			if(port == 0) PRT0DR &= ~bitMask;
    0ADD: 3D FC 00 CMP   [X-4],0x0
    0AE0: B0 0E    JNZ   0x0AEF
    0AE2: 52 02    MOV   A,[X+2]
    0AE4: 73       CPL   A
    0AE5: 53 3E    MOV   [__r0],A
    0AE7: 5D 00    MOV   A,REG[0x0]
    0AE9: 22 3E    AND   A,[__r0]
    0AEB: 60 00    MOV   REG[0x0],A
    0AED: 80 95    JMP   0x0B83
(0135) 			else if(port == 1) PRT1DR &= ~bitMask;
    0AEF: 3D FC 01 CMP   [X-4],0x1
    0AF2: B0 0E    JNZ   0x0B01
    0AF4: 52 02    MOV   A,[X+2]
    0AF6: 73       CPL   A
    0AF7: 53 3E    MOV   [__r0],A
    0AF9: 5D 04    MOV   A,REG[0x4]
    0AFB: 22 3E    AND   A,[__r0]
    0AFD: 60 04    MOV   REG[0x4],A
    0AFF: 80 83    JMP   0x0B83
(0136) 			else if(port == 2) PRT2DR &= ~bitMask;
    0B01: 3D FC 02 CMP   [X-4],0x2
    0B04: B0 7E    JNZ   0x0B83
    0B06: 52 02    MOV   A,[X+2]
    0B08: 73       CPL   A
    0B09: 53 3E    MOV   [__r0],A
    0B0B: 5D 08    MOV   A,REG[0x8]
    0B0D: 22 3E    AND   A,[__r0]
    0B0F: 60 08    MOV   REG[0x8],A
(0137) 			break;
    0B11: 80 71    JMP   0x0B83
(0138) 			
(0139) 		case 1:
(0140) 			if(port == 0) PRT0DR |= bitMask;
    0B13: 3D FC 00 CMP   [X-4],0x0
    0B16: B0 0F    JNZ   0x0B26
    0B18: 5D 00    MOV   A,REG[0x0]
    0B1A: 53 3E    MOV   [__r0],A
    0B1C: 52 02    MOV   A,[X+2]
    0B1E: 2C 3E    OR    [__r0],A
    0B20: 51 3E    MOV   A,[__r0]
    0B22: 60 00    MOV   REG[0x0],A
    0B24: 80 5E    JMP   0x0B83
(0141) 			else if(port == 1) PRT1DR |= bitMask;
    0B26: 3D FC 01 CMP   [X-4],0x1
    0B29: B0 0F    JNZ   0x0B39
    0B2B: 5D 04    MOV   A,REG[0x4]
    0B2D: 53 3E    MOV   [__r0],A
    0B2F: 52 02    MOV   A,[X+2]
    0B31: 2C 3E    OR    [__r0],A
    0B33: 51 3E    MOV   A,[__r0]
    0B35: 60 04    MOV   REG[0x4],A
    0B37: 80 4B    JMP   0x0B83
(0142) 			else if(port == 2) PRT2DR |= bitMask;
    0B39: 3D FC 02 CMP   [X-4],0x2
    0B3C: B0 46    JNZ   0x0B83
    0B3E: 5D 08    MOV   A,REG[0x8]
    0B40: 53 3E    MOV   [__r0],A
    0B42: 52 02    MOV   A,[X+2]
    0B44: 2C 3E    OR    [__r0],A
    0B46: 51 3E    MOV   A,[__r0]
    0B48: 60 08    MOV   REG[0x8],A
(0143) 			break;   
    0B4A: 80 38    JMP   0x0B83
(0144) 			
(0145) 		case 2:
(0146) 			if(port == 0) PRT0DR ^= bitMask;
    0B4C: 3D FC 00 CMP   [X-4],0x0
    0B4F: B0 0F    JNZ   0x0B5F
    0B51: 5D 00    MOV   A,REG[0x0]
    0B53: 53 3E    MOV   [__r0],A
    0B55: 52 02    MOV   A,[X+2]
    0B57: 34 3E    XOR   [__r0],A
    0B59: 51 3E    MOV   A,[__r0]
    0B5B: 60 00    MOV   REG[0x0],A
    0B5D: 80 25    JMP   0x0B83
(0147) 			else if(port == 1) PRT1DR ^= bitMask;
    0B5F: 3D FC 01 CMP   [X-4],0x1
    0B62: B0 0F    JNZ   0x0B72
    0B64: 5D 04    MOV   A,REG[0x4]
    0B66: 53 3E    MOV   [__r0],A
    0B68: 52 02    MOV   A,[X+2]
    0B6A: 34 3E    XOR   [__r0],A
    0B6C: 51 3E    MOV   A,[__r0]
    0B6E: 60 04    MOV   REG[0x4],A
    0B70: 80 12    JMP   0x0B83
(0148) 			else if(port == 2) PRT2DR ^= bitMask;
    0B72: 3D FC 02 CMP   [X-4],0x2
    0B75: B0 0D    JNZ   0x0B83
    0B77: 5D 08    MOV   A,REG[0x8]
    0B79: 53 3E    MOV   [__r0],A
    0B7B: 52 02    MOV   A,[X+2]
    0B7D: 34 3E    XOR   [__r0],A
    0B7F: 51 3E    MOV   A,[__r0]
    0B81: 60 08    MOV   REG[0x8],A
(0149) 			break;
(0150) 			
(0151) 		default:
(0152) 			break;
    0B83: 38 FB    ADD   SP,0xFB
    0B85: 20       POP   X
    0B86: 7F       RET   
(0153) 	}
(0154) }
(0155) 
(0156) // Prints integers on the LCD
(0157) // lcdPosition values:
(0158) // 0 = top left
(0159) // 1 = top right
(0160) // 2 = bottom left
(0161) // 3 = bottom right
(0162) void lcdAssign(long lcdNumbers, unsigned int lcdPosition) {
_lcdAssign:
  lcdPosition          --> X-9
  lcdNumbers           --> X-7
    0B87: 10       PUSH  X
    0B88: 4F       MOV   X,SP
(0163) 	ltoa(lcdBuffer[lcdPosition], lcdNumbers, 10);
    0B89: 50 00    MOV   A,0x0
    0B8B: 08       PUSH  A
    0B8C: 50 0A    MOV   A,0xA
    0B8E: 08       PUSH  A
    0B8F: 52 F9    MOV   A,[X-7]
    0B91: 08       PUSH  A
    0B92: 52 FA    MOV   A,[X-6]
    0B94: 08       PUSH  A
    0B95: 52 FB    MOV   A,[X-5]
    0B97: 08       PUSH  A
    0B98: 52 FC    MOV   A,[X-4]
    0B9A: 08       PUSH  A
    0B9B: 52 F8    MOV   A,[X-8]
    0B9D: 53 3D    MOV   [__r1],A
    0B9F: 52 F7    MOV   A,[X-9]
    0BA1: 53 3E    MOV   [__r0],A
    0BA3: 65 3D    ASL   [__r1]
    0BA5: 6B 3E    RLC   [__r0]
    0BA7: 65 3D    ASL   [__r1]
    0BA9: 6B 3E    RLC   [__r0]
    0BAB: 65 3D    ASL   [__r1]
    0BAD: 6B 3E    RLC   [__r0]
    0BAF: 06 3D 00 ADD   [__r1],0x0
    0BB2: 0E 3E 00 ADC   [__r0],0x0
    0BB5: 51 3E    MOV   A,[__r0]
    0BB7: 08       PUSH  A
    0BB8: 51 3D    MOV   A,[__r1]
    0BBA: 08       PUSH  A
    0BBB: 7C 0E BE LCALL _ltoa
    0BBE: 38 F8    ADD   SP,0xF8
    0BC0: 20       POP   X
    0BC1: 7F       RET   
(0164) }
(0165) 
(0166) void lcdPrint(void) {
(0167) 	LCD_Control(0x01);
_lcdPrint:
    0BC2: 10       PUSH  X
    0BC3: 50 01    MOV   A,0x1
    0BC5: 7C 04 DB LCALL _LCD_Control
(0168) 	
(0169) 	LCD_Position(0, 0);
    0BC8: 50 00    MOV   A,0x0
    0BCA: 57 00    MOV   X,0x0
    0BCC: 7C 05 F2 LCALL _LCD_Position
(0170) 	LCD_PrString(lcdBuffer[0]);
    0BCF: 50 00    MOV   A,0x0
    0BD1: 08       PUSH  A
    0BD2: 50 00    MOV   A,0x0
    0BD4: 5C       MOV   X,A
    0BD5: 18       POP   A
    0BD6: 7C 04 BD LCALL _LCD_PrString
(0171) 	LCD_Position(0, 8);
    0BD9: 57 08    MOV   X,0x8
    0BDB: 50 00    MOV   A,0x0
    0BDD: 7C 05 F2 LCALL _LCD_Position
(0172) 	LCD_PrString(lcdBuffer[1]);
    0BE0: 50 00    MOV   A,0x0
    0BE2: 08       PUSH  A
    0BE3: 50 08    MOV   A,0x8
    0BE5: 5C       MOV   X,A
    0BE6: 18       POP   A
    0BE7: 7C 04 BD LCALL _LCD_PrString
(0173) 	LCD_Position(1, 0);
    0BEA: 57 00    MOV   X,0x0
    0BEC: 50 01    MOV   A,0x1
    0BEE: 7C 05 F2 LCALL _LCD_Position
(0174) 	LCD_PrString(lcdBuffer[2]);
    0BF1: 50 00    MOV   A,0x0
    0BF3: 08       PUSH  A
    0BF4: 50 10    MOV   A,0x10
    0BF6: 5C       MOV   X,A
    0BF7: 18       POP   A
    0BF8: 7C 04 BD LCALL _LCD_PrString
(0175) 	LCD_Position(1, 8);
    0BFB: 57 08    MOV   X,0x8
    0BFD: 50 01    MOV   A,0x1
    0BFF: 7C 05 F2 LCALL _LCD_Position
(0176) 	LCD_PrString(lcdBuffer[3]);
    0C02: 50 00    MOV   A,0x0
    0C04: 08       PUSH  A
    0C05: 50 18    MOV   A,0x18
    0C07: 5C       MOV   X,A
    0C08: 18       POP   A
    0C09: 7C 04 BD LCALL _LCD_PrString
    0C0C: 20       POP   X
    0C0D: 7F       RET   
FILE: C:\Projects\RawBot\RawBot\main.c
(0001) /**********
(0002) *  Notes  *
(0003) **********/
(0004) 
(0005) // Connections:
(0006) // Port 0 - Outputs
(0007) //	P00 - Hbridge IN1
(0008) //	P01 - Hbridge IN2
(0009) //	P02 - Hbridge IN3
(0010) //	P03 - Hbrdige IN4
(0011) //	P04 -
(0012) //	P05 - 
(0013) //	P06 - Ultrasound Trigger
(0014) //	P07 - Servo (ServoPWM connected here)
(0015) 
(0016) /*************
(0017) *  Includes  *
(0018) *************/
(0019) 
(0020) #include <m8c.h>
(0021) #include <stdlib.h>
(0022) #include <stdbool.h>
(0023) #include "PSoCAPI.h"
(0024) #include "LCD.h"
(0025) #include "Timer8Main.h"
(0026) #include "Timer8UsTrig.h"
(0027) #include "Timer16UsEcho.h"
(0028) #include "Functions.h"
(0029) 
(0030) /**************************
(0031) *  Variable declarations  *
(0032) **************************/
(0033) 
(0034) bool timer8MainTick = false;
(0035) unsigned int timer8MainCount = 0;
(0036) bool gpioTick = false;
(0037) unsigned long usRawTime = 0;
(0038) unsigned int usDistance = 0;
(0039) unsigned int lcdUpdate = 0;
(0040) int isrClear = 0;
(0041) 
(0042) /***********************
(0043) *  Interrupt handlers  *
(0044) ***********************/
(0045) 
(0046) #pragma interrupt_handler Timer8Main_ISR
(0047) void Timer8Main_ISR(void) {
_Timer8Main_ISR:
    0C0E: 08       PUSH  A
(0048) 	timer8MainTick = true;
    0C0F: 55 21 01 MOV   [timer8MainTick+1],0x1
    0C12: 55 20 00 MOV   [timer8MainTick],0x0
(0049) 	timer8MainCount++;
    0C15: 76 23    INC   [timer8MainCount+1]
    0C17: 0E 22 00 ADC   [timer8MainCount],0x0
    0C1A: 18       POP   A
    0C1B: 7E       RETI  
(0050) }
(0051) 
(0052) #pragma interrupt_handler Timer8UsTrig_ISR
(0053) void Timer8UsTrig_ISR(void) {
_Timer8UsTrig_ISR:
    0C1C: 08       PUSH  A
    0C1D: 51 3E    MOV   A,[__r0]
    0C1F: 08       PUSH  A
    0C20: 51 3D    MOV   A,[__r1]
    0C22: 08       PUSH  A
    0C23: 51 3C    MOV   A,[__r2]
    0C25: 08       PUSH  A
    0C26: 51 3B    MOV   A,[__r3]
    0C28: 08       PUSH  A
    0C29: 51 3A    MOV   A,[__r4]
    0C2B: 08       PUSH  A
    0C2C: 51 39    MOV   A,[__r5]
    0C2E: 08       PUSH  A
    0C2F: 51 38    MOV   A,[__r6]
    0C31: 08       PUSH  A
    0C32: 51 37    MOV   A,[__r7]
    0C34: 08       PUSH  A
    0C35: 51 36    MOV   A,[__r8]
    0C37: 08       PUSH  A
    0C38: 51 35    MOV   A,[__r9]
    0C3A: 08       PUSH  A
    0C3B: 51 34    MOV   A,[__r10]
    0C3D: 08       PUSH  A
    0C3E: 51 33    MOV   A,[__r11]
    0C40: 08       PUSH  A
    0C41: 51 32    MOV   A,[__rX]
    0C43: 08       PUSH  A
    0C44: 51 31    MOV   A,[__rY]
    0C46: 08       PUSH  A
    0C47: 51 30    MOV   A,[__rZ]
    0C49: 08       PUSH  A
(0054) 	digitalWrite(0, 6, 0); // Stop the trigger signal
    0C4A: 50 00    MOV   A,0x0
    0C4C: 08       PUSH  A
    0C4D: 50 06    MOV   A,0x6
    0C4F: 08       PUSH  A
    0C50: 50 00    MOV   A,0x0
    0C52: 08       PUSH  A
    0C53: 7C 0A 8A LCALL _digitalWrite
    0C56: 38 FD    ADD   SP,0xFD
(0055) 	Timer8UsTrig_Stop();
    0C58: 10       PUSH  X
    0C59: 7C 03 4E LCALL _Timer8UsTrig_Stop
    0C5C: 20       POP   X
    0C5D: 18       POP   A
    0C5E: 53 30    MOV   [__rZ],A
    0C60: 18       POP   A
    0C61: 53 31    MOV   [__rY],A
    0C63: 18       POP   A
    0C64: 53 32    MOV   [__rX],A
    0C66: 18       POP   A
    0C67: 53 33    MOV   [__r11],A
    0C69: 18       POP   A
    0C6A: 53 34    MOV   [__r10],A
    0C6C: 18       POP   A
    0C6D: 53 35    MOV   [__r9],A
    0C6F: 18       POP   A
    0C70: 53 36    MOV   [__r8],A
    0C72: 18       POP   A
    0C73: 53 37    MOV   [__r7],A
    0C75: 18       POP   A
    0C76: 53 38    MOV   [__r6],A
    0C78: 18       POP   A
    0C79: 53 39    MOV   [__r5],A
    0C7B: 18       POP   A
    0C7C: 53 3A    MOV   [__r4],A
    0C7E: 18       POP   A
    0C7F: 53 3B    MOV   [__r3],A
    0C81: 18       POP   A
    0C82: 53 3C    MOV   [__r2],A
    0C84: 18       POP   A
    0C85: 53 3D    MOV   [__r1],A
    0C87: 18       POP   A
    0C88: 53 3E    MOV   [__r0],A
    0C8A: 18       POP   A
    0C8B: 7E       RETI  
(0056) }
(0057) 
(0058) // usDistance > 400 cm --> no objects in sight
(0059) #pragma interrupt_handler Timer16UsEcho_ISR
(0060) void Timer16UsEcho_ISR(void) { }
_Timer16UsEcho_ISR:
    0C8C: 08       PUSH  A
    0C8D: 18       POP   A
    0C8E: 7E       RETI  
(0061) 
(0062) #pragma interrupt_handler GPIO_ISR
(0063) void GPIO_ISR(void) {	
_GPIO_ISR:
    0C8F: 08       PUSH  A
    0C90: 51 3E    MOV   A,[__r0]
    0C92: 08       PUSH  A
    0C93: 51 3D    MOV   A,[__r1]
    0C95: 08       PUSH  A
    0C96: 51 3C    MOV   A,[__r2]
    0C98: 08       PUSH  A
    0C99: 51 3B    MOV   A,[__r3]
    0C9B: 08       PUSH  A
    0C9C: 51 3A    MOV   A,[__r4]
    0C9E: 08       PUSH  A
    0C9F: 51 39    MOV   A,[__r5]
    0CA1: 08       PUSH  A
    0CA2: 51 38    MOV   A,[__r6]
    0CA4: 08       PUSH  A
    0CA5: 51 37    MOV   A,[__r7]
    0CA7: 08       PUSH  A
    0CA8: 51 36    MOV   A,[__r8]
    0CAA: 08       PUSH  A
    0CAB: 51 35    MOV   A,[__r9]
    0CAD: 08       PUSH  A
    0CAE: 51 34    MOV   A,[__r10]
    0CB0: 08       PUSH  A
    0CB1: 51 33    MOV   A,[__r11]
    0CB3: 08       PUSH  A
    0CB4: 51 32    MOV   A,[__rX]
    0CB6: 08       PUSH  A
    0CB7: 51 31    MOV   A,[__rY]
    0CB9: 08       PUSH  A
    0CBA: 51 30    MOV   A,[__rZ]
    0CBC: 08       PUSH  A
(0064) 	if (US_ECHO_Data_ADDR & US_ECHO_MASK) { // Rising edge
    0CBD: 5D 04    MOV   A,REG[0x4]
    0CBF: 53 3E    MOV   [__r0],A
    0CC1: 47 3E 80 TST   [__r0],0x80
    0CC4: A0 08    JZ    0x0CCD
(0065) 		Timer16UsEcho_Start(); // Used to measure time until echo signal is returned
    0CC6: 10       PUSH  X
    0CC7: 7C 03 D4 LCALL _Timer16UsEcho_Start
    0CCA: 20       POP   X
(0066) 	} else { // Falling edge
    0CCB: 80 39    JMP   0x0D05
(0067) 		usDistance = usCalculateDistance(Timer16UsEcho_wReadTimer());
    0CCD: 10       PUSH  X
    0CCE: 7C 04 20 LCALL _Timer16UsEcho_wReadTimer|wTimer16UsEcho_CaptureCounter|_wTimer16UsEcho_ReadTimer|wTimer16UsEcho_ReadTimer|_wTimer16UsEcho_CaptureCounter
    0CD1: 5A 3E    MOV   [__r0],X
    0CD3: 20       POP   X
    0CD4: 53 3B    MOV   [__r3],A
    0CD6: 50 00    MOV   A,0x0
    0CD8: 08       PUSH  A
    0CD9: 08       PUSH  A
    0CDA: 51 3E    MOV   A,[__r0]
    0CDC: 08       PUSH  A
    0CDD: 51 3B    MOV   A,[__r3]
    0CDF: 08       PUSH  A
    0CE0: 7C 07 AF LCALL _usCalculateDistance
    0CE3: 5F 2B 3D MOV   [usDistance+1],[__r1]
    0CE6: 5F 2A 3E MOV   [usDistance],[__r0]
(0068) 		lcdAssign(usDistance, 0);
    0CE9: 50 00    MOV   A,0x0
    0CEB: 08       PUSH  A
    0CEC: 08       PUSH  A
    0CED: 5F 3B 2B MOV   [__r3],[usDistance+1]
    0CF0: 5F 3C 2A MOV   [__r2],[usDistance]
    0CF3: 08       PUSH  A
    0CF4: 08       PUSH  A
    0CF5: 51 3C    MOV   A,[__r2]
    0CF7: 08       PUSH  A
    0CF8: 51 3B    MOV   A,[__r3]
    0CFA: 08       PUSH  A
    0CFB: 7C 0B 87 LCALL _lcdAssign
    0CFE: 38 F6    ADD   SP,0xF6
(0069) 		
(0070) 		Timer16UsEcho_Stop();
    0D00: 10       PUSH  X
    0D01: 7C 03 D8 LCALL _Timer16UsEcho_Stop
    0D04: 20       POP   X
(0071) 	}
(0072) 	
(0073) 	gpioTick = true;
    0D05: 55 25 01 MOV   [gpioTick+1],0x1
    0D08: 55 24 00 MOV   [gpioTick],0x0
(0074) 	isrClear = PRT1DR;
    0D0B: 5D 04    MOV   A,REG[0x4]
    0D0D: 53 2F    MOV   [isrClear+1],A
    0D0F: 55 2E 00 MOV   [isrClear],0x0
    0D12: 18       POP   A
    0D13: 53 30    MOV   [__rZ],A
    0D15: 18       POP   A
    0D16: 53 31    MOV   [__rY],A
    0D18: 18       POP   A
    0D19: 53 32    MOV   [__rX],A
    0D1B: 18       POP   A
    0D1C: 53 33    MOV   [__r11],A
    0D1E: 18       POP   A
    0D1F: 53 34    MOV   [__r10],A
    0D21: 18       POP   A
    0D22: 53 35    MOV   [__r9],A
    0D24: 18       POP   A
    0D25: 53 36    MOV   [__r8],A
    0D27: 18       POP   A
    0D28: 53 37    MOV   [__r7],A
    0D2A: 18       POP   A
    0D2B: 53 38    MOV   [__r6],A
    0D2D: 18       POP   A
    0D2E: 53 39    MOV   [__r5],A
    0D30: 18       POP   A
    0D31: 53 3A    MOV   [__r4],A
    0D33: 18       POP   A
    0D34: 53 3B    MOV   [__r3],A
    0D36: 18       POP   A
    0D37: 53 3C    MOV   [__r2],A
    0D39: 18       POP   A
    0D3A: 53 3D    MOV   [__r1],A
    0D3C: 18       POP   A
    0D3D: 53 3E    MOV   [__r0],A
    0D3F: 18       POP   A
    0D40: 7E       RETI  
(0075) }
(0076) 
(0077) /******************
(0078) *  Main function  *
(0079) ******************/
(0080) 
(0081) void main(void) {
(0082) 	M8C_EnableGInt;
_main:
    0D41: 71 01    OR    F,0x1
(0083) 	M8C_EnableIntMask(INT_MSK0, INT_MSK0_GPIO);
    0D43: 43 E0 20 OR    REG[0xE0],0x20
(0084) 	LCD_Init();
    0D46: 10       PUSH  X
    0D47: 7C 05 82 LCALL _LCD_Start|_LCD_Init|LCD_Init
(0085) 	LCD_Start();
    0D4A: 7C 05 82 LCALL _LCD_Start|_LCD_Init|LCD_Init
(0086) 	Timer8UsTrig_EnableInt();
    0D4D: 7C 03 42 LCALL _Timer8UsTrig_EnableInt
(0087) 	Timer8UsTrig_Start();
    0D50: 7C 03 4A LCALL _Timer8UsTrig_Start
(0088) 	Timer8Main_EnableInt();
    0D53: 7C 03 87 LCALL _Timer8Main_EnableInt
(0089) 	Timer8Main_Start();
    0D56: 7C 03 8F LCALL _Timer8Main_Start
(0090) 	Timer16UsEcho_EnableInt();
    0D59: 7C 03 CC LCALL _Timer16UsEcho_EnableInt
    0D5C: 20       POP   X
    0D5D: 80 8B    JMP   0x0DE9
(0091) 
(0092) 	while (1) {		
(0093) 		if (gpioTick) {
    0D5F: 3C 24 00 CMP   [gpioTick],0x0
    0D62: B0 06    JNZ   0x0D69
    0D64: 3C 25 00 CMP   [gpioTick+1],0x0
    0D67: A0 07    JZ    0x0D6F
(0094) 			gpioTick = false;
    0D69: 55 25 00 MOV   [gpioTick+1],0x0
    0D6C: 55 24 00 MOV   [gpioTick],0x0
(0095) 		}
(0096) 		
(0097) 		if (timer8MainTick) {
    0D6F: 3C 20 00 CMP   [timer8MainTick],0x0
    0D72: B0 06    JNZ   0x0D79
    0D74: 3C 21 00 CMP   [timer8MainTick+1],0x0
    0D77: A0 71    JZ    0x0DE9
(0098) 			timer8MainTick = false;
    0D79: 55 21 00 MOV   [timer8MainTick+1],0x0
    0D7C: 55 20 00 MOV   [timer8MainTick],0x0
(0099) 			lcdUpdate++;
    0D7F: 76 2D    INC   [lcdUpdate+1]
    0D81: 0E 2C 00 ADC   [lcdUpdate],0x0
(0100) 			
(0101) 			if (lcdUpdate >= 499) {
    0D84: 51 2D    MOV   A,[lcdUpdate+1]
    0D86: 11 F3    SUB   A,0xF3
    0D88: 51 2C    MOV   A,[lcdUpdate]
    0D8A: 19 01    SBB   A,0x1
    0D8C: C0 49    JC    0x0DD6
(0102) 				lcdUpdate = 0;
    0D8E: 55 2D 00 MOV   [lcdUpdate+1],0x0
    0D91: 55 2C 00 MOV   [lcdUpdate],0x0
(0103) 				
(0104) 				lcdAssign(usCalculateDistance(34422), 3);
    0D94: 50 00    MOV   A,0x0
    0D96: 08       PUSH  A
    0D97: 08       PUSH  A
    0D98: 50 86    MOV   A,0x86
    0D9A: 08       PUSH  A
    0D9B: 50 76    MOV   A,0x76
    0D9D: 08       PUSH  A
    0D9E: 7C 07 AF LCALL _usCalculateDistance
    0DA1: 38 FC    ADD   SP,0xFC
    0DA3: 50 00    MOV   A,0x0
    0DA5: 08       PUSH  A
    0DA6: 50 03    MOV   A,0x3
    0DA8: 08       PUSH  A
    0DA9: 5F 3B 3D MOV   [__r3],[__r1]
    0DAC: 5F 3C 3E MOV   [__r2],[__r0]
    0DAF: 47 3C 80 TST   [__r2],0x80
    0DB2: A0 09    JZ    0x0DBC
    0DB4: 55 3D FF MOV   [__r1],0xFF
    0DB7: 55 3E FF MOV   [__r0],0xFF
    0DBA: 80 07    JMP   0x0DC2
    0DBC: 55 3D 00 MOV   [__r1],0x0
    0DBF: 55 3E 00 MOV   [__r0],0x0
    0DC2: 51 3E    MOV   A,[__r0]
    0DC4: 08       PUSH  A
    0DC5: 51 3D    MOV   A,[__r1]
    0DC7: 08       PUSH  A
    0DC8: 51 3C    MOV   A,[__r2]
    0DCA: 08       PUSH  A
    0DCB: 51 3B    MOV   A,[__r3]
    0DCD: 08       PUSH  A
    0DCE: 7C 0B 87 LCALL _lcdAssign
    0DD1: 38 FA    ADD   SP,0xFA
(0105) 				
(0106) 				lcdPrint();
    0DD3: 7C 0B C2 LCALL _lcdPrint
(0107) 			}
(0108) 			
(0109) 			// 1 s
(0110) 			if (timer8MainCount >= 99) {
    0DD6: 51 23    MOV   A,[timer8MainCount+1]
    0DD8: 11 63    SUB   A,0x63
    0DDA: 51 22    MOV   A,[timer8MainCount]
    0DDC: 19 00    SBB   A,0x0
    0DDE: C0 0A    JC    0x0DE9
(0111) 				timer8MainCount = 0;
    0DE0: 55 23 00 MOV   [timer8MainCount+1],0x0
    0DE3: 55 22 00 MOV   [timer8MainCount],0x0
(0112) 				usTrigSend();
    0DE6: 7C 07 9C LCALL _usTrigSend
(0113) 			}
(0114) 		}
(0115) 	}
    0DE9: 8F 75    JMP   0x0D5F
(0116) }FILE: lib\psocgpioint.asm               (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;;*****************************************************************************
                                        (0004) ;;*****************************************************************************
                                        (0005) ;;  FILENAME: PSoCGPIOINT.asm
                                        (0006) ;;   Version: 2.0.0.20, Updated on 2003/07/17 at 12:10:35
                                        (0007) ;;  @PSOC_VERSION
                                        (0008) ;;
                                        (0009) ;;  DESCRIPTION: PSoC GPIO Interrupt Service Routine
                                        (0010) ;;-----------------------------------------------------------------------------
                                        (0011) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0012) ;;*****************************************************************************
                                        (0013) ;;*****************************************************************************
                                        (0014) 
                                        (0015) include "m8c.inc"
                                        (0016) include "PSoCGPIOINT.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export   PSoC_GPIO_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) ;-----------------------------------------------
                                        (0025) ;  Constant Definitions
                                        (0026) ;-----------------------------------------------
                                        (0027) 
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ; Variable Allocation
                                        (0031) ;-----------------------------------------------
                                        (0032) 	
                                        (0033) 
                                        (0034) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0035) ;---------------------------------------------------
                                        (0036) ; Insert your custom declarations below this banner
                                        (0037) ;---------------------------------------------------
                                        (0038) 
                                        (0039) ;---------------------------------------------------
                                        (0040) ; Insert your custom declarations above this banner
                                        (0041) ;---------------------------------------------------
                                        (0042) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0043) 
                                        (0044) 
                                        (0045) ;-----------------------------------------------------------------------------
                                        (0046) ;  FUNCTION NAME: PSoC_GPIO_ISR
                                        (0047) ;
                                        (0048) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0049) ;
                                        (0050) ;-----------------------------------------------------------------------------
                                        (0051) ;
                                        (0052) PSoC_GPIO_ISR:
                                        (0053) 
                                        (0054) 
                                        (0055)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0056)    ;---------------------------------------------------
                                        (0057)    ; Insert your custom code below this banner
                                        (0058)    ;---------------------------------------------------
0DED: 7D 0C 8F LJMP  _GPIO_ISR          (0059) 	ljmp _GPIO_ISR
                                        (0060)    ;---------------------------------------------------
                                        (0061)    ; Insert your custom code above this banner
                                        (0062)    ;---------------------------------------------------
                                        (0063)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0064) 
0DF0: 7E       RETI                     (0065)    reti
                                        (0066) 
                                        (0067) 
                                        (0068) ; end of file PSoCGPIOINT.asm
_ltoa:
    0EBE: 10       PUSH  X
    0EBF: 4F       MOV   X,SP
    0EC0: 38 0B    ADD   SP,0xB
    0EC2: 52 F7    MOV   A,[X-9]
    0EC4: 54 02    MOV   [X+2],A
    0EC6: 52 F8    MOV   A,[X-8]
    0EC8: 54 03    MOV   [X+3],A
    0ECA: 52 F9    MOV   A,[X-7]
    0ECC: 54 04    MOV   [X+4],A
    0ECE: 52 FA    MOV   A,[X-6]
    0ED0: 54 05    MOV   [X+5],A
    0ED2: 3D F7 00 CMP   [X-9],0x0
    0ED5: B0 2C    JNZ   0x0F02
    0ED7: 3D F8 00 CMP   [X-8],0x0
    0EDA: B0 27    JNZ   0x0F02
    0EDC: 3D F9 00 CMP   [X-7],0x0
    0EDF: B0 22    JNZ   0x0F02
    0EE1: 3D FA 00 CMP   [X-6],0x0
    0EE4: B0 1D    JNZ   0x0F02
    0EE6: 52 FC    MOV   A,[X-4]
    0EE8: 53 3D    MOV   [__r1],A
    0EEA: 50 30    MOV   A,0x30
    0EEC: 3F 3D    MVI   [__r1],A
    0EEE: 52 FC    MOV   A,[X-4]
    0EF0: 01 01    ADD   A,0x1
    0EF2: 53 3D    MOV   [__r1],A
    0EF4: 50 00    MOV   A,0x0
    0EF6: 3F 3D    MVI   [__r1],A
    0EF8: 52 FC    MOV   A,[X-4]
    0EFA: 53 3D    MOV   [__r1],A
    0EFC: 52 FB    MOV   A,[X-5]
    0EFE: 53 3E    MOV   [__r0],A
    0F00: 81 C2    JMP   0x10C3
    0F02: 52 FA    MOV   A,[X-6]
    0F04: 11 00    SUB   A,0x0
    0F06: 52 F9    MOV   A,[X-7]
    0F08: 19 00    SBB   A,0x0
    0F0A: 52 F8    MOV   A,[X-8]
    0F0C: 19 00    SBB   A,0x0
    0F0E: 52 F7    MOV   A,[X-9]
    0F10: 31 80    XOR   A,0x80
    0F12: 19 80    SBB   A,0x80
    0F14: D0 38    JNC   0x0F4D
    0F16: 3D F5 00 CMP   [X-11],0x0
    0F19: B0 33    JNZ   0x0F4D
    0F1B: 3D F6 0A CMP   [X-10],0xA
    0F1E: B0 2E    JNZ   0x0F4D
    0F20: 56 08 01 MOV   [X+8],0x1
    0F23: 52 02    MOV   A,[X+2]
    0F25: 73       CPL   A
    0F26: 53 3E    MOV   [__r0],A
    0F28: 52 03    MOV   A,[X+3]
    0F2A: 73       CPL   A
    0F2B: 53 3D    MOV   [__r1],A
    0F2D: 52 04    MOV   A,[X+4]
    0F2F: 73       CPL   A
    0F30: 53 3C    MOV   [__r2],A
    0F32: 52 05    MOV   A,[X+5]
    0F34: 73       CPL   A
    0F35: 01 01    ADD   A,0x1
    0F37: 54 05    MOV   [X+5],A
    0F39: 51 3C    MOV   A,[__r2]
    0F3B: 09 00    ADC   A,0x0
    0F3D: 54 04    MOV   [X+4],A
    0F3F: 51 3D    MOV   A,[__r1]
    0F41: 09 00    ADC   A,0x0
    0F43: 54 03    MOV   [X+3],A
    0F45: 51 3E    MOV   A,[__r0]
    0F47: 09 00    ADC   A,0x0
    0F49: 54 02    MOV   [X+2],A
    0F4B: 80 04    JMP   0x0F50
    0F4D: 56 08 00 MOV   [X+8],0x0
    0F50: 52 FC    MOV   A,[X-4]
    0F52: 54 01    MOV   [X+1],A
    0F54: 52 F6    MOV   A,[X-10]
    0F56: 53 3B    MOV   [__r3],A
    0F58: 52 F5    MOV   A,[X-11]
    0F5A: 53 3C    MOV   [__r2],A
    0F5C: 47 3C 80 TST   [__r2],0x80
    0F5F: A0 09    JZ    0x0F69
    0F61: 55 3D FF MOV   [__r1],0xFF
    0F64: 55 3E FF MOV   [__r0],0xFF
    0F67: 80 07    JMP   0x0F6F
    0F69: 55 3D 00 MOV   [__r1],0x0
    0F6C: 55 3E 00 MOV   [__r0],0x0
    0F6F: 51 3E    MOV   A,[__r0]
    0F71: 08       PUSH  A
    0F72: 51 3D    MOV   A,[__r1]
    0F74: 08       PUSH  A
    0F75: 51 3C    MOV   A,[__r2]
    0F77: 08       PUSH  A
    0F78: 51 3B    MOV   A,[__r3]
    0F7A: 08       PUSH  A
    0F7B: 52 02    MOV   A,[X+2]
    0F7D: 08       PUSH  A
    0F7E: 52 03    MOV   A,[X+3]
    0F80: 08       PUSH  A
    0F81: 52 04    MOV   A,[X+4]
    0F83: 08       PUSH  A
    0F84: 52 05    MOV   A,[X+5]
    0F86: 08       PUSH  A
    0F87: 7C 0D F8 LCALL 0x0DF8
    0F8A: 38 FC    ADD   SP,0xFC
    0F8C: 18       POP   A
    0F8D: 53 3B    MOV   [__r3],A
    0F8F: 18       POP   A
    0F90: 53 3C    MOV   [__r2],A
    0F92: 18       POP   A
    0F93: 18       POP   A
    0F94: 51 3B    MOV   A,[__r3]
    0F96: 54 0A    MOV   [X+10],A
    0F98: 51 3C    MOV   A,[__r2]
    0F9A: 54 09    MOV   [X+9],A
    0F9C: 50 09    MOV   A,0x9
    0F9E: 13 0A    SUB   A,[X+10]
    0FA0: 52 09    MOV   A,[X+9]
    0FA2: 31 80    XOR   A,0x80
    0FA4: 53 32    MOV   [__rX],A
    0FA6: 50 80    MOV   A,0x80
    0FA8: 1A 32    SBB   A,[__rX]
    0FAA: C0 1D    JC    0x0FC8
    0FAC: 52 01    MOV   A,[X+1]
    0FAE: 53 3D    MOV   [__r1],A
    0FB0: 52 00    MOV   A,[X+0]
    0FB2: 53 3E    MOV   [__r0],A
    0FB4: 51 3D    MOV   A,[__r1]
    0FB6: 01 01    ADD   A,0x1
    0FB8: 54 01    MOV   [X+1],A
    0FBA: 51 3E    MOV   A,[__r0]
    0FBC: 09 00    ADC   A,0x0
    0FBE: 54 00    MOV   [X+0],A
    0FC0: 52 0A    MOV   A,[X+10]
    0FC2: 01 30    ADD   A,0x30
    0FC4: 3F 3D    MVI   [__r1],A
    0FC6: 80 1B    JMP   0x0FE2
    0FC8: 52 01    MOV   A,[X+1]
    0FCA: 53 3D    MOV   [__r1],A
    0FCC: 52 00    MOV   A,[X+0]
    0FCE: 53 3E    MOV   [__r0],A
    0FD0: 51 3D    MOV   A,[__r1]
    0FD2: 01 01    ADD   A,0x1
    0FD4: 54 01    MOV   [X+1],A
    0FD6: 51 3E    MOV   A,[__r0]
    0FD8: 09 00    ADC   A,0x0
    0FDA: 54 00    MOV   [X+0],A
    0FDC: 52 0A    MOV   A,[X+10]
    0FDE: 01 57    ADD   A,0x57
    0FE0: 3F 3D    MVI   [__r1],A
    0FE2: 52 F6    MOV   A,[X-10]
    0FE4: 53 3B    MOV   [__r3],A
    0FE6: 52 F5    MOV   A,[X-11]
    0FE8: 53 3C    MOV   [__r2],A
    0FEA: 47 3C 80 TST   [__r2],0x80
    0FED: A0 09    JZ    0x0FF7
    0FEF: 55 3D FF MOV   [__r1],0xFF
    0FF2: 55 3E FF MOV   [__r0],0xFF
    0FF5: 80 07    JMP   0x0FFD
    0FF7: 55 3D 00 MOV   [__r1],0x0
    0FFA: 55 3E 00 MOV   [__r0],0x0
    0FFD: 51 3E    MOV   A,[__r0]
    0FFF: 08       PUSH  A
    1000: 51 3D    MOV   A,[__r1]
    1002: 08       PUSH  A
    1003: 51 3C    MOV   A,[__r2]
    1005: 08       PUSH  A
    1006: 51 3B    MOV   A,[__r3]
    1008: 08       PUSH  A
    1009: 52 02    MOV   A,[X+2]
    100B: 08       PUSH  A
    100C: 52 03    MOV   A,[X+3]
    100E: 08       PUSH  A
    100F: 52 04    MOV   A,[X+4]
    1011: 08       PUSH  A
    1012: 52 05    MOV   A,[X+5]
    1014: 08       PUSH  A
    1015: 7C 0D F8 LCALL 0x0DF8
    1018: 18       POP   A
    1019: 54 05    MOV   [X+5],A
    101B: 18       POP   A
    101C: 54 04    MOV   [X+4],A
    101E: 18       POP   A
    101F: 54 03    MOV   [X+3],A
    1021: 18       POP   A
    1022: 54 02    MOV   [X+2],A
    1024: 38 FC    ADD   SP,0xFC
    1026: 3D 02 00 CMP   [X+2],0x0
    1029: BF 2A    JNZ   0x0F54
    102B: 3D 03 00 CMP   [X+3],0x0
    102E: BF 25    JNZ   0x0F54
    1030: 3D 04 00 CMP   [X+4],0x0
    1033: BF 20    JNZ   0x0F54
    1035: 3D 05 00 CMP   [X+5],0x0
    1038: BF 1B    JNZ   0x0F54
    103A: 3D 08 00 CMP   [X+8],0x0
    103D: A0 19    JZ    0x1057
    103F: 52 01    MOV   A,[X+1]
    1041: 53 3D    MOV   [__r1],A
    1043: 52 00    MOV   A,[X+0]
    1045: 53 3E    MOV   [__r0],A
    1047: 51 3D    MOV   A,[__r1]
    1049: 01 01    ADD   A,0x1
    104B: 54 01    MOV   [X+1],A
    104D: 51 3E    MOV   A,[__r0]
    104F: 09 00    ADC   A,0x0
    1051: 54 00    MOV   [X+0],A
    1053: 50 2D    MOV   A,0x2D
    1055: 3F 3D    MVI   [__r1],A
    1057: 52 01    MOV   A,[X+1]
    1059: 53 3D    MOV   [__r1],A
    105B: 52 00    MOV   A,[X+0]
    105D: 53 3E    MOV   [__r0],A
    105F: 51 3D    MOV   A,[__r1]
    1061: 01 FF    ADD   A,0xFF
    1063: 54 01    MOV   [X+1],A
    1065: 51 3E    MOV   A,[__r0]
    1067: 09 FF    ADC   A,0xFF
    1069: 54 00    MOV   [X+0],A
    106B: 50 00    MOV   A,0x0
    106D: 3F 3D    MVI   [__r1],A
    106F: 52 FC    MOV   A,[X-4]
    1071: 54 07    MOV   [X+7],A
    1073: 80 3D    JMP   0x10B1
    1075: 52 07    MOV   A,[X+7]
    1077: 53 3D    MOV   [__r1],A
    1079: 3E 3D    MVI   A,[__r1]
    107B: 54 08    MOV   [X+8],A
    107D: 52 07    MOV   A,[X+7]
    107F: 53 3D    MOV   [__r1],A
    1081: 52 06    MOV   A,[X+6]
    1083: 53 3E    MOV   [__r0],A
    1085: 51 3D    MOV   A,[__r1]
    1087: 01 01    ADD   A,0x1
    1089: 54 07    MOV   [X+7],A
    108B: 51 3E    MOV   A,[__r0]
    108D: 09 00    ADC   A,0x0
    108F: 54 06    MOV   [X+6],A
    1091: 52 01    MOV   A,[X+1]
    1093: 53 3B    MOV   [__r3],A
    1095: 3E 3B    MVI   A,[__r3]
    1097: 3F 3D    MVI   [__r1],A
    1099: 52 01    MOV   A,[X+1]
    109B: 53 3D    MOV   [__r1],A
    109D: 52 00    MOV   A,[X+0]
    109F: 53 3E    MOV   [__r0],A
    10A1: 51 3D    MOV   A,[__r1]
    10A3: 01 FF    ADD   A,0xFF
    10A5: 54 01    MOV   [X+1],A
    10A7: 51 3E    MOV   A,[__r0]
    10A9: 09 FF    ADC   A,0xFF
    10AB: 54 00    MOV   [X+0],A
    10AD: 52 08    MOV   A,[X+8]
    10AF: 3F 3D    MVI   [__r1],A
    10B1: 52 01    MOV   A,[X+1]
    10B3: 53 3E    MOV   [__r0],A
    10B5: 52 07    MOV   A,[X+7]
    10B7: 3A 3E    CMP   A,[__r0]
    10B9: CF BB    JC    0x1075
    10BB: 52 FC    MOV   A,[X-4]
    10BD: 53 3D    MOV   [__r1],A
    10BF: 52 FB    MOV   A,[X-5]
    10C1: 53 3E    MOV   [__r0],A
    10C3: 38 F5    ADD   SP,0xF5
    10C5: 20       POP   X
    10C6: 7F       RET   
