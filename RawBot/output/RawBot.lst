FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C27xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
001C: 7D 0D 18 LJMP  PSoC_GPIO_ISR      (0145)     ljmp	PSoC_GPIO_ISR
001F: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 06 BA LJMP  __UserModules_end|_Timer8Main_ISR|__text_start|_Timer8Main_ISR(0149)     ljmp	_Timer8Main_ISR
0023: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 06 C8 LJMP  _Timer8UsTrig_ISR  (0153)     ljmp	_Timer8UsTrig_ISR
0027: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0157)     // call	void_handler
0028: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 07 37 LJMP  _Timer16UsEcho_ISR (0161)     ljmp	_Timer16UsEcho_ISR
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0181)     // call	void_handler
0060: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0185)     // call	void_handler
0064: 7E       RETI                     (0186)     reti
0068: 71 10    OR    F,0x10             
                                        (0187)     ;---------------------------------------------------
                                        (0188)     ; Insert your custom code above this banner
                                        (0189)     ;---------------------------------------------------
                                        (0190)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0191) 
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  Start of Execution.
                                        (0194) ;-----------------------------------------------------------------------------
                                        (0195) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0196) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0197) ;
                                        (0198) 
                                        (0199) IF	(TOOLCHAIN & HITECH)
                                        (0200)  	AREA PD_startup(CODE, REL, CON)
                                        (0201) ELSE
                                        (0202)     org 68h
                                        (0203) ENDIF
                                        (0204) __Start:
                                        (0205) 
                                        (0206)     ; initialize SMP values for voltage stabilization, if required,
                                        (0207)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0208)     ; least for now. 
                                        (0209)     ;
                                        (0210)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[0xE3],0x87     (0211)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0212)     M8C_SetBank0
                                        (0213) 
                                        (0214) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0215) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0216)     M8C_EnableWatchDog
                                        (0217) ENDIF
                                        (0218) 
                                        (0219) IF ( SELECT_32K )
                                        (0220)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0221) ELSE
0072: 41 FE FB AND   REG[0xFE],0xFB     (0222)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0223) ENDIF
                                        (0224) 
                                        (0225) IF	(TOOLCHAIN & HITECH) 
                                        (0226)     ;---------------------------
                                        (0227)     ; Set up the Temporary stack
                                        (0228)     ;---------------------------
                                        (0229)     ; A temporary stack is set up for the SSC instructions.
                                        (0230)     ; The real stack start will be assigned later.
                                        (0231)     ;
                                        (0232) 	global		__Lstackps
                                        (0233) 	mov     a,low __Lstackps
                                        (0234) 	swap    a,sp
                                        (0235) ELSE
                                        (0236)     ;------------------
                                        (0237)     ; Set up the stack
                                        (0238)     ;------------------
0075: 50 36    MOV   A,0x36             (0239)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0240)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0241) ENDIF
                                        (0242) 
                                        (0243)     ;-----------------------------------------------
                                        (0244)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0245)     ;-----------------------------------------------
                                        (0246) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0247) IF ( SUPPLY_VOLTAGE )         ; 1 means 5.0V
                                        (0248)  IF ( AGND_BYPASS )
                                        (0249)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0250)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0251)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0252)     ; value using the proper trim values.
                                        (0253)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0254)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0255)  ENDIF
                                        (0256) ELSE    ; 3.3 V Operation, not 5.0V
                                        (0257)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0258) ENDIF ;(SUPPLY_VOLTAGE)
                                        (0259) 
007B: 55 F8 00 MOV   [0xF8],0x0         (0260)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007E: 55 F9 00 MOV   [0xF9],0x0         (0261)     mov  [bSSC_KEYSP], 0
0081: 71 10    OR    F,0x10             
                                        (0262) 
                                        (0263)     ;---------------------------------------
                                        (0264)     ; Initialize Crystal Oscillator and PLL
                                        (0265)     ;---------------------------------------
                                        (0266) 
                                        (0267) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0268)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0269)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0270)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0271)     ; the ECO to stabilize.
                                        (0272)     ;
                                        (0273)     M8C_SetBank1
                                        (0274)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0275)     M8C_SetBank0
                                        (0276)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0277)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0278)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0279) .WaitFor1s:
                                        (0280)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0281)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0282)                                           ;   since interrupts are not globally enabled
                                        (0283) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0284)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0285)     M8C_SetBank1
0083: 62 E0 02 MOV   REG[0xE0],0x2      (0286)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0086: 70 EF    AND   F,0xEF             
0088: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0287)     M8C_SetBank0
                                        (0288)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0289) 
                                        (0290) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0291) 
                                        (0292) IF ( PLL_MODE )
                                        (0293)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0294)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0295)     ;
                                        (0296)     M8C_SetBank1
                                        (0297)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0298)     M8C_SetBank0
                                        (0299)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0300)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0301) 
                                        (0302) .WaitFor16ms:
                                        (0303)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0304)     jz   .WaitFor16ms
                                        (0305)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0306)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0307)     M8C_SetBank0
                                        (0308) 
                                        (0309) IF      ( WAIT_FOR_32K )
                                        (0310) ELSE ; !( WAIT_FOR_32K )
                                        (0311)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0312)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0313) ENDIF ;(WAIT_FOR_32K)
                                        (0314) ENDIF ;(PLL_MODE)
                                        (0315) 
                                        (0316) 	;-------------------------------------------------------
                                        (0317)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0318)     ;-------------------------------------------------------
                                        (0319) 
                                        (0320)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0321) 
                                        (0322) IF (SYSCLK_SOURCE)
                                        (0323)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0324) ENDIF
                                        (0325)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0326) 
                                        (0327)     ;------------------------
                                        (0328)     ; Close CT leakage path.
                                        (0329)     ;------------------------
008B: 62 71 05 MOV   REG[0x71],0x5      (0330)     mov   reg[ACB00CR0], 05h
008E: 62 75 05 MOV   REG[0x75],0x5      (0331)     mov   reg[ACB01CR0], 05h
0091: 62 79 05 MOV   REG[0x79],0x5      (0332)     mov   reg[ACB02CR0], 05h
0094: 62 7D 05 MOV   REG[0x7D],0x5      (0333)     mov   reg[ACB03CR0], 05h
                                        (0334) 
                                        (0335)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0336)     ;---------------------------------------------------
                                        (0337)     ; Insert your custom code below this banner
                                        (0338)     ;---------------------------------------------------
                                        (0339) 
                                        (0340)     ;---------------------------------------------------
                                        (0341)     ; Insert your custom code above this banner
                                        (0342)     ;---------------------------------------------------
                                        (0343)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0344) 
                                        (0345)     ;-------------------------
                                        (0346)     ; Load Base Configuration
                                        (0347)     ;-------------------------
                                        (0348)     ; Load global parameter settings and load the user modules in the
                                        (0349)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0350)     ; to minimize start up time; (2) We may still need to play with the
                                        (0351)     ; Sleep Timer.
                                        (0352)     ;
0097: 7C 02 B7 LCALL 0x02B7             (0353)     lcall LoadConfigInit
                                        (0354) 
                                        (0355)     ;-----------------------------------
                                        (0356)     ; Initialize C Run-Time Environment
                                        (0357)     ;-----------------------------------
                                        (0358) IF ( C_LANGUAGE_SUPPORT )
009A: 50 00    MOV   A,0x0              (0359)     mov  A,0                           ; clear the 'bss' segment to zero
009C: 55 32 36 MOV   [__r0],0x36        (0360)     mov  [__r0],<__bss_start
                                        (0361) BssLoop:
009F: 3C 32 36 CMP   [__r0],0x36        (0362)     cmp  [__r0],<__bss_end
00A2: A0 05    JZ    0x00A8             (0363)     jz   BssDone
00A4: 3F 32    MVI   [__r0],A           (0364)     mvi  [__r0],A
00A6: 8F F8    JMP   0x009F             (0365)     jmp  BssLoop
                                        (0366) BssDone:
00A8: 50 01    MOV   A,0x1              (0367)     mov  A,>__idata_start              ; copy idata to data segment
00AA: 57 CE    MOV   X,0xCE             (0368)     mov  X,<__idata_start
00AC: 55 32 00 MOV   [__r0],0x0         (0369)     mov  [__r0],<__data_start
                                        (0370) IDataLoop:
00AF: 3C 32 24 CMP   [__r0],0x24        (0371)     cmp  [__r0],<__data_end
00B2: A0 0B    JZ    0x00BE             (0372)     jz   C_RTE_Done
00B4: 08       PUSH  A                  (0373)     push A
00B5: 28       ROMX                     (0374)     romx
00B6: 3F 32    MVI   [__r0],A           (0375)     mvi  [__r0],A
00B8: 18       POP   A                  (0376)     pop  A
00B9: 75       INC   X                  (0377)     inc  X
00BA: 09 00    ADC   A,0x0              (0378)     adc  A,0
00BC: 8F F2    JMP   0x00AF             (0379)     jmp  IDataLoop
00BE: 71 10    OR    F,0x10             
                                        (0380) 
                                        (0381) C_RTE_Done:
                                        (0382) 
                                        (0383) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0384) 
                                        (0385)     ;-------------------------------
                                        (0386)     ; Voltage Stabilization for SMP
                                        (0387)     ;-------------------------------
                                        (0388) 
                                        (0389) IF ( SUPPLY_VOLTAGE )                  ; 1 Means 5 Volts
                                        (0390) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0391)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0392)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0393)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0394)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0395)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0396)     M8C_SetBank1
                                        (0397)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0398)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0399)     M8C_SetBank0
                                        (0400)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0401)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0402) .WaitFor2ms:
                                        (0403)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0404)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0405) ENDIF ; ( SWITCH_MODE_PUMP ^ 1 )
                                        (0406) ENDIF ; ( SUPPLY_VOLTAGE )
                                        (0407) 
                                        (0408)     ;-------------------------------
                                        (0409)     ; Set Power-On Reset (POR) Level
                                        (0410)     ;-------------------------------
                                        (0411)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0412)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0413)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0414)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0415)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0416) 
                                        (0417)     M8C_SetBank1
                                        (0418) 
                                        (0419) IF ( SUPPLY_VOLTAGE )                       ; 1 Means 5 Volts
                                        (0420)  IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )  ;    Also 24MHz?
                                        (0421)                                             ;       no, set 4.5V POR in user code, if desired
                                        (0422)  ELSE ; 24HMz                               ;
00C0: 43 E3 20 OR    REG[0xE3],0x20     (0423)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
00C3: 70 EF    AND   F,0xEF             
                                        (0424)  ENDIF ; OSC_CRO_CPU_24MHz
                                        (0425) ENDIF ; 5V
                                        (0426) 
                                        (0427)     M8C_SetBank0
                                        (0428) 
                                        (0429)     ;----------------------------
                                        (0430)     ; Wrap up and invoke "main"
                                        (0431)     ;----------------------------
                                        (0432) 
                                        (0433)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0434)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0435)     ;
00C5: 62 E0 00 MOV   REG[0xE0],0x0      (0436)     mov  reg[INT_MSK0],0
00C8: 71 10    OR    F,0x10             
                                        (0437) 
                                        (0438)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0439)     ;
                                        (0440)     M8C_SetBank1
00CA: 62 E0 03 MOV   REG[0xE0],0x3      (0441)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
00CD: 70 EF    AND   F,0xEF             
                                        (0442)     M8C_SetBank0
                                        (0443) 
                                        (0444)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0445)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0446)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0447)     ;
00CF: 62 E2 00 MOV   REG[0xE2],0x0      (0448)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0449)                                    ; have been set during the boot process.
                                        (0450) IF	(TOOLCHAIN & HITECH)
                                        (0451) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0452) ELSE
                                        (0453) IF ENABLE_LJMP_TO_MAIN
                                        (0454)     ljmp  _main                    ; goto main (no return)
                                        (0455) ELSE
00D2: 7C 07 FF LCALL _main              (0456)     lcall _main                    ; call main
                                        (0457) .Exit:
00D5: 8F FF    JMP   0x00D5             (0458)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0459) ENDIF
                                        (0460) ENDIF ; TOOLCHAIN
                                        (0461) 
                                        (0462)     ;---------------------------------
                                        (0463)     ; Library Access to Global Parms
                                        (0464)     ;---------------------------------
                                        (0465)     ;
                                        (0466)  bGetPowerSetting:
                                        (0467) _bGetPowerSetting:
                                        (0468)     ; Synthesize the "power setting" value used by chips with SlowIMO mode.
                                        (0469)     ; Returns value of POWER_SETTING in the A register.
                                        (0470)     ; No inputs. No Side Effects.
                                        (0471)     ;
                                        (0472) IF ( SUPPLY_VOLTAGE )            ; 1 means 5.0V
00D7: 50 10    MOV   A,0x10             (0473)     mov   A, POWER_SET_5V0_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0474) ELSE        
                                        (0475)     mov   A, POWER_SET_3V3_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0476) ENDIF
00D9: 7F       RET                      (0477)     ret
                                        (0478) 
                                        (0479) IF	(TOOLCHAIN & HITECH)
                                        (0480) ELSE
                                        (0481)     ;---------------------------------
                                        (0482)     ; Order Critical RAM & ROM AREAs
                                        (0483)     ;---------------------------------
                                        (0484)     ;  'TOP' is all that has been defined so far...
                                        (0485) 
                                        (0486)     ;  ROM AREAs for C CONST, static & global items
                                        (0487)     ;
                                        (0488)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0489)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0490) __idata_start:
                                        (0491) 
                                        (0492)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0493) __func_lit_start:
                                        (0494) 
                                        (0495)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0496)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0497) 
                                        (0498)     ; CODE segment for general use
                                        (0499)     ;
                                        (0500)     AREA text (ROM, REL, CON)
                                        (0501) __text_start:
                                        (0502) 
                                        (0503)     ; RAM area usage
                                        (0504)     ;
                                        (0505)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0506) __data_start:
                                        (0507) 
                                        (0508)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0509)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0510)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0511) __bss_start:
                                        (0512) 
                                        (0513) ENDIF ; TOOLCHAIN
                                        (0514) 
                                        (0515) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.2946
01F2: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_rawbot_Bank1
                                        (0019) export LoadConfigTBL_rawbot_Bank0
                                        (0020) export LoadConfigTBL_rawbot_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_rawbot_Bank0:
                                        (0023) ;  Instance name LCD, User Module LCD
                                        (0024) ;  Instance name Timer16UsEcho, User Module Timer16
                                        (0025) ;       Instance name Timer16UsEcho, Block Name TIMER16_LSB(DCB02)
                                        (0026) 	db		2bh, 00h		;Timer16UsEcho_CONTROL_LSB_REG(DCB02CR0)
                                        (0027) 	db		29h, 40h		;Timer16UsEcho_PERIOD_LSB_REG(DCB02DR1)
                                        (0028) 	db		2ah, 00h		;Timer16UsEcho_COMPARE_LSB_REG(DCB02DR2)
                                        (0029) ;       Instance name Timer16UsEcho, Block Name TIMER16_MSB(DCB03)
                                        (0030) 	db		2fh, 04h		;Timer16UsEcho_CONTROL_MSB_REG(DCB03CR0)
                                        (0031) 	db		2dh, b5h		;Timer16UsEcho_PERIOD_MSB_REG(DCB03DR1)
                                        (0032) 	db		2eh, 00h		;Timer16UsEcho_COMPARE_MSB_REG(DCB03DR2)
                                        (0033) ;  Instance name Timer8Main, User Module Timer8
                                        (0034) ;       Instance name Timer8Main, Block Name TIMER8(DBB00)
                                        (0035) 	db		23h, 04h		;Timer8Main_CONTROL_REG(DBB00CR0)
                                        (0036) 	db		21h, c7h		;Timer8Main_PERIOD_REG(DBB00DR1)
                                        (0037) 	db		22h, 00h		;Timer8Main_COMPARE_REG(DBB00DR2)
                                        (0038) ;  Instance name Timer8UsTrig, User Module Timer8
                                        (0039) ;       Instance name Timer8UsTrig, Block Name TIMER8(DBB01)
                                        (0040) 	db		27h, 04h		;Timer8UsTrig_CONTROL_REG(DBB01CR0)
                                        (0041) 	db		25h, 05h		;Timer8UsTrig_PERIOD_REG(DBB01DR1)
                                        (0042) 	db		26h, 00h		;Timer8UsTrig_COMPARE_REG(DBB01DR2)
                                        (0043) ;  Global Register values Bank 0
                                        (0044) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0045) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0046) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0047) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0048) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0049) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0050) 	db		d6h, 00h		; I2CConfig register (I2CCFG)
                                        (0051) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0052) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0053) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0054) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0055) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0056) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0057) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0058) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0059) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0060) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0061) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0062) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0063) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0064) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0065) 	db		ffh
                                        (0066) LoadConfigTBL_rawbot_Bank1:
                                        (0067) ;  Instance name LCD, User Module LCD
                                        (0068) ;  Instance name Timer16UsEcho, User Module Timer16
                                        (0069) ;       Instance name Timer16UsEcho, Block Name TIMER16_LSB(DCB02)
                                        (0070) 	db		28h, 00h		;Timer16UsEcho_FUNC_LSB_REG(DCB02FN)
                                        (0071) 	db		29h, 05h		;Timer16UsEcho_INPUT_LSB_REG(DCB02IN)
                                        (0072) 	db		2ah, 40h		;Timer16UsEcho_OUTPUT_LSB_REG(DCB02OU)
                                        (0073) ;       Instance name Timer16UsEcho, Block Name TIMER16_MSB(DCB03)
                                        (0074) 	db		2ch, 20h		;Timer16UsEcho_FUNC_MSB_REG(DCB03FN)
                                        (0075) 	db		2dh, 35h		;Timer16UsEcho_INPUT_MSB_REG(DCB03IN)
                                        (0076) 	db		2eh, 40h		;Timer16UsEcho_OUTPUT_MSB_REG(DCB03OU)
                                        (0077) ;  Instance name Timer8Main, User Module Timer8
                                        (0078) ;       Instance name Timer8Main, Block Name TIMER8(DBB00)
                                        (0079) 	db		20h, 20h		;Timer8Main_FUNC_REG(DBB00FN)
                                        (0080) 	db		21h, 06h		;Timer8Main_INPUT_REG(DBB00IN)
                                        (0081) 	db		22h, 40h		;Timer8Main_OUTPUT_REG(DBB00OU)
                                        (0082) ;  Instance name Timer8UsTrig, User Module Timer8
                                        (0083) ;       Instance name Timer8UsTrig, Block Name TIMER8(DBB01)
                                        (0084) 	db		24h, 20h		;Timer8UsTrig_FUNC_REG(DBB01FN)
                                        (0085) 	db		25h, 05h		;Timer8UsTrig_INPUT_REG(DBB01IN)
                                        (0086) 	db		26h, 40h		;Timer8UsTrig_OUTPUT_REG(DBB01OU)
                                        (0087) ;  Global Register values Bank 1
                                        (0088) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0089) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0090) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0091) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0092) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0093) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0094) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0095) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0096) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0097) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0098) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0099) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0100) 	db		e1h, b9h		; OscillatorControl_1 register (OSC_CR1)
                                        (0101) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0102) 	db		dfh, c7h		; OscillatorControl_3 register (OSC_CR3)
                                        (0103) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0104) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0105) 	db		ffh
                                        (0106) AREA psoc_config(rom, rel)
                                        (0107) LoadConfigTBL_rawbot_Ordered:
                                        (0108) ;  Ordered Global Register values
                                        (0109) 	M8C_SetBank0
01F4: 62 00 00 MOV   REG[0x0],0x0       (0110) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
01F7: 71 10    OR    F,0x10             
                                        (0111) 	M8C_SetBank1
01F9: 62 00 FF MOV   REG[0x0],0xFF      (0112) 	mov	reg[00h], ffh		; Port_0_DriveMode_0 register (PRT0DM0)
01FC: 62 01 00 MOV   REG[0x1],0x0       (0113) 	mov	reg[01h], 00h		; Port_0_DriveMode_1 register (PRT0DM1)
01FF: 70 EF    AND   F,0xEF             
                                        (0114) 	M8C_SetBank0
0201: 62 03 00 MOV   REG[0x3],0x0       (0115) 	mov	reg[03h], 00h		; Port_0_DriveMode_2 register (PRT0DM2)
0204: 62 02 00 MOV   REG[0x2],0x0       (0116) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
0207: 71 10    OR    F,0x10             
                                        (0117) 	M8C_SetBank1
0209: 62 02 00 MOV   REG[0x2],0x0       (0118) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
020C: 62 03 00 MOV   REG[0x3],0x0       (0119) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
020F: 70 EF    AND   F,0xEF             
                                        (0120) 	M8C_SetBank0
0211: 62 01 00 MOV   REG[0x1],0x0       (0121) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0214: 62 04 00 MOV   REG[0x4],0x0       (0122) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
0217: 71 10    OR    F,0x10             
                                        (0123) 	M8C_SetBank1
0219: 62 04 01 MOV   REG[0x4],0x1       (0124) 	mov	reg[04h], 01h		; Port_1_DriveMode_0 register (PRT1DM0)
021C: 62 05 00 MOV   REG[0x5],0x0       (0125) 	mov	reg[05h], 00h		; Port_1_DriveMode_1 register (PRT1DM1)
021F: 70 EF    AND   F,0xEF             
                                        (0126) 	M8C_SetBank0
0221: 62 07 00 MOV   REG[0x7],0x0       (0127) 	mov	reg[07h], 00h		; Port_1_DriveMode_2 register (PRT1DM2)
0224: 62 06 00 MOV   REG[0x6],0x0       (0128) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
0227: 71 10    OR    F,0x10             
                                        (0129) 	M8C_SetBank1
0229: 62 06 80 MOV   REG[0x6],0x80      (0130) 	mov	reg[06h], 80h		; Port_1_IntCtrl_0 register (PRT1IC0)
022C: 62 07 80 MOV   REG[0x7],0x80      (0131) 	mov	reg[07h], 80h		; Port_1_IntCtrl_1 register (PRT1IC1)
022F: 70 EF    AND   F,0xEF             
                                        (0132) 	M8C_SetBank0
0231: 62 05 80 MOV   REG[0x5],0x80      (0133) 	mov	reg[05h], 80h		; Port_1_IntEn register (PRT1IE)
0234: 62 08 00 MOV   REG[0x8],0x0       (0134) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0237: 71 10    OR    F,0x10             
                                        (0135) 	M8C_SetBank1
0239: 62 08 7F MOV   REG[0x8],0x7F      (0136) 	mov	reg[08h], 7fh		; Port_2_DriveMode_0 register (PRT2DM0)
023C: 62 09 80 MOV   REG[0x9],0x80      (0137) 	mov	reg[09h], 80h		; Port_2_DriveMode_1 register (PRT2DM1)
023F: 70 EF    AND   F,0xEF             
                                        (0138) 	M8C_SetBank0
0241: 62 0B 80 MOV   REG[0xB],0x80      (0139) 	mov	reg[0bh], 80h		; Port_2_DriveMode_2 register (PRT2DM2)
0244: 62 0A 00 MOV   REG[0xA],0x0       (0140) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
0247: 71 10    OR    F,0x10             
                                        (0141) 	M8C_SetBank1
0249: 62 0A 00 MOV   REG[0xA],0x0       (0142) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
024C: 62 0B 00 MOV   REG[0xB],0x0       (0143) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
024F: 70 EF    AND   F,0xEF             
                                        (0144) 	M8C_SetBank0
0251: 62 09 00 MOV   REG[0x9],0x0       (0145) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0254: 62 0C 00 MOV   REG[0xC],0x0       (0146) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0257: 71 10    OR    F,0x10             
                                        (0147) 	M8C_SetBank1
0259: 62 0C 00 MOV   REG[0xC],0x0       (0148) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
025C: 62 0D 00 MOV   REG[0xD],0x0       (0149) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
025F: 70 EF    AND   F,0xEF             
                                        (0150) 	M8C_SetBank0
0261: 62 0F 00 MOV   REG[0xF],0x0       (0151) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
0264: 62 0E 00 MOV   REG[0xE],0x0       (0152) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
0267: 71 10    OR    F,0x10             
                                        (0153) 	M8C_SetBank1
0269: 62 0E 00 MOV   REG[0xE],0x0       (0154) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
026C: 62 0F 00 MOV   REG[0xF],0x0       (0155) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
026F: 70 EF    AND   F,0xEF             
                                        (0156) 	M8C_SetBank0
0271: 62 0D 00 MOV   REG[0xD],0x0       (0157) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
0274: 62 10 00 MOV   REG[0x10],0x0      (0158) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
0277: 71 10    OR    F,0x10             
                                        (0159) 	M8C_SetBank1
0279: 62 10 00 MOV   REG[0x10],0x0      (0160) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
027C: 62 11 00 MOV   REG[0x11],0x0      (0161) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
027F: 70 EF    AND   F,0xEF             
                                        (0162) 	M8C_SetBank0
0281: 62 13 00 MOV   REG[0x13],0x0      (0163) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
0284: 62 12 00 MOV   REG[0x12],0x0      (0164) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
0287: 71 10    OR    F,0x10             
                                        (0165) 	M8C_SetBank1
0289: 62 12 00 MOV   REG[0x12],0x0      (0166) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
028C: 62 13 00 MOV   REG[0x13],0x0      (0167) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
028F: 70 EF    AND   F,0xEF             
                                        (0168) 	M8C_SetBank0
0291: 62 11 00 MOV   REG[0x11],0x0      (0169) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
0294: 62 14 00 MOV   REG[0x14],0x0      (0170) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
0297: 71 10    OR    F,0x10             
                                        (0171) 	M8C_SetBank1
0299: 62 14 00 MOV   REG[0x14],0x0      (0172) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
029C: 62 15 00 MOV   REG[0x15],0x0      (0173) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
029F: 70 EF    AND   F,0xEF             
                                        (0174) 	M8C_SetBank0
02A1: 62 17 00 MOV   REG[0x17],0x0      (0175) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
02A4: 62 16 00 MOV   REG[0x16],0x0      (0176) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
02A7: 71 10    OR    F,0x10             
                                        (0177) 	M8C_SetBank1
02A9: 62 16 00 MOV   REG[0x16],0x0      (0178) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
02AC: 62 17 00 MOV   REG[0x17],0x0      (0179) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
02AF: 70 EF    AND   F,0xEF             
                                        (0180) 	M8C_SetBank0
02B1: 62 15 00 MOV   REG[0x15],0x0      (0181) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
02B4: 70 EF    AND   F,0xEF             
                                        (0182) 	M8C_SetBank0
02B6: 7F       RET                      (0183) 	ret
                                        (0184) 
                                        (0185) 
                                        (0186) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_rawbot
                                        (0026) export _LoadConfig_rawbot
                                        (0027) export Port_2_Data_SHADE
                                        (0028) export _Port_2_Data_SHADE
                                        (0029) export Port_2_DriveMode_0_SHADE
                                        (0030) export _Port_2_DriveMode_0_SHADE
                                        (0031) export Port_2_DriveMode_1_SHADE
                                        (0032) export _Port_2_DriveMode_1_SHADE
                                        (0033) 
                                        (0034) 
                                        (0035) export NO_SHADOW
                                        (0036) export _NO_SHADOW
                                        (0037) 
                                        (0038) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0039) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0040) 
                                        (0041) AREA psoc_config(rom, rel)
                                        (0042) 
                                        (0043) ;---------------------------------------------------------------------------
                                        (0044) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0045) ;                  parameters handled by boot code, like CPU speed). This
                                        (0046) ;                  function can be called from user code, but typically it
                                        (0047) ;                  is only called from boot.
                                        (0048) ;
                                        (0049) ;       INPUTS: None.
                                        (0050) ;      RETURNS: Nothing.
                                        (0051) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0052) ;               In the large memory model currently only the page
                                        (0053) ;               pointer registers listed below are modified.  This does
                                        (0054) ;               not guarantee that in future implementations of this
                                        (0055) ;               function other page pointer registers will not be
                                        (0056) ;               modified.
                                        (0057) ;          
                                        (0058) ;               Page Pointer Registers Modified: 
                                        (0059) ;               CUR_PP
                                        (0060) ;
                                        (0061) _LoadConfigInit:
                                        (0062)  LoadConfigInit:
                                        (0063)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0064)     
02B7: 55 33 00 MOV   [0x33],0x0         (0065) 	mov		[Port_2_Data_SHADE], 0h
02BA: 55 34 7F MOV   [0x34],0x7F        (0066) 	mov		[Port_2_DriveMode_0_SHADE], 7fh
02BD: 55 35 80 MOV   [0x35],0x80        (0067) 	mov		[Port_2_DriveMode_1_SHADE], 80h
                                        (0068) 
02C0: 7C 02 C7 LCALL 0x02C7             (0069) 	lcall	LoadConfig_rawbot
02C3: 7C 01 F2 LCALL 0x01F2             (0070) 	lcall	LoadConfigTBL_rawbot_Ordered
                                        (0071) 
                                        (0072) 
                                        (0073)     RAM_EPILOGUE RAM_USE_CLASS_4
02C6: 7F       RET                      (0074)     ret
                                        (0075) 
                                        (0076) ;---------------------------------------------------------------------------
                                        (0077) ; Load Configuration rawbot
                                        (0078) ;
                                        (0079) ;    Load configuration registers for rawbot.
                                        (0080) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0081) ;
                                        (0082) ;       INPUTS: None.
                                        (0083) ;      RETURNS: Nothing.
                                        (0084) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0085) ;               modified as may the Page Pointer registers!
                                        (0086) ;               In the large memory model currently only the page
                                        (0087) ;               pointer registers listed below are modified.  This does
                                        (0088) ;               not guarantee that in future implementations of this
                                        (0089) ;               function other page pointer registers will not be
                                        (0090) ;               modified.
                                        (0091) ;          
                                        (0092) ;               Page Pointer Registers Modified: 
                                        (0093) ;               CUR_PP
                                        (0094) ;
                                        (0095) _LoadConfig_rawbot:
                                        (0096)  LoadConfig_rawbot:
                                        (0097)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0098) 
02C7: 10       PUSH  X                  (0099) 	push	x
02C8: 70 EF    AND   F,0xEF             
                                        (0100)     M8C_SetBank0                    ; Force bank 0
02CA: 50 00    MOV   A,0x0              (0101)     mov     a, 0                    ; Specify bank 0
02CC: 67       ASR   A                  (0102)     asr     a                       ; Store in carry flag
                                        (0103)                                     ; Load bank 0 table:
02CD: 50 01    MOV   A,0x1              (0104)     mov     A, >LoadConfigTBL_rawbot_Bank0
02CF: 57 50    MOV   X,0x50             (0105)     mov     X, <LoadConfigTBL_rawbot_Bank0
02D1: 7C 02 E2 LCALL 0x02E2             (0106)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0107) 
02D4: 50 01    MOV   A,0x1              (0108)     mov     a, 1                    ; Specify bank 1
02D6: 67       ASR   A                  (0109)     asr     a                       ; Store in carry flag
                                        (0110)                                     ; Load bank 1 table:
02D7: 50 01    MOV   A,0x1              (0111)     mov     A, >LoadConfigTBL_rawbot_Bank1
02D9: 57 93    MOV   X,0x93             (0112)     mov     X, <LoadConfigTBL_rawbot_Bank1
02DB: 7C 02 E2 LCALL 0x02E2             (0113)     lcall   LoadConfig              ; Load the bank 1 values
02DE: 70 EF    AND   F,0xEF             
                                        (0114) 
                                        (0115)     M8C_SetBank0                    ; Force return to bank 0
02E0: 20       POP   X                  (0116) 	pop		x
                                        (0117) 
                                        (0118)     RAM_EPILOGUE RAM_USE_CLASS_4
02E1: 7F       RET                      (0119)     ret
                                        (0120) 
                                        (0121) 
                                        (0122) 
                                        (0123) 
                                        (0124) ;---------------------------------------------------------------------------
                                        (0125) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0126) ;              pairs. Terminate on address=0xFF.
                                        (0127) ;
                                        (0128) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0129) ;           Flag Register Carry bit encodes the Register Bank
                                        (0130) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0131) ;
                                        (0132) ;  RETURNS: nothing.
                                        (0133) ;
                                        (0134) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0135) ;                X-3 Temporary store for register address
                                        (0136) ;                X-2 LSB of config table address
                                        (0137) ;                X-1 MSB of config table address
                                        (0138) ;
                                        (0139) LoadConfig:
                                        (0140)     RAM_PROLOGUE RAM_USE_CLASS_2
02E2: 38 02    ADD   SP,0x2             (0141)     add     SP, 2                   ; Set up local vars
02E4: 10       PUSH  X                  (0142)     push    X                       ; Save config table address on stack
02E5: 08       PUSH  A                  (0143)     push    A
02E6: 4F       MOV   X,SP               (0144)     mov     X, SP
02E7: 56 FC 00 MOV   [X-4],0x0          (0145)     mov     [X-4], 0                ; Set default Destination to Bank 0
02EA: D0 04    JNC   0x02EF             (0146)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
02EC: 56 FC 01 MOV   [X-4],0x1          (0147)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0148) .BankSelectSaved:
02EF: 18       POP   A                  (0149)     pop     A
02F0: 20       POP   X                  (0150)     pop     X
02F1: 70 EF    AND   F,0xEF             
02F3: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0151) 
                                        (0152) LoadConfigLp:
                                        (0153)     M8C_SetBank0                    ; Switch to bank 0
                                        (0154)     M8C_ClearWDT                    ; Clear the watchdog for long inits
02F6: 10       PUSH  X                  (0155)     push    X                       ; Preserve the config table address
02F7: 08       PUSH  A                  (0156)     push    A
02F8: 28       ROMX                     (0157)     romx                            ; Load register address from table
02F9: 39 FF    CMP   A,0xFF             (0158)     cmp     A, END_CONFIG_TABLE     ; End of table?
02FB: A0 1F    JZ    0x031B             (0159)     jz      EndLoadConfig           ;   Yes, go wrap it up
02FD: 4F       MOV   X,SP               (0160)     mov     X, SP                   ;
02FE: 48 FC 01 TST   [X-4],0x1          (0161)     tst     [X-4], 1                ; Loading IO Bank 1?
0301: A0 03    JZ    0x0305             (0162)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
0303: 71 10    OR    F,0x10             
                                        (0163)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0164) .IOBankNowSet:
0305: 54 FD    MOV   [X-3],A            (0165)     mov     [X-3], A                ; Stash the register address
0307: 18       POP   A                  (0166)     pop     A                       ; Retrieve the table address
0308: 20       POP   X                  (0167)     pop     X
0309: 75       INC   X                  (0168)     inc     X                       ; Advance to the data byte
030A: 09 00    ADC   A,0x0              (0169)     adc     A, 0
030C: 10       PUSH  X                  (0170)     push    X                       ; Save the config table address again
030D: 08       PUSH  A                  (0171)     push    A
030E: 28       ROMX                     (0172)     romx                            ; load config data from the table
030F: 4F       MOV   X,SP               (0173)     mov     X, SP                   ; retrieve the register address
0310: 59 FD    MOV   X,[X-3]            (0174)     mov     X, [X-3]
0312: 61 00    MOV   REG[X+0x0],A       (0175)     mov     reg[X], A               ; Configure the register
0314: 18       POP   A                  (0176)     pop     A                       ; retrieve the table address
0315: 20       POP   X                  (0177)     pop     X
0316: 75       INC   X                  (0178)     inc     X                       ; advance to next table entry
0317: 09 00    ADC   A,0x0              (0179)     adc     A, 0
0319: 8F D7    JMP   0x02F1             (0180)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0181) EndLoadConfig:
031B: 38 FC    ADD   SP,0xFC            (0182)     add     SP, -4
                                        (0183)     RAM_EPILOGUE RAM_USE_CLASS_2
031D: 7F       RET                      (0184)     ret
                                        (0185) 
                                        (0186) AREA InterruptRAM(ram, rel)
                                        (0187) 
                                        (0188) NO_SHADOW:
                                        (0189) _NO_SHADOW:
                                        (0190) ; write only register shadows
                                        (0191) _Port_2_Data_SHADE:
                                        (0192) Port_2_Data_SHADE:	BLK	1
                                        (0193) _Port_2_DriveMode_0_SHADE:
                                        (0194) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0195) _Port_2_DriveMode_1_SHADE:
                                        (0196) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0197) 
FILE: lib\timer8ustrig.asm              (0001) ;;*****************************************************************************
031E: 43 E1 02 OR    REG[0xE1],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer8UsTrig.asm
                                        (0004) ;;   Version: 2.70, Updated on 2013/5/19 at 10:44:42
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Timer8UsTrig.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Timer8UsTrig_EnableInt
                                        (0030) export _Timer8UsTrig_EnableInt
                                        (0031) export  Timer8UsTrig_DisableInt
                                        (0032) export _Timer8UsTrig_DisableInt
                                        (0033) export  Timer8UsTrig_Start
                                        (0034) export _Timer8UsTrig_Start
                                        (0035) export  Timer8UsTrig_Stop
                                        (0036) export _Timer8UsTrig_Stop
                                        (0037) export  Timer8UsTrig_WritePeriod
                                        (0038) export _Timer8UsTrig_WritePeriod
                                        (0039) export  Timer8UsTrig_WriteCompareValue
                                        (0040) export _Timer8UsTrig_WriteCompareValue
                                        (0041) export  Timer8UsTrig_bReadCompareValue
                                        (0042) export _Timer8UsTrig_bReadCompareValue
                                        (0043) export  Timer8UsTrig_bReadTimer
                                        (0044) export _Timer8UsTrig_bReadTimer
                                        (0045) export  Timer8UsTrig_bReadTimerSaveCV
                                        (0046) export _Timer8UsTrig_bReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  bTimer8UsTrig_ReadCompareValue  ; deprecated
                                        (0051) export _bTimer8UsTrig_ReadCompareValue  ; deprecated
                                        (0052) export  bTimer8UsTrig_ReadTimer         ; deprecated
                                        (0053) export _bTimer8UsTrig_ReadTimer         ; deprecated
                                        (0054) export  bTimer8UsTrig_ReadTimerSaveCV   ; deprecated
                                        (0055) export _bTimer8UsTrig_ReadTimerSaveCV   ; deprecated
                                        (0056) 
                                        (0057) export  bTimer8UsTrig_ReadCounter       ; obsolete
                                        (0058) export _bTimer8UsTrig_ReadCounter       ; obsolete
                                        (0059) export  bTimer8UsTrig_CaptureCounter    ; obsolete
                                        (0060) export _bTimer8UsTrig_CaptureCounter    ; obsolete
                                        (0061) 
                                        (0062) 
                                        (0063) AREA rawbot_RAM (RAM,REL)
                                        (0064) 
                                        (0065) ;-----------------------------------------------
                                        (0066) ;  Constant Definitions
                                        (0067) ;-----------------------------------------------
                                        (0068) 
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: Timer8UsTrig_EnableInt
                                        (0080) ;
                                        (0081) ;  DESCRIPTION:
                                        (0082) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0083) ;     associated with this User Module. This function has no effect until and
                                        (0084) ;     unless the global interrupts are enabled (for example by using the
                                        (0085) ;     macro M8C_EnableGInt).
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;
                                        (0088) ;  ARGUMENTS:    None.
                                        (0089) ;  RETURNS:      Nothing.
                                        (0090) ;  SIDE EFFECTS: 
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097)  Timer8UsTrig_EnableInt:
                                        (0098) _Timer8UsTrig_EnableInt:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0100)    Timer8UsTrig_EnableInt_M
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
0321: 7F       RET                      (0102)    ret
0322: 41 E1 FD AND   REG[0xE1],0xFD     
                                        (0103) 
                                        (0104) .ENDSECTION
                                        (0105) 
                                        (0106) 
                                        (0107) .SECTION
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109) ;  FUNCTION NAME: Timer8UsTrig_DisableInt
                                        (0110) ;
                                        (0111) ;  DESCRIPTION:
                                        (0112) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0113) ;     mask bit associated with this User Module.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS: 
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  Timer8UsTrig_DisableInt:
                                        (0126) _Timer8UsTrig_DisableInt:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    Timer8UsTrig_DisableInt_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
0325: 7F       RET                      (0130)    ret
0326: 43 27 01 OR    REG[0x27],0x1      
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) 
                                        (0135) .SECTION
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  FUNCTION NAME: Timer8UsTrig_Start
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;     Sets the start bit in the Control register of this user module.  The
                                        (0141) ;     timer will begin counting on the next input clock.
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:    None
                                        (0145) ;  RETURNS:      Nothing
                                        (0146) ;  SIDE EFFECTS: 
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  Timer8UsTrig_Start:
                                        (0154) _Timer8UsTrig_Start:
                                        (0155)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0156)    Timer8UsTrig_Start_M
                                        (0157)    RAM_EPILOGUE RAM_USE_CLASS_1
0329: 7F       RET                      (0158)    ret
032A: 41 27 FE AND   REG[0x27],0xFE     
                                        (0159) 
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: Timer8UsTrig_Stop
                                        (0166) ;
                                        (0167) ;  DESCRIPTION:
                                        (0168) ;     Disables timer operation by clearing the start bit in the Control
                                        (0169) ;     register.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    None
                                        (0173) ;  RETURNS:      Nothing
                                        (0174) ;  SIDE EFFECTS: 
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  Timer8UsTrig_Stop:
                                        (0182) _Timer8UsTrig_Stop:
                                        (0183)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0184)    Timer8UsTrig_Stop_M
                                        (0185)    RAM_EPILOGUE RAM_USE_CLASS_1
032D: 7F       RET                      (0186)    ret
                                        (0187) 
                                        (0188) .ENDSECTION
                                        (0189) 
                                        (0190) 
                                        (0191) .SECTION
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  FUNCTION NAME: Timer8UsTrig_WritePeriod
                                        (0194) ;
                                        (0195) ;  DESCRIPTION:
                                        (0196) ;     Write the 8-bit period value into the Period register (DR1). If the
                                        (0197) ;     Timer user module is stopped, then this value will also be latched
                                        (0198) ;     into the Count register (DR0).
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;
                                        (0201) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0202) ;  RETURNS:   Nothing
                                        (0203) ;  SIDE EFFECTS: 
                                        (0204) ;    The A and X registers may be modified by this or future implementations
                                        (0205) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0206) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0207) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0208) ;    functions.
                                        (0209) ;
                                        (0210)  Timer8UsTrig_WritePeriod:
                                        (0211) _Timer8UsTrig_WritePeriod:
                                        (0212)    RAM_PROLOGUE RAM_USE_CLASS_1
032E: 60 25    MOV   REG[0x25],A        (0213)    mov   reg[Timer8UsTrig_PERIOD_REG], A
                                        (0214)    RAM_EPILOGUE RAM_USE_CLASS_1
0330: 7F       RET                      (0215)    ret
                                        (0216) 
                                        (0217) .ENDSECTION
                                        (0218) 
                                        (0219) 
                                        (0220) .SECTION
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;  FUNCTION NAME: Timer8UsTrig_WriteCompareValue
                                        (0223) ;
                                        (0224) ;  DESCRIPTION:
                                        (0225) ;     Writes compare value into the Compare register (DR2).
                                        (0226) ;
                                        (0227) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0228) ;           Compare register. (Call Timer8UsTrig_Stop to disable).
                                        (0229) ;-----------------------------------------------------------------------------
                                        (0230) ;
                                        (0231) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0232) ;  RETURNS:      Nothing
                                        (0233) ;  SIDE EFFECTS: 
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240)  Timer8UsTrig_WriteCompareValue:
                                        (0241) _Timer8UsTrig_WriteCompareValue:
                                        (0242)    RAM_PROLOGUE RAM_USE_CLASS_1
0331: 60 26    MOV   REG[0x26],A        (0243)    mov   reg[Timer8UsTrig_COMPARE_REG], A
                                        (0244)    RAM_EPILOGUE RAM_USE_CLASS_1
0333: 7F       RET                      (0245)    ret
                                        (0246) 
                                        (0247) .ENDSECTION
                                        (0248) 
                                        (0249) 
                                        (0250) .SECTION
                                        (0251) ;-----------------------------------------------------------------------------
                                        (0252) ;  FUNCTION NAME: Timer8UsTrig_bReadCompareValue
                                        (0253) ;
                                        (0254) ;  DESCRIPTION:
                                        (0255) ;     Reads the Compare register.
                                        (0256) ;-----------------------------------------------------------------------------
                                        (0257) ;
                                        (0258) ;  ARGUMENTS:    None
                                        (0259) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0260) ;  SIDE EFFECTS: 
                                        (0261) ;    The A and X registers may be modified by this or future implementations
                                        (0262) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0263) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0264) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0265) ;    functions.
                                        (0266) ;
                                        (0267)  Timer8UsTrig_bReadCompareValue:
                                        (0268) _Timer8UsTrig_bReadCompareValue:
                                        (0269)  bTimer8UsTrig_ReadCompareValue:                 ; this name deprecated
                                        (0270) _bTimer8UsTrig_ReadCompareValue:                 ; this name deprecated
                                        (0271)    RAM_PROLOGUE RAM_USE_CLASS_1
0334: 5D 26    MOV   A,REG[0x26]        (0272)    mov   A, reg[Timer8UsTrig_COMPARE_REG]
                                        (0273)    RAM_EPILOGUE RAM_USE_CLASS_1
0336: 7F       RET                      (0274)    ret
                                        (0275) 
                                        (0276) .ENDSECTION
                                        (0277) 
                                        (0278) 
                                        (0279) .SECTION
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;  FUNCTION NAME: Timer8UsTrig_bReadTimerSaveCV
                                        (0282) ;
                                        (0283) ;  DESCRIPTION:
                                        (0284) ;     Returns the value in the Count register (DR0), preserving the
                                        (0285) ;     value in the compare register (DR2).
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS: None
                                        (0289) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0292) ;     2) If enabled, Global interrupts are momentarily disabled.
                                        (0293) ;     3) The user module is stopped momentarily while the compare value is
                                        (0294) ;        restored.  This may cause the Count register to miss one or more
                                        (0295) ;        counts depending on the input clock speed.
                                        (0296) ;     4) The A and X registers may be modified by this or future implementations
                                        (0297) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0298) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0299) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0300) ;        functions.
                                        (0301) ;
                                        (0302) ;  THEORY of OPERATION:
                                        (0303) ;     1) Read and save the Compare register.
                                        (0304) ;     2) Read the Count register, causing its data to be latched into
                                        (0305) ;        the Compare register.
                                        (0306) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0307) ;        to the buffer.
                                        (0308) ;     4) Disable global interrupts
                                        (0309) ;     5) Halt the timer
                                        (0310) ;     6) Restore the Compare register values
                                        (0311) ;     7) Start the Timer again
                                        (0312) ;     8) Restore global interrupt state
                                        (0313) ;
                                        (0314)  Timer8UsTrig_bReadTimerSaveCV:
                                        (0315) _Timer8UsTrig_bReadTimerSaveCV:
                                        (0316)  bTimer8UsTrig_ReadTimerSaveCV:                  ; this name deprecated
                                        (0317) _bTimer8UsTrig_ReadTimerSaveCV:                  ; this name deprecated
                                        (0318)  bTimer8UsTrig_ReadCounter:                      ; this name deprecated
                                        (0319) _bTimer8UsTrig_ReadCounter:                      ; this name deprecated
                                        (0320) 
                                        (0321) CpuFlags:      equ   0
                                        (0322) bCount:        equ   1
                                        (0323) 
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_2
0337: 4F       MOV   X,SP               (0325)    mov   X, SP                                   ; X <- stack frame pointer
0338: 38 02    ADD   SP,0x2             (0326)    add   SP, 2                                   ; Reserve space for flags, count
033A: 5D 27    MOV   A,REG[0x27]        (0327)    mov   A, reg[Timer8UsTrig_CONTROL_REG]        ; save the Control register
033C: 08       PUSH  A                  (0328)    push  A
033D: 5D 26    MOV   A,REG[0x26]        (0329)    mov   A, reg[Timer8UsTrig_COMPARE_REG]        ; save the Compare register
033F: 08       PUSH  A                  (0330)    push  A
0340: 5D 24    MOV   A,REG[0x24]        (0331)    mov   A, reg[Timer8UsTrig_COUNTER_REG]        ; synchronous copy DR2 <- DR0
                                        (0332)                                                  ; This may cause an interrupt!
0342: 5D 26    MOV   A,REG[0x26]        (0333)    mov   A, reg[Timer8UsTrig_COMPARE_REG]        ; Now grab DR2 (DR0) and save
0344: 54 01    MOV   [X+1],A            (0334)    mov   [X+bCount], A
0346: 50 00    MOV   A,0x0              (0335)    mov   A, 0                                    ; Guess the global interrupt state
0348: 49 F7 01 TST   REG[0xF7],0x1      (0336)    tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
034B: A0 03    JZ    0x034F             (0337)    jz    .SetupStatusFlag                        ;   Yes, guess was correct
034D: 50 01    MOV   A,0x1              (0338)    mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
                                        (0339) .SetupStatusFlag:                                ; and ...
034F: 54 00    MOV   [X+0],A            (0340)    mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
0351: 70 FE    AND   F,0xFE             
0353: 41 27 FE AND   REG[0x27],0xFE     
                                        (0341)    M8C_DisableGInt                               ; Disable interrupts globally
                                        (0342)    Timer8UsTrig_Stop_M                           ; Stop the timer
0356: 18       POP   A                  (0343)    pop   A                                       ; Restore the Compare register
0357: 60 26    MOV   REG[0x26],A        (0344)    mov   reg[Timer8UsTrig_COMPARE_REG], A
0359: 18       POP   A                  (0345)    pop   A                                       ; restore start state of the timer
035A: 60 27    MOV   REG[0x27],A        (0346)    mov   reg[Timer8UsTrig_CONTROL_REG], A
035C: 18       POP   A                  (0347)    pop   A                                       ; Return result stored in stack frame
                                        (0348)    RAM_EPILOGUE RAM_USE_CLASS_2
035D: 7E       RETI                     (0349)    reti                                          ; Flag Reg <- StackFrame[0]
                                        (0350) 
                                        (0351) .ENDSECTION
                                        (0352) 
                                        (0353) 
                                        (0354) .SECTION
                                        (0355) ;-----------------------------------------------------------------------------
                                        (0356) ;  FUNCTION NAME: Timer8UsTrig_bReadTimer
                                        (0357) ;
                                        (0358) ;  DESCRIPTION:
                                        (0359) ;     Performs a software capture of the Count register.  A synchronous
                                        (0360) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0361) ;
                                        (0362) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;
                                        (0365) ;  ARGUMENTS:    None
                                        (0366) ;  RETURNS:      fastcall16 BYTE bCount, (value of DR0 in the A register)
                                        (0367) ;  SIDE EFFECTS:
                                        (0368) ;    May cause an interrupt.
                                        (0369) ;
                                        (0370) ;    The A and X registers may be modified by this or future implementations
                                        (0371) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0372) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0373) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0374) ;    functions.
                                        (0375) ;
                                        (0376) ;  THEORY of OPERATION:
                                        (0377) ;     1) Read the Count register - this causes the count value to be
                                        (0378) ;        latched into the Compare register.
                                        (0379) ;     2) Read and return the Count register values from the Compare
                                        (0380) ;        registers into the return buffer.
                                        (0381) ;
                                        (0382)  Timer8UsTrig_bReadTimer:
                                        (0383) _Timer8UsTrig_bReadTimer:
                                        (0384)  bTimer8UsTrig_ReadTimer:                        ; this name deprecated
                                        (0385) _bTimer8UsTrig_ReadTimer:                        ; this name deprecated
                                        (0386)  bTimer8UsTrig_CaptureCounter:                   ; this name deprecated
                                        (0387) _bTimer8UsTrig_CaptureCounter:                   ; this name deprecated
                                        (0388) 
                                        (0389)    RAM_PROLOGUE RAM_USE_CLASS_1
035E: 5D 24    MOV   A,REG[0x24]        (0390)    mov   A, reg[Timer8UsTrig_COUNTER_REG]        ; synchronous copy DR2 <- DR0
                                        (0391)                                                  ; This may cause an interrupt!
0360: 5D 26    MOV   A,REG[0x26]        (0392)    mov   A, reg[Timer8UsTrig_COMPARE_REG]        ; Return DR2 (actually DR0)
                                        (0393)    RAM_EPILOGUE RAM_USE_CLASS_1
0362: 7F       RET                      (0394)    ret
                                        (0395) 
                                        (0396) .ENDSECTION
                                        (0397) 
                                        (0398) ; End of File Timer8UsTrig.asm
FILE: lib\timer8main.asm                (0001) ;;*****************************************************************************
0363: 43 E1 01 OR    REG[0xE1],0x1      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer8Main.asm
                                        (0004) ;;   Version: 2.70, Updated on 2013/5/19 at 10:44:42
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Timer8Main.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Timer8Main_EnableInt
                                        (0030) export _Timer8Main_EnableInt
                                        (0031) export  Timer8Main_DisableInt
                                        (0032) export _Timer8Main_DisableInt
                                        (0033) export  Timer8Main_Start
                                        (0034) export _Timer8Main_Start
                                        (0035) export  Timer8Main_Stop
                                        (0036) export _Timer8Main_Stop
                                        (0037) export  Timer8Main_WritePeriod
                                        (0038) export _Timer8Main_WritePeriod
                                        (0039) export  Timer8Main_WriteCompareValue
                                        (0040) export _Timer8Main_WriteCompareValue
                                        (0041) export  Timer8Main_bReadCompareValue
                                        (0042) export _Timer8Main_bReadCompareValue
                                        (0043) export  Timer8Main_bReadTimer
                                        (0044) export _Timer8Main_bReadTimer
                                        (0045) export  Timer8Main_bReadTimerSaveCV
                                        (0046) export _Timer8Main_bReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  bTimer8Main_ReadCompareValue  ; deprecated
                                        (0051) export _bTimer8Main_ReadCompareValue  ; deprecated
                                        (0052) export  bTimer8Main_ReadTimer         ; deprecated
                                        (0053) export _bTimer8Main_ReadTimer         ; deprecated
                                        (0054) export  bTimer8Main_ReadTimerSaveCV   ; deprecated
                                        (0055) export _bTimer8Main_ReadTimerSaveCV   ; deprecated
                                        (0056) 
                                        (0057) export  bTimer8Main_ReadCounter       ; obsolete
                                        (0058) export _bTimer8Main_ReadCounter       ; obsolete
                                        (0059) export  bTimer8Main_CaptureCounter    ; obsolete
                                        (0060) export _bTimer8Main_CaptureCounter    ; obsolete
                                        (0061) 
                                        (0062) 
                                        (0063) AREA rawbot_RAM (RAM,REL)
                                        (0064) 
                                        (0065) ;-----------------------------------------------
                                        (0066) ;  Constant Definitions
                                        (0067) ;-----------------------------------------------
                                        (0068) 
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: Timer8Main_EnableInt
                                        (0080) ;
                                        (0081) ;  DESCRIPTION:
                                        (0082) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0083) ;     associated with this User Module. This function has no effect until and
                                        (0084) ;     unless the global interrupts are enabled (for example by using the
                                        (0085) ;     macro M8C_EnableGInt).
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;
                                        (0088) ;  ARGUMENTS:    None.
                                        (0089) ;  RETURNS:      Nothing.
                                        (0090) ;  SIDE EFFECTS: 
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097)  Timer8Main_EnableInt:
                                        (0098) _Timer8Main_EnableInt:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0100)    Timer8Main_EnableInt_M
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
0366: 7F       RET                      (0102)    ret
0367: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0103) 
                                        (0104) .ENDSECTION
                                        (0105) 
                                        (0106) 
                                        (0107) .SECTION
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109) ;  FUNCTION NAME: Timer8Main_DisableInt
                                        (0110) ;
                                        (0111) ;  DESCRIPTION:
                                        (0112) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0113) ;     mask bit associated with this User Module.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS: 
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  Timer8Main_DisableInt:
                                        (0126) _Timer8Main_DisableInt:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    Timer8Main_DisableInt_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
036A: 7F       RET                      (0130)    ret
036B: 43 23 01 OR    REG[0x23],0x1      
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) 
                                        (0135) .SECTION
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  FUNCTION NAME: Timer8Main_Start
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;     Sets the start bit in the Control register of this user module.  The
                                        (0141) ;     timer will begin counting on the next input clock.
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:    None
                                        (0145) ;  RETURNS:      Nothing
                                        (0146) ;  SIDE EFFECTS: 
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  Timer8Main_Start:
                                        (0154) _Timer8Main_Start:
                                        (0155)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0156)    Timer8Main_Start_M
                                        (0157)    RAM_EPILOGUE RAM_USE_CLASS_1
036E: 7F       RET                      (0158)    ret
036F: 41 23 FE AND   REG[0x23],0xFE     
                                        (0159) 
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: Timer8Main_Stop
                                        (0166) ;
                                        (0167) ;  DESCRIPTION:
                                        (0168) ;     Disables timer operation by clearing the start bit in the Control
                                        (0169) ;     register.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    None
                                        (0173) ;  RETURNS:      Nothing
                                        (0174) ;  SIDE EFFECTS: 
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  Timer8Main_Stop:
                                        (0182) _Timer8Main_Stop:
                                        (0183)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0184)    Timer8Main_Stop_M
                                        (0185)    RAM_EPILOGUE RAM_USE_CLASS_1
0372: 7F       RET                      (0186)    ret
                                        (0187) 
                                        (0188) .ENDSECTION
                                        (0189) 
                                        (0190) 
                                        (0191) .SECTION
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  FUNCTION NAME: Timer8Main_WritePeriod
                                        (0194) ;
                                        (0195) ;  DESCRIPTION:
                                        (0196) ;     Write the 8-bit period value into the Period register (DR1). If the
                                        (0197) ;     Timer user module is stopped, then this value will also be latched
                                        (0198) ;     into the Count register (DR0).
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;
                                        (0201) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0202) ;  RETURNS:   Nothing
                                        (0203) ;  SIDE EFFECTS: 
                                        (0204) ;    The A and X registers may be modified by this or future implementations
                                        (0205) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0206) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0207) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0208) ;    functions.
                                        (0209) ;
                                        (0210)  Timer8Main_WritePeriod:
                                        (0211) _Timer8Main_WritePeriod:
                                        (0212)    RAM_PROLOGUE RAM_USE_CLASS_1
0373: 60 21    MOV   REG[0x21],A        (0213)    mov   reg[Timer8Main_PERIOD_REG], A
                                        (0214)    RAM_EPILOGUE RAM_USE_CLASS_1
0375: 7F       RET                      (0215)    ret
                                        (0216) 
                                        (0217) .ENDSECTION
                                        (0218) 
                                        (0219) 
                                        (0220) .SECTION
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;  FUNCTION NAME: Timer8Main_WriteCompareValue
                                        (0223) ;
                                        (0224) ;  DESCRIPTION:
                                        (0225) ;     Writes compare value into the Compare register (DR2).
                                        (0226) ;
                                        (0227) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0228) ;           Compare register. (Call Timer8Main_Stop to disable).
                                        (0229) ;-----------------------------------------------------------------------------
                                        (0230) ;
                                        (0231) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0232) ;  RETURNS:      Nothing
                                        (0233) ;  SIDE EFFECTS: 
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240)  Timer8Main_WriteCompareValue:
                                        (0241) _Timer8Main_WriteCompareValue:
                                        (0242)    RAM_PROLOGUE RAM_USE_CLASS_1
0376: 60 22    MOV   REG[0x22],A        (0243)    mov   reg[Timer8Main_COMPARE_REG], A
                                        (0244)    RAM_EPILOGUE RAM_USE_CLASS_1
0378: 7F       RET                      (0245)    ret
                                        (0246) 
                                        (0247) .ENDSECTION
                                        (0248) 
                                        (0249) 
                                        (0250) .SECTION
                                        (0251) ;-----------------------------------------------------------------------------
                                        (0252) ;  FUNCTION NAME: Timer8Main_bReadCompareValue
                                        (0253) ;
                                        (0254) ;  DESCRIPTION:
                                        (0255) ;     Reads the Compare register.
                                        (0256) ;-----------------------------------------------------------------------------
                                        (0257) ;
                                        (0258) ;  ARGUMENTS:    None
                                        (0259) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0260) ;  SIDE EFFECTS: 
                                        (0261) ;    The A and X registers may be modified by this or future implementations
                                        (0262) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0263) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0264) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0265) ;    functions.
                                        (0266) ;
                                        (0267)  Timer8Main_bReadCompareValue:
                                        (0268) _Timer8Main_bReadCompareValue:
                                        (0269)  bTimer8Main_ReadCompareValue:                   ; this name deprecated
                                        (0270) _bTimer8Main_ReadCompareValue:                   ; this name deprecated
                                        (0271)    RAM_PROLOGUE RAM_USE_CLASS_1
0379: 5D 22    MOV   A,REG[0x22]        (0272)    mov   A, reg[Timer8Main_COMPARE_REG]
                                        (0273)    RAM_EPILOGUE RAM_USE_CLASS_1
037B: 7F       RET                      (0274)    ret
                                        (0275) 
                                        (0276) .ENDSECTION
                                        (0277) 
                                        (0278) 
                                        (0279) .SECTION
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;  FUNCTION NAME: Timer8Main_bReadTimerSaveCV
                                        (0282) ;
                                        (0283) ;  DESCRIPTION:
                                        (0284) ;     Returns the value in the Count register (DR0), preserving the
                                        (0285) ;     value in the compare register (DR2).
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS: None
                                        (0289) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0292) ;     2) If enabled, Global interrupts are momentarily disabled.
                                        (0293) ;     3) The user module is stopped momentarily while the compare value is
                                        (0294) ;        restored.  This may cause the Count register to miss one or more
                                        (0295) ;        counts depending on the input clock speed.
                                        (0296) ;     4) The A and X registers may be modified by this or future implementations
                                        (0297) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0298) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0299) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0300) ;        functions.
                                        (0301) ;
                                        (0302) ;  THEORY of OPERATION:
                                        (0303) ;     1) Read and save the Compare register.
                                        (0304) ;     2) Read the Count register, causing its data to be latched into
                                        (0305) ;        the Compare register.
                                        (0306) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0307) ;        to the buffer.
                                        (0308) ;     4) Disable global interrupts
                                        (0309) ;     5) Halt the timer
                                        (0310) ;     6) Restore the Compare register values
                                        (0311) ;     7) Start the Timer again
                                        (0312) ;     8) Restore global interrupt state
                                        (0313) ;
                                        (0314)  Timer8Main_bReadTimerSaveCV:
                                        (0315) _Timer8Main_bReadTimerSaveCV:
                                        (0316)  bTimer8Main_ReadTimerSaveCV:                    ; this name deprecated
                                        (0317) _bTimer8Main_ReadTimerSaveCV:                    ; this name deprecated
                                        (0318)  bTimer8Main_ReadCounter:                        ; this name deprecated
                                        (0319) _bTimer8Main_ReadCounter:                        ; this name deprecated
                                        (0320) 
                                        (0321) CpuFlags:      equ   0
                                        (0322) bCount:        equ   1
                                        (0323) 
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_2
037C: 4F       MOV   X,SP               (0325)    mov   X, SP                                   ; X <- stack frame pointer
037D: 38 02    ADD   SP,0x2             (0326)    add   SP, 2                                   ; Reserve space for flags, count
037F: 5D 23    MOV   A,REG[0x23]        (0327)    mov   A, reg[Timer8Main_CONTROL_REG]          ; save the Control register
0381: 08       PUSH  A                  (0328)    push  A
0382: 5D 22    MOV   A,REG[0x22]        (0329)    mov   A, reg[Timer8Main_COMPARE_REG]          ; save the Compare register
0384: 08       PUSH  A                  (0330)    push  A
0385: 5D 20    MOV   A,REG[0x20]        (0331)    mov   A, reg[Timer8Main_COUNTER_REG]          ; synchronous copy DR2 <- DR0
                                        (0332)                                                  ; This may cause an interrupt!
0387: 5D 22    MOV   A,REG[0x22]        (0333)    mov   A, reg[Timer8Main_COMPARE_REG]          ; Now grab DR2 (DR0) and save
0389: 54 01    MOV   [X+1],A            (0334)    mov   [X+bCount], A
038B: 50 00    MOV   A,0x0              (0335)    mov   A, 0                                    ; Guess the global interrupt state
038D: 49 F7 01 TST   REG[0xF7],0x1      (0336)    tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
0390: A0 03    JZ    0x0394             (0337)    jz    .SetupStatusFlag                        ;   Yes, guess was correct
0392: 50 01    MOV   A,0x1              (0338)    mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
                                        (0339) .SetupStatusFlag:                                ; and ...
0394: 54 00    MOV   [X+0],A            (0340)    mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
0396: 70 FE    AND   F,0xFE             
0398: 41 23 FE AND   REG[0x23],0xFE     
                                        (0341)    M8C_DisableGInt                               ; Disable interrupts globally
                                        (0342)    Timer8Main_Stop_M                             ; Stop the timer
039B: 18       POP   A                  (0343)    pop   A                                       ; Restore the Compare register
039C: 60 22    MOV   REG[0x22],A        (0344)    mov   reg[Timer8Main_COMPARE_REG], A
039E: 18       POP   A                  (0345)    pop   A                                       ; restore start state of the timer
039F: 60 23    MOV   REG[0x23],A        (0346)    mov   reg[Timer8Main_CONTROL_REG], A
03A1: 18       POP   A                  (0347)    pop   A                                       ; Return result stored in stack frame
                                        (0348)    RAM_EPILOGUE RAM_USE_CLASS_2
03A2: 7E       RETI                     (0349)    reti                                          ; Flag Reg <- StackFrame[0]
                                        (0350) 
                                        (0351) .ENDSECTION
                                        (0352) 
                                        (0353) 
                                        (0354) .SECTION
                                        (0355) ;-----------------------------------------------------------------------------
                                        (0356) ;  FUNCTION NAME: Timer8Main_bReadTimer
                                        (0357) ;
                                        (0358) ;  DESCRIPTION:
                                        (0359) ;     Performs a software capture of the Count register.  A synchronous
                                        (0360) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0361) ;
                                        (0362) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;
                                        (0365) ;  ARGUMENTS:    None
                                        (0366) ;  RETURNS:      fastcall16 BYTE bCount, (value of DR0 in the A register)
                                        (0367) ;  SIDE EFFECTS:
                                        (0368) ;    May cause an interrupt.
                                        (0369) ;
                                        (0370) ;    The A and X registers may be modified by this or future implementations
                                        (0371) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0372) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0373) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0374) ;    functions.
                                        (0375) ;
                                        (0376) ;  THEORY of OPERATION:
                                        (0377) ;     1) Read the Count register - this causes the count value to be
                                        (0378) ;        latched into the Compare register.
                                        (0379) ;     2) Read and return the Count register values from the Compare
                                        (0380) ;        registers into the return buffer.
                                        (0381) ;
                                        (0382)  Timer8Main_bReadTimer:
                                        (0383) _Timer8Main_bReadTimer:
                                        (0384)  bTimer8Main_ReadTimer:                          ; this name deprecated
                                        (0385) _bTimer8Main_ReadTimer:                          ; this name deprecated
                                        (0386)  bTimer8Main_CaptureCounter:                     ; this name deprecated
                                        (0387) _bTimer8Main_CaptureCounter:                     ; this name deprecated
                                        (0388) 
                                        (0389)    RAM_PROLOGUE RAM_USE_CLASS_1
03A3: 5D 20    MOV   A,REG[0x20]        (0390)    mov   A, reg[Timer8Main_COUNTER_REG]          ; synchronous copy DR2 <- DR0
                                        (0391)                                                  ; This may cause an interrupt!
03A5: 5D 22    MOV   A,REG[0x22]        (0392)    mov   A, reg[Timer8Main_COMPARE_REG]          ; Return DR2 (actually DR0)
                                        (0393)    RAM_EPILOGUE RAM_USE_CLASS_1
03A7: 7F       RET                      (0394)    ret
                                        (0395) 
                                        (0396) .ENDSECTION
                                        (0397) 
                                        (0398) ; End of File Timer8Main.asm
FILE: lib\timer16usecho.asm             (0001) ;;*****************************************************************************
03A8: 43 E1 08 OR    REG[0xE1],0x8      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer16UsEcho.asm
                                        (0004) ;;   Version: 2.6, Updated on 2013/5/19 at 10:44:39
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Timer16UsEcho.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Timer16UsEcho_EnableInt
                                        (0030) export _Timer16UsEcho_EnableInt
                                        (0031) export  Timer16UsEcho_DisableInt
                                        (0032) export _Timer16UsEcho_DisableInt
                                        (0033) export  Timer16UsEcho_Start
                                        (0034) export _Timer16UsEcho_Start
                                        (0035) export  Timer16UsEcho_Stop
                                        (0036) export _Timer16UsEcho_Stop
                                        (0037) export  Timer16UsEcho_WritePeriod
                                        (0038) export _Timer16UsEcho_WritePeriod
                                        (0039) export  Timer16UsEcho_WriteCompareValue
                                        (0040) export _Timer16UsEcho_WriteCompareValue
                                        (0041) export  Timer16UsEcho_wReadCompareValue
                                        (0042) export _Timer16UsEcho_wReadCompareValue
                                        (0043) export  Timer16UsEcho_wReadTimer
                                        (0044) export _Timer16UsEcho_wReadTimer
                                        (0045) export  Timer16UsEcho_wReadTimerSaveCV
                                        (0046) export _Timer16UsEcho_wReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  wTimer16UsEcho_ReadCompareValue  ; deprecated
                                        (0051) export _wTimer16UsEcho_ReadCompareValue  ; deprecated
                                        (0052) export  wTimer16UsEcho_ReadTimer         ; deprecated
                                        (0053) export _wTimer16UsEcho_ReadTimer         ; deprecated
                                        (0054) export  wTimer16UsEcho_ReadTimerSaveCV   ; deprecated
                                        (0055) export _wTimer16UsEcho_ReadTimerSaveCV   ; deprecated
                                        (0056) 
                                        (0057) export  wTimer16UsEcho_ReadCounter       ; obsolete
                                        (0058) export _wTimer16UsEcho_ReadCounter       ; obsolete
                                        (0059) export  wTimer16UsEcho_CaptureCounter    ; obsolete
                                        (0060) export _wTimer16UsEcho_CaptureCounter    ; obsolete
                                        (0061) 
                                        (0062) 
                                        (0063) AREA rawbot_RAM (RAM,REL)
                                        (0064) 
                                        (0065) ;-----------------------------------------------
                                        (0066) ;  Constant Definitions
                                        (0067) ;-----------------------------------------------
                                        (0068) 
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: Timer16UsEcho_EnableInt
                                        (0080) ;
                                        (0081) ;  DESCRIPTION:
                                        (0082) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0083) ;     associated with this User Module. This function has no effect until and
                                        (0084) ;     unless the global interrupts are enabled (for example by using the
                                        (0085) ;     macro M8C_EnableGInt).
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;
                                        (0088) ;  ARGUMENTS:    None.
                                        (0089) ;  RETURNS:      Nothing.
                                        (0090) ;  SIDE EFFECTS: 
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097)  Timer16UsEcho_EnableInt:
                                        (0098) _Timer16UsEcho_EnableInt:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0100)    Timer16UsEcho_EnableInt_M
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
03AB: 7F       RET                      (0102)    ret
03AC: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0103) 
                                        (0104) .ENDSECTION
                                        (0105) 
                                        (0106) 
                                        (0107) .SECTION
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109) ;  FUNCTION NAME: Timer16UsEcho_DisableInt
                                        (0110) ;
                                        (0111) ;  DESCRIPTION:
                                        (0112) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0113) ;     mask bit associated with this User Module.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS: 
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  Timer16UsEcho_DisableInt:
                                        (0126) _Timer16UsEcho_DisableInt:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    Timer16UsEcho_DisableInt_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
03AF: 7F       RET                      (0130)    ret
03B0: 43 2B 01 OR    REG[0x2B],0x1      
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) 
                                        (0135) .SECTION
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  FUNCTION NAME: Timer16UsEcho_Start
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;     Sets the start bit in the Control register of this user module.  The
                                        (0141) ;     timer will begin counting on the next input clock.
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:    None
                                        (0145) ;  RETURNS:      Nothing
                                        (0146) ;  SIDE EFFECTS: 
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  Timer16UsEcho_Start:
                                        (0154) _Timer16UsEcho_Start:
                                        (0155)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0156)    Timer16UsEcho_Start_M
                                        (0157)    RAM_EPILOGUE RAM_USE_CLASS_1
03B3: 7F       RET                      (0158)    ret
03B4: 41 2B FE AND   REG[0x2B],0xFE     
                                        (0159) 
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: Timer16UsEcho_Stop
                                        (0166) ;
                                        (0167) ;  DESCRIPTION:
                                        (0168) ;     Disables timer operation by clearing the start bit in the Control
                                        (0169) ;     register of the LSB block.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    None
                                        (0173) ;  RETURNS:      Nothing
                                        (0174) ;  SIDE EFFECTS: 
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  Timer16UsEcho_Stop:
                                        (0182) _Timer16UsEcho_Stop:
                                        (0183)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0184)    Timer16UsEcho_Stop_M
                                        (0185)    RAM_EPILOGUE RAM_USE_CLASS_1
03B7: 7F       RET                      (0186)    ret
                                        (0187) 
                                        (0188) .ENDSECTION
                                        (0189) 
                                        (0190) 
                                        (0191) .SECTION
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  FUNCTION NAME: Timer16UsEcho_WritePeriod
                                        (0194) ;
                                        (0195) ;  DESCRIPTION:
                                        (0196) ;     Write the 16-bit period value into the Period register (DR1). If the
                                        (0197) ;     Timer user module is stopped, then this value will also be latched
                                        (0198) ;     into the Count register (DR0).
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;
                                        (0201) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0202) ;  RETURNS:   Nothing
                                        (0203) ;  SIDE EFFECTS:
                                        (0204) ;    The A and X registers may be modified by this or future implementations
                                        (0205) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0206) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0207) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0208) ;    functions.
                                        (0209) ;
                                        (0210)  Timer16UsEcho_WritePeriod:
                                        (0211) _Timer16UsEcho_WritePeriod:
                                        (0212)    RAM_PROLOGUE RAM_USE_CLASS_1
03B8: 60 29    MOV   REG[0x29],A        (0213)    mov   reg[Timer16UsEcho_PERIOD_LSB_REG], A
03BA: 5B       MOV   A,X                (0214)    mov   A, X
03BB: 60 2D    MOV   REG[0x2D],A        (0215)    mov   reg[Timer16UsEcho_PERIOD_MSB_REG], A
                                        (0216)    RAM_EPILOGUE RAM_USE_CLASS_1
03BD: 7F       RET                      (0217)    ret
                                        (0218) 
                                        (0219) .ENDSECTION
                                        (0220) 
                                        (0221) 
                                        (0222) .SECTION
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;  FUNCTION NAME: Timer16UsEcho_WriteCompareValue
                                        (0225) ;
                                        (0226) ;  DESCRIPTION:
                                        (0227) ;     Writes compare value into the Compare register (DR2).
                                        (0228) ;
                                        (0229) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0230) ;           Compare register. (Call Timer16UsEcho_Stop to disable).
                                        (0231) ;-----------------------------------------------------------------------------
                                        (0232) ;
                                        (0233) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0234) ;  RETURNS:      Nothing
                                        (0235) ;  SIDE EFFECTS: 
                                        (0236) ;    The A and X registers may be modified by this or future implementations
                                        (0237) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0238) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0239) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0240) ;    functions.
                                        (0241) ;
                                        (0242)  Timer16UsEcho_WriteCompareValue:
                                        (0243) _Timer16UsEcho_WriteCompareValue:
                                        (0244)    RAM_PROLOGUE RAM_USE_CLASS_1
03BE: 60 2A    MOV   REG[0x2A],A        (0245)    mov   reg[Timer16UsEcho_COMPARE_LSB_REG], A
03C0: 5B       MOV   A,X                (0246)    mov   A, X
03C1: 60 2E    MOV   REG[0x2E],A        (0247)    mov   reg[Timer16UsEcho_COMPARE_MSB_REG], A
                                        (0248)    RAM_EPILOGUE RAM_USE_CLASS_1
03C3: 7F       RET                      (0249)    ret
                                        (0250) 
                                        (0251) .ENDSECTION
                                        (0252) 
                                        (0253) 
                                        (0254) .SECTION
                                        (0255) ;-----------------------------------------------------------------------------
                                        (0256) ;  FUNCTION NAME: Timer16UsEcho_wReadCompareValue
                                        (0257) ;
                                        (0258) ;  DESCRIPTION:
                                        (0259) ;     Reads the Compare registers.
                                        (0260) ;-----------------------------------------------------------------------------
                                        (0261) ;
                                        (0262) ;  ARGUMENTS:    None
                                        (0263) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0264) ;  SIDE EFFECTS: 
                                        (0265) ;    The A and X registers may be modified by this or future implementations
                                        (0266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0269) ;    functions.
                                        (0270) ;
                                        (0271)  Timer16UsEcho_wReadCompareValue:
                                        (0272) _Timer16UsEcho_wReadCompareValue:
                                        (0273)  wTimer16UsEcho_ReadCompareValue:                ; this name deprecated
                                        (0274) _wTimer16UsEcho_ReadCompareValue:                ; this name deprecated
                                        (0275)    RAM_PROLOGUE RAM_USE_CLASS_1
03C4: 5D 2E    MOV   A,REG[0x2E]        (0276)    mov   A, reg[Timer16UsEcho_COMPARE_MSB_REG]
03C6: 5C       MOV   X,A                (0277)    mov   X, A
03C7: 5D 2A    MOV   A,REG[0x2A]        (0278)    mov   A, reg[Timer16UsEcho_COMPARE_LSB_REG]
                                        (0279)    RAM_EPILOGUE RAM_USE_CLASS_1
03C9: 7F       RET                      (0280)    ret
                                        (0281) 
                                        (0282) .ENDSECTION
                                        (0283) 
                                        (0284) 
                                        (0285) .SECTION
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;  FUNCTION NAME: Timer16UsEcho_wReadTimerSaveCV
                                        (0288) ;
                                        (0289) ;  DESCRIPTION:
                                        (0290) ;     Returns the value in the Count register (DR0), preserving the
                                        (0291) ;     value in the compare register (DR2).
                                        (0292) ;-----------------------------------------------------------------------------
                                        (0293) ;
                                        (0294) ;  ARGUMENTS: None
                                        (0295) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0296) ;  SIDE EFFECTS:
                                        (0297) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0298) ;     2) If enabled, Global interrupts are momentarily disabled.
                                        (0299) ;     3) The user module is stopped momentarily while the compare value is
                                        (0300) ;        restored.  This may cause the Count register to miss one or more
                                        (0301) ;        counts depending on the input clock speed.
                                        (0302) ;     4) The A and X registers may be modified by this or future implementations
                                        (0303) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0304) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0305) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0306) ;        functions.
                                        (0307) ;
                                        (0308) ;  THEORY of OPERATION:
                                        (0309) ;     1) Read and save the Compare register.
                                        (0310) ;     2) Read the Count register, causing its data to be latched into
                                        (0311) ;        the Compare register.
                                        (0312) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0313) ;        to the buffer.
                                        (0314) ;     4) Disable global interrupts
                                        (0315) ;     5) Halt the timer
                                        (0316) ;     6) Restore the Compare register values
                                        (0317) ;     7) Start the Timer again
                                        (0318) ;     8) Restore global interrupt state
                                        (0319) ;
                                        (0320)  Timer16UsEcho_wReadTimerSaveCV:
                                        (0321) _Timer16UsEcho_wReadTimerSaveCV:
                                        (0322)  wTimer16UsEcho_ReadTimerSaveCV:                 ; this name deprecated
                                        (0323) _wTimer16UsEcho_ReadTimerSaveCV:                 ; this name deprecated
                                        (0324)  wTimer16UsEcho_ReadCounter:                     ; this name deprecated
                                        (0325) _wTimer16UsEcho_ReadCounter:                     ; this name deprecated
                                        (0326) 
                                        (0327) CpuFlags:      equ   0
                                        (0328) wCount_MSB:    equ   1
                                        (0329) wCount_LSB:    equ   2
                                        (0330) 
                                        (0331)    RAM_PROLOGUE RAM_USE_CLASS_2
03CA: 4F       MOV   X,SP               (0332)    mov   X, SP                                   ; X <- stack frame pointer
03CB: 38 03    ADD   SP,0x3             (0333)    add   SP, 3                                   ; Reserve space for flags, count
03CD: 5D 2B    MOV   A,REG[0x2B]        (0334)    mov   A, reg[Timer16UsEcho_CONTROL_LSB_REG]   ; save the Control register
03CF: 08       PUSH  A                  (0335)    push  A
03D0: 5D 2A    MOV   A,REG[0x2A]        (0336)    mov   A, reg[Timer16UsEcho_COMPARE_LSB_REG]   ; save the Compare register
03D2: 08       PUSH  A                  (0337)    push  A
03D3: 5D 2E    MOV   A,REG[0x2E]        (0338)    mov   A, reg[Timer16UsEcho_COMPARE_MSB_REG]
03D5: 08       PUSH  A                  (0339)    push  A
03D6: 5D 28    MOV   A,REG[0x28]        (0340)    mov   A, reg[Timer16UsEcho_COUNTER_LSB_REG]   ; synchronous copy DR2 <- DR0
                                        (0341)                                                  ; This may cause an interrupt!
03D8: 5D 2E    MOV   A,REG[0x2E]        (0342)    mov   A, reg[Timer16UsEcho_COMPARE_MSB_REG]   ; Now grab DR2 (DR0) and save
03DA: 54 01    MOV   [X+1],A            (0343)    mov   [X+wCount_MSB], A
03DC: 5D 2A    MOV   A,REG[0x2A]        (0344)    mov   A, reg[Timer16UsEcho_COMPARE_LSB_REG]
03DE: 54 02    MOV   [X+2],A            (0345)    mov   [X+wCount_LSB], A
03E0: 50 00    MOV   A,0x0              (0346)    mov   A, 0                                    ; Guess the global interrupt state
03E2: 49 F7 01 TST   REG[0xF7],0x1      (0347)    tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
03E5: A0 03    JZ    0x03E9             (0348)    jz    .SetupStatusFlag                        ;   Yes, guess was correct
03E7: 50 01    MOV   A,0x1              (0349)    mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
                                        (0350) .SetupStatusFlag:                                ; and ...
03E9: 54 00    MOV   [X+0],A            (0351)    mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
03EB: 70 FE    AND   F,0xFE             
03ED: 41 2B FE AND   REG[0x2B],0xFE     
                                        (0352)    M8C_DisableGInt                               ; Disable interrupts globally
                                        (0353)    Timer16UsEcho_Stop_M                          ; Disable (stop) the timer
03F0: 18       POP   A                  (0354)    pop   A                                       ; Restore the Compare register
03F1: 60 2E    MOV   REG[0x2E],A        (0355)    mov   reg[Timer16UsEcho_COMPARE_MSB_REG], A
03F3: 18       POP   A                  (0356)    pop   A
03F4: 60 2A    MOV   REG[0x2A],A        (0357)    mov   reg[Timer16UsEcho_COMPARE_LSB_REG], A
03F6: 18       POP   A                  (0358)    pop   A                                       ; restore start state of the timer
03F7: 60 2B    MOV   REG[0x2B],A        (0359)    mov   reg[Timer16UsEcho_CONTROL_LSB_REG], A
03F9: 18       POP   A                  (0360)    pop   A                                       ; Return result stored in stack frame
03FA: 20       POP   X                  (0361)    pop   X
                                        (0362)    RAM_EPILOGUE RAM_USE_CLASS_2
03FB: 7E       RETI                     (0363)    reti                                          ; Flag Reg <- StackFrame[0]
                                        (0364) 
                                        (0365) .ENDSECTION
                                        (0366) 
                                        (0367) 
                                        (0368) .SECTION
                                        (0369) ;-----------------------------------------------------------------------------
                                        (0370) ;  FUNCTION NAME: Timer16UsEcho_wReadTimer
                                        (0371) ;
                                        (0372) ;  DESCRIPTION:
                                        (0373) ;     Performs a software capture of the Count register.  A synchronous
                                        (0374) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0375) ;
                                        (0376) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0377) ;-----------------------------------------------------------------------------
                                        (0378) ;
                                        (0379) ;  ARGUMENTS:    None
                                        (0380) ;  RETURNS:      fastcall16 WORD wCount, (value of DR0 in the X & A registers)
                                        (0381) ;  SIDE EFFECTS:
                                        (0382) ;    May cause an interrupt.
                                        (0383) ;
                                        (0384) ;    The A and X registers may be modified by this or future implementations
                                        (0385) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0386) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0387) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0388) ;    functions.
                                        (0389) ;
                                        (0390) ;  THEORY of OPERATION:
                                        (0391) ;     1) Read the Count register - this causes the count value to be
                                        (0392) ;        latched into the Compare registers.
                                        (0393) ;     2) Read and return the Count register values from the Compare
                                        (0394) ;        registers into the return buffer.
                                        (0395) ;
                                        (0396)  Timer16UsEcho_wReadTimer:
                                        (0397) _Timer16UsEcho_wReadTimer:
                                        (0398)  wTimer16UsEcho_ReadTimer:                       ; this name deprecated
                                        (0399) _wTimer16UsEcho_ReadTimer:                       ; this name deprecated
                                        (0400)  wTimer16UsEcho_CaptureCounter:                  ; this name deprecated
                                        (0401) _wTimer16UsEcho_CaptureCounter:                  ; this name deprecated
                                        (0402) 
                                        (0403)    RAM_PROLOGUE RAM_USE_CLASS_1
03FC: 5D 28    MOV   A,REG[0x28]        (0404)    mov   A, reg[Timer16UsEcho_COUNTER_LSB_REG]   ; synchronous copy DR2 <- DR0
                                        (0405)                                                  ; This may cause an interrupt!
                                        (0406) 
03FE: 5D 2E    MOV   A,REG[0x2E]        (0407)    mov   A, reg[Timer16UsEcho_COMPARE_MSB_REG]   ; Return DR2 (actually DR0)
0400: 5C       MOV   X,A                (0408)    mov   X, A
0401: 5D 2A    MOV   A,REG[0x2A]        (0409)    mov   A, reg[Timer16UsEcho_COMPARE_LSB_REG]
                                        (0410)    RAM_EPILOGUE RAM_USE_CLASS_1
0403: 7F       RET                      (0411)    ret
                                        (0412) 
                                        (0413) .ENDSECTION
                                        (0414) 
                                        (0415) ; End of File Timer16UsEcho.asm
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2013/5/19 at 10:43:48
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
0404: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
0405: 10       PUSH  X                  (0209)     push  X
0406: 28       ROMX                     (0210)     romx                               ; Get character from ROM
0407: B0 04    JNZ   0x040C             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
0409: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
040A: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
040B: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
040C: 90 3C    CALL  LCD_WriteData|LCD_Write_Data|_LCD_WriteData|_LCD_Write_Data(0218)     call  LCD_WriteData                ; Write data to LCD
040E: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
040F: 18       POP   A                  (0220)     pop   A
0410: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
0411: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
0413: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
0414: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
0426: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
0427: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
0428: 67       ASR   A                  (0262)     asr   A
0429: 67       ASR   A                  (0263)     asr   A
042A: 67       ASR   A                  (0264)     asr   A
042B: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
042D: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
042F: 90 19    CALL  LCD_WriteData|LCD_Write_Data|_LCD_WriteData|_LCD_Write_Data(0267)     call  LCD_WriteData                ; Write data to screen
0431: 18       POP   A                  (0268)     pop   A                            ; Restore value
0432: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
0434: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
0436: 90 12    CALL  LCD_WriteData|LCD_Write_Data|_LCD_WriteData|_LCD_Write_Data(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
0438: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
0439: 4B       SWAP  A,X                (0305)     swap  A,X
043A: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
043C: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
043D: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
043F: 7F       RET                      (0310)     ret
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
0440: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
0442: A0 06    JZ    0x0449             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
0444: 90 04    CALL  LCD_WriteData|LCD_Write_Data|_LCD_WriteData|_LCD_Write_Data(0349)     call  LCD_WriteData                ; Write data to screen
0446: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
0447: 8F F8    JMP   _LCD_PrString      (0351)     jmp   .Loop_PrString               ; Go get next character
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
0449: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
044A: 90 5F    CALL  0x04AB             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
044C: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
044D: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
044E: 67       ASR   A                  (0390)     asr   A
044F: 67       ASR   A                  (0391)     asr   A
0450: 67       ASR   A                  (0392)     asr   A
0451: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
0453: 90 38    CALL  0x048D             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
0455: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
0456: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
0458: 40       NOP                      (0397)     nop
0459: 40       NOP                      (0398)     nop
045A: 40       NOP                      (0399)     nop
045B: 90 30    CALL  0x048D             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
045D: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
045E: 90 4B    CALL  0x04AB             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
0460: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
0461: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
0462: 67       ASR   A                  (0436)     asr   A
0463: 67       ASR   A                  (0437)     asr   A
0464: 67       ASR   A                  (0438)     asr   A
0465: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
0467: 90 09    CALL  0x0472             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
0469: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
046A: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
046C: 40       NOP                      (0443)     nop
046D: 40       NOP                      (0444)     nop
046E: 40       NOP                      (0445)     nop
046F: 90 01    CALL  0x0472             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
0471: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
0472: 08       PUSH  A                  (0477)     push  A
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
0473: 26 33 80 AND   [0x33],0x80        (0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0476: 51 33    MOV   A,[0x33]           (0480)     mov   A,[Port_2_Data_SHADE]
0478: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
047A: 18       POP   A                  (0483)     pop   A
047B: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
047D: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
047F: 2A 33    OR    A,[0x33]           (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
0481: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
0483: 53 33    MOV   [0x33],A           (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0485: 40       NOP                      (0489)     nop
0486: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
0488: 53 33    MOV   [0x33],A           (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
048A: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
048C: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
048D: 08       PUSH  A                  (0523)     push  A
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
048E: 26 33 80 AND   [0x33],0x80        (0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0491: 2E 33 20 OR    [0x33],0x20        (0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
0494: 51 33    MOV   A,[0x33]           (0527)     mov   A,[Port_2_Data_SHADE]
0496: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
0498: 18       POP   A                  (0530)     pop   A
0499: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
049B: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
049D: 2A 33    OR    A,[0x33]           (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
049F: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
04A1: 53 33    MOV   [0x33],A           (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
04A3: 40       NOP                      (0536)     NOP
04A4: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
04A6: 53 33    MOV   [0x33],A           (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
04A8: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
04AA: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
04AB: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
04AC: 26 33 80 AND   [0x33],0x80        (0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
04AF: 51 33    MOV   A,[0x33]           (0574)     mov   A,[Port_2_Data_SHADE]
04B1: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
04B3: 26 34 F0 AND   [0x34],0xF0        (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
04B6: 51 34    MOV   A,[0x34]           (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
04B8: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
04BA: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
04BC: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
04BE: 2E 33 40 OR    [0x33],0x40        (0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
04C1: 51 33    MOV   A,[0x33]           (0584)     mov   A,[Port_2_Data_SHADE]
04C3: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
04C5: 40       NOP                      (0586)     NOP
                                        (0587) 
04C6: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
04C7: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
04C9: 2E 33 50 OR    [0x33],0x50        (0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
04CC: 51 33    MOV   A,[0x33]           (0593)     mov   A,[Port_2_Data_SHADE]
04CE: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
04D0: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
04D1: 40       NOP                      (0597)     nop
04D2: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
04D4: 08       PUSH  A                  (0610)     push  A
04D5: 26 33 C0 AND   [0x33],0xC0        (0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
04D8: 51 33    MOV   A,[0x33]           (0612)     mov   A,[Port_2_Data_SHADE]
04DA: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
04DC: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
04DD: 40       NOP                      (0616)     nop                                    ; fastest PSoC
04DE: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
04DF: 2E 33 50 OR    [0x33],0x50        (0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
04E2: 51 33    MOV   A,[0x33]           (0620)     mov   A,[Port_2_Data_SHADE]
04E4: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
04E6: 40       NOP                      (0623)     nop
04E7: 40       NOP                      (0624)     nop
                                        (0625) 
04E8: 26 33 C0 AND   [0x33],0xC0        (0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
04EB: 51 33    MOV   A,[0x33]           (0627)     mov   A,[Port_2_Data_SHADE]
04ED: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
04EF: 18       POP   A                  (0630)     pop   A
04F0: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
04F2: A0 04    JZ    0x04F7             (0633)     jz    .UNLOCK
04F4: 79       DEC   X                  (0634)     dec   X
04F5: BF D3    JNZ   0x04C9             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
04F7: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
04F8: 2E 34 7F OR    [0x34],0x7F        (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
04FB: 51 34    MOV   A,[0x34]           (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
04FD: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
04FF: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
0501: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
0503: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
0504: 7F       RET                      (0646)     ret
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
0505: 26 34 80 AND   [0x34],0x80        (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
0508: 2E 34 7F OR    [0x34],0x7F        (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
050B: 26 35 80 AND   [0x35],0x80        (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
050E: 51 34    MOV   A,[0x34]           (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
0510: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
0512: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
0514: 51 35    MOV   A,[0x35]           (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
0516: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
0518: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
051A: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
051C: 90 63    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
051E: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0520: 90 5F    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
0522: 50 03    MOV   A,0x3              (0701)     mov   A,03h
0524: 9F 4C    CALL  0x0472             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
0526: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
0528: 90 57    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
052A: 50 03    MOV   A,0x3              (0707)     mov   A,03h
052C: 9F 44    CALL  0x0472             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
052E: 90 5F    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
0530: 90 5D    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
0532: 90 5B    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
0534: 50 03    MOV   A,0x3              (0714)     mov   A,03h
0536: 9F 3A    CALL  0x0472             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
0538: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
053A: 90 45    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
053C: 50 02    MOV   A,0x2              (0720)     mov   A,02h
053E: 9F 32    CALL  0x0472             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
0540: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0542: 90 3D    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
0544: 50 08    MOV   A,0x8              (0726)     mov   A,08h
0546: 9F 16    CALL  _LCD_Control       (0727)     call  LCD_Control
0548: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
054A: 90 35    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
054C: 50 01    MOV   A,0x1              (0731)     mov   A,01h
054E: 9F 0E    CALL  _LCD_Control       (0732)     call  LCD_Control
0550: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0552: 90 2D    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
0554: 50 06    MOV   A,0x6              (0736)     mov   A,06h
0556: 9F 06    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
0558: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
055A: 9F 02    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
055C: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
055E: 9E FE    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
0560: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
0562: 9E FA    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
0564: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
0566: 9E F6    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
0568: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
056A: 9E F2    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
056C: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
056E: 90 11    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
0570: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
0575: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
0577: 10       PUSH  X                  (0791)     push  X                            ; Store COL
0578: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
057A: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
057B: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
057D: 20       POP   X                  (0795)     pop   X
                                        (0796) 
057E: 9E DE    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
0580: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
0581: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
0583: 78       DEC   A                  (0828)     dec   A
0584: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
0586: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
058F: 08       PUSH  A                  (0871)     push  A
0590: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
0592: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
0594: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
0596: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
0598: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
059A: D0 06    JNC   0x05A1             (0877)     jnc   .Delay50u_End
059C: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
059E: 78       DEC   A                  (0880)     dec   A                              ; [4]
059F: BF FE    JNZ   0x059E             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
05A1: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
05A2: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
05A3: 10       PUSH  X                  (0943)     push  X
05A4: 59 00    MOV   X,[X+0]            (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
05A6: 9F CD    CALL  _LCD_Position      (0945)     call  LCD_Position                 ; Set cursor position
05A8: 20       POP   X                  (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
05A9: 3D FE 00 CMP   [X-2],0x0          (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
05AC: B0 05    JNZ   0x05B2             (0950)     jnz   .LCD_CHECK1X
05AE: 50 00    MOV   A,0x0              (0951)     mov   A,00h                         ; Load empty character
05B0: 80 11    JMP   0x05C2             (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
05B2: 3D FE 06 CMP   [X-2],0x6          (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
05B5: D0 07    JNC   0x05BD             (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
05B7: 52 FE    MOV   A,[X-2]            (0957)     mov   A,[X+BG_LENGTHX]
05B9: 15 FE    SUB   [X-2],A            (0958)     sub   [X+BG_LENGTHX],A
05BB: 80 06    JMP   0x05C2             (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
05BD: 50 06    MOV   A,0x6              (0962)     mov   A, 06h
05BF: 17 FE 05 SUB   [X-2],0x5          (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
05C2: 9E 86    CALL  LCD_WriteData|LCD_Write_Data|_LCD_WriteData|_LCD_Write_Data(0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
05C4: 7B FF    DEC   [X-1]              (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
05C6: BF E2    JNZ   0x05A9             (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
05C8: 7F       RET                      (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
05C9: 4F       MOV   X,SP               (1015)     mov   X, SP
05CA: 10       PUSH  X                  (1016)     push  X
05CB: 52 FD    MOV   A,[X-3]            (1017)     mov   A,[X+BG_ROW]                 ; Row in A
05CD: 59 FC    MOV   X,[X-4]            (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
05CF: 9F A4    CALL  _LCD_Position      (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
05D1: 20       POP   X                  (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
05D2: 3D FA 00 CMP   [X-6],0x0          (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
05D5: B0 05    JNZ   0x05DB             (1026)     jnz   .LCD_CHECK1
05D7: 50 00    MOV   A,0x0              (1027)     mov   A,00h                        ; Load empty character
05D9: 80 11    JMP   0x05EB             (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
05DB: 3D FA 06 CMP   [X-6],0x6          (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
05DE: D0 07    JNC   0x05E6             (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
05E0: 52 FA    MOV   A,[X-6]            (1033)     mov   A,[X+BG_LENGTH]
05E2: 15 FA    SUB   [X-6],A            (1034)     sub   [X+BG_LENGTH],A
05E4: 80 06    JMP   0x05EB             (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
05E6: 50 06    MOV   A,0x6              (1038)     mov   A, 06h
05E8: 17 FA 05 SUB   [X-6],0x5          (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
05EB: 9E 5D    CALL  LCD_WriteData|LCD_Write_Data|_LCD_WriteData|_LCD_Write_Data(1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
05ED: 7B FB    DEC   [X-5]              (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
05EF: BF E2    JNZ   0x05D2             (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
05F1: 7F       RET                      (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
05F2: 21 03    AND   A,0x3              (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
05F4: 08       PUSH  A                  (1098)     push  A
05F5: FF 7A    INDEX LCD_ROW_OFFSET     (1099)     index LCD_ROW_OFFSET  ; Get row offset
05F7: 03 00    ADD   A,[X+0]            (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
05F9: 9E 63    CALL  _LCD_Control       (1101)     call  LCD_Control                  ; Position Cursor
05FB: 3D FE 00 CMP   [X-2],0x0          (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
05FE: B0 05    JNZ   0x0604             (1103)     jnz   .VBG_NZ_SEGX
0600: 50 20    MOV   A,0x20             (1104)     mov   A,' '                        ; Load space character
0602: 80 13    JMP   0x0616             (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
0604: 3D FE 09 CMP   [X-2],0x9          (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
0607: D0 09    JNC   0x0611             (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
0609: 52 FE    MOV   A,[X-2]            (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
060B: 78       DEC   A                  (1111)     dec   A
060C: 56 FE 00 MOV   [X-2],0x0          (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
060F: 80 06    JMP   0x0616             (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
0611: 17 FE 08 SUB   [X-2],0x8          (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
0614: 50 07    MOV   A,0x7              (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
0616: 9E 32    CALL  LCD_WriteData|LCD_Write_Data|_LCD_WriteData|_LCD_Write_Data(1120)     call  LCD_WriteData                ; Write value
0618: 18       POP   A                  (1121)     pop   A
0619: 78       DEC   A                  (1122)     dec   A
061A: 7B FF    DEC   [X-1]              (1123)     dec   [X+VBG_CHAR_HEIGHTX]
061C: BF D7    JNZ   0x05F4             (1124)     jnz   .VBG_LOOPX
061E: 7F       RET                      (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
061F: 4F       MOV   X,SP               (1168)     mov   X, SP
0620: 52 FD    MOV   A,[X-3]            (1169)     mov   A, [X+VBG_ROW]
0622: 21 03    AND   A,0x3              (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
0624: 08       PUSH  A                  (1172)     push  A
0625: FF 4A    INDEX LCD_ROW_OFFSET     (1173)     index LCD_ROW_OFFSET  ; Get row offset
0627: 03 FC    ADD   A,[X-4]            (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
0629: 9E 33    CALL  _LCD_Control       (1175)     call  LCD_Control                  ; Position Cursor
062B: 3D FA 00 CMP   [X-6],0x0          (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
062E: B0 05    JNZ   0x0634             (1177)     jnz   .VBG_NZ_SEG
0630: 50 20    MOV   A,0x20             (1178)     mov   A,' '                        ; Load space character
0632: 80 13    JMP   0x0646             (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
0634: 3D FA 09 CMP   [X-6],0x9          (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
0637: D0 09    JNC   0x0641             (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
0639: 52 FA    MOV   A,[X-6]            (1184)     mov   A,[X+VBG_SEG_HEIGHT]
063B: 78       DEC   A                  (1185)     dec   A
063C: 56 FA 00 MOV   [X-6],0x0          (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
063F: 80 06    JMP   0x0646             (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
0641: 17 FA 08 SUB   [X-6],0x8          (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
0644: 50 07    MOV   A,0x7              (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
0646: 9E 02    CALL  LCD_WriteData|LCD_Write_Data|_LCD_WriteData|_LCD_Write_Data(1194)     call  LCD_WriteData                ; Write value
0648: 18       POP   A                  (1195)     pop   A
0649: 78       DEC   A                  (1196)     dec   A
064A: 7B FB    DEC   [X-5]              (1197)     dec   [X+VBG_CHAR_HEIGHT]
064C: BF D7    JNZ   0x0624             (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
064E: 7F       RET                      (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
064F: 4F       MOV   X,SP               (1238)     mov   X,SP                         ; Get location of stack
0650: 08       PUSH  A                  (1239)     push  A                            ; Create 2 locations
0651: 08       PUSH  A                  (1240)     push  A
                                        (1241) 
0652: 50 40    MOV   A,0x40             (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
0654: 9E 08    CALL  _LCD_Control       (1243)     call  LCD_Control                  ; Position the CG pointer
0656: 56 00 01 MOV   [X+0],0x1          (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
0659: 56 01 08 MOV   [X+1],0x8          (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
065C: 52 00    MOV   A,[X+0]            (1249)     mov   A,[X+VBGDATA_CTR]
065E: 3B 01    CMP   A,[X+1]            (1250)     cmp   A,[X+VBG_BYTES]
0660: D0 05    JNC   0x0666             (1251)     jnc   .VBG_SOLID
0662: 50 00    MOV   A,0x0              (1252)     mov   A,00h                        ; Empty line
0664: 80 03    JMP   0x0668             (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
0666: 50 FF    MOV   A,0xFF             (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
0668: 9D E0    CALL  LCD_WriteData|LCD_Write_Data|_LCD_WriteData|_LCD_Write_Data(1257)     call  LCD_WriteData                ; character data
066A: 7B 01    DEC   [X+1]              (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
066C: BF EF    JNZ   0x065C             (1259)     jnz   .VBG_Loop2                    ; End Loop 2
066E: 77 00    INC   [X+0]              (1260)     inc   [X+VBGDATA_CTR]
0670: 3D 00 09 CMP   [X+0],0x9          (1261)     cmp   [X+VBGDATA_CTR],09h
0673: BF E5    JNZ   0x0659             (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
0675: 18       POP   A                  (1264)     pop  A
0676: 18       POP   A                  (1265)     pop  A
0677: 50 0C    MOV   A,0xC              (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
0679: 9D E3    CALL  _LCD_Control       (1267)     call LCD_Control                   ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
067B: 7F       RET                      (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
068A: 4F       MOV   X,SP               (1319)     mov   X,SP                         ; Get location of stack
068B: 38 03    ADD   SP,0x3             (1320)     add   SP,3
068D: 54 02    MOV   [X+2],A            (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
068F: 50 40    MOV   A,0x40             (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
0691: 9D CB    CALL  _LCD_Control       (1324)     call  LCD_Control                  ; Position the CG pointer
0693: 56 00 00 MOV   [X+0],0x0          (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
0696: 56 01 08 MOV   [X+1],0x8          (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
0699: 52 00    MOV   A,[X+0]            (1330)     mov   A,[X+BGDATA_PTR]
069B: 3D 02 00 CMP   [X+2],0x0          (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
069E: B0 05    JNZ   0x06A4             (1332)     jnz   .BG_OTHER
06A0: FF DA    INDEX LCD_BG_TYPE1       (1333)     index LCD_BG_TYPE1
06A2: 80 03    JMP   0x06A6             (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
06A4: FF DD    INDEX LCD_BG_TYPE2       (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
06A6: 9D A2    CALL  LCD_WriteData|LCD_Write_Data|_LCD_WriteData|_LCD_Write_Data(1338)     call  LCD_WriteData
06A8: 7B 01    DEC   [X+1]              (1339)     dec   [X+BGCHARS]                  ; Character builder counter
06AA: BF EE    JNZ   0x0699             (1340)     jnz   .BG_Loop2
06AC: 77 00    INC   [X+0]              (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
06AE: 3D 00 07 CMP   [X+0],0x7          (1342)     cmp   [X+BGDATA_PTR],07h
06B1: BF E4    JNZ   0x0696             (1343)     jnz   .BG_Loop1
                                        (1344) 
06B3: 38 FD    ADD   SP,0xFD            (1345)     add   SP,-3
06B5: 50 0C    MOV   A,0xC              (1346)     mov   A,LCD_DISP_ON
06B7: 9D A5    CALL  _LCD_Control       (1347)     call  LCD_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
06B9: 7F       RET                      (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: C:\Users\JohnEdwa\Desktop\RawBot\RawBot\main.c
(0001) /*************
(0002) *  Includes  *
(0003) *************/
(0004) 
(0005) #include <m8c.h>
(0006) #include <stdlib.h>
(0007) #include <stdbool.h>
(0008) #include "PSoCAPI.h"
(0009) #include "LCD.h"
(0010) #include "Timer8Main.h"
(0011) #include "Timer8UsTrig.h"
(0012) #include "Timer16UsEcho.h"
(0013) 
(0014) /************************
(0015) * Function declarations *
(0016) *************************/
(0017) 
(0018) void setup(void);
(0019) void usTrigSend(void);
(0020) void drive(BYTE);
(0021) void digitalWrite(BYTE, BYTE, BYTE);
(0022) void pinMode(BYTE, BYTE, BYTE);
(0023) 
(0024) /**************************
(0025) *  Variable declarations  *
(0026) **************************/
(0027) 
(0028) bool timer8MainTick = false;
(0029) unsigned int timer8MainCount = 0;
(0030) bool gpioTick = false;
(0031) char lcdBuffer[1][16] = { 0 };
(0032) unsigned long usRawTimerValue = 0;
(0033) unsigned int usDistance = 0;
(0034) unsigned int lcdUpdate = 0;
(0035) 
(0036) int start = 0;
(0037) int stop = 0;
(0038) int isrclear = 0;
(0039) /***********************
(0040) *  Interrupt handlers  *
(0041) ***********************/
(0042) 
(0043) #pragma interrupt_handler Timer8Main_ISR
(0044) void Timer8Main_ISR(void) {
__UserModules_end|_Timer8Main_ISR|__text_start|_Timer8Main_ISR:
    06BA: 08       PUSH  A
(0045) 	timer8MainTick = true;
    06BB: 55 01 01 MOV   [timer8MainTick+1],0x1
    06BE: 55 00 00 MOV   [timer8MainTick],0x0
(0046) 	timer8MainCount++;
    06C1: 76 03    INC   [timer8MainCount+1]
    06C3: 0E 02 00 ADC   [timer8MainCount],0x0
    06C6: 18       POP   A
    06C7: 7E       RETI  
(0047) }
(0048) 
(0049) #pragma interrupt_handler Timer8UsTrig_ISR
(0050) void Timer8UsTrig_ISR(void) {
_Timer8UsTrig_ISR:
    06C8: 08       PUSH  A
    06C9: 51 32    MOV   A,[__r0]
    06CB: 08       PUSH  A
    06CC: 51 31    MOV   A,[__r1]
    06CE: 08       PUSH  A
    06CF: 51 30    MOV   A,[__r2]
    06D1: 08       PUSH  A
    06D2: 51 2F    MOV   A,[__r3]
    06D4: 08       PUSH  A
    06D5: 51 2E    MOV   A,[__r4]
    06D7: 08       PUSH  A
    06D8: 51 2D    MOV   A,[__r5]
    06DA: 08       PUSH  A
    06DB: 51 2C    MOV   A,[__r6]
    06DD: 08       PUSH  A
    06DE: 51 2B    MOV   A,[__r7]
    06E0: 08       PUSH  A
    06E1: 51 2A    MOV   A,[__r8]
    06E3: 08       PUSH  A
    06E4: 51 29    MOV   A,[__r9]
    06E6: 08       PUSH  A
    06E7: 51 28    MOV   A,[__r10]
    06E9: 08       PUSH  A
    06EA: 51 27    MOV   A,[__r11]
    06EC: 08       PUSH  A
    06ED: 51 26    MOV   A,[__rX]
    06EF: 08       PUSH  A
    06F0: 51 25    MOV   A,[__rY]
    06F2: 08       PUSH  A
    06F3: 51 24    MOV   A,[__rZ]
    06F5: 08       PUSH  A
(0051) 	digitalWrite(0, 4, 0); // Stop the trigger signal
    06F6: 50 00    MOV   A,0x0
    06F8: 08       PUSH  A
    06F9: 50 04    MOV   A,0x4
    06FB: 08       PUSH  A
    06FC: 50 00    MOV   A,0x0
    06FE: 08       PUSH  A
    06FF: 94 E1    CALL  _digitalWrite
    0701: 38 FD    ADD   SP,0xFD
(0052) 	Timer8UsTrig_Stop();
    0703: 10       PUSH  X
    0704: 7C 03 2A LCALL _Timer8UsTrig_Stop
    0707: 20       POP   X
    0708: 18       POP   A
    0709: 53 24    MOV   [__rZ],A
    070B: 18       POP   A
    070C: 53 25    MOV   [__rY],A
    070E: 18       POP   A
    070F: 53 26    MOV   [__rX],A
    0711: 18       POP   A
    0712: 53 27    MOV   [__r11],A
    0714: 18       POP   A
    0715: 53 28    MOV   [__r10],A
    0717: 18       POP   A
    0718: 53 29    MOV   [__r9],A
    071A: 18       POP   A
    071B: 53 2A    MOV   [__r8],A
    071D: 18       POP   A
    071E: 53 2B    MOV   [__r7],A
    0720: 18       POP   A
    0721: 53 2C    MOV   [__r6],A
    0723: 18       POP   A
    0724: 53 2D    MOV   [__r5],A
    0726: 18       POP   A
    0727: 53 2E    MOV   [__r4],A
    0729: 18       POP   A
    072A: 53 2F    MOV   [__r3],A
    072C: 18       POP   A
    072D: 53 30    MOV   [__r2],A
    072F: 18       POP   A
    0730: 53 31    MOV   [__r1],A
    0732: 18       POP   A
    0733: 53 32    MOV   [__r0],A
    0735: 18       POP   A
    0736: 7E       RETI  
(0053) }
(0054) 
(0055) #pragma interrupt_handler Timer16UsEcho_ISR
(0056) void Timer16UsEcho_ISR(void) {
_Timer16UsEcho_ISR:
    0737: 08       PUSH  A
(0057) 	start = 9999;
    0738: 55 1F 0F MOV   [start+1],0xF
    073B: 55 1E 27 MOV   [start],0x27
    073E: 18       POP   A
    073F: 7E       RETI  
(0058) }
(0059) 
(0060) #pragma interrupt_handler GPIO_ISR
(0061) void GPIO_ISR(void) {
_GPIO_ISR:
    0740: 08       PUSH  A
    0741: 51 32    MOV   A,[__r0]
    0743: 08       PUSH  A
    0744: 51 31    MOV   A,[__r1]
    0746: 08       PUSH  A
    0747: 51 30    MOV   A,[__r2]
    0749: 08       PUSH  A
    074A: 51 2F    MOV   A,[__r3]
    074C: 08       PUSH  A
    074D: 51 2E    MOV   A,[__r4]
    074F: 08       PUSH  A
    0750: 51 2D    MOV   A,[__r5]
    0752: 08       PUSH  A
    0753: 51 2C    MOV   A,[__r6]
    0755: 08       PUSH  A
    0756: 51 2B    MOV   A,[__r7]
    0758: 08       PUSH  A
    0759: 51 2A    MOV   A,[__r8]
    075B: 08       PUSH  A
    075C: 51 29    MOV   A,[__r9]
    075E: 08       PUSH  A
    075F: 51 28    MOV   A,[__r10]
    0761: 08       PUSH  A
    0762: 51 27    MOV   A,[__r11]
    0764: 08       PUSH  A
    0765: 51 26    MOV   A,[__rX]
    0767: 08       PUSH  A
    0768: 51 25    MOV   A,[__rY]
    076A: 08       PUSH  A
    076B: 51 24    MOV   A,[__rZ]
    076D: 08       PUSH  A
(0062) 	//digitalWrite(1,0,1);
(0063) 	if (US_ECHO_Data_ADDR & US_ECHO_MASK)
    076E: 5D 04    MOV   A,REG[0x4]
    0770: 53 32    MOV   [__r0],A
    0772: 47 32 80 TST   [__r0],0x80
    0775: A0 14    JZ    0x078A
(0064) 	{
(0065) 		Timer16UsEcho_WritePeriod(46400);
    0777: 10       PUSH  X
    0778: 57 B5    MOV   X,0xB5
    077A: 50 40    MOV   A,0x40
    077C: 7C 03 B8 LCALL _Timer16UsEcho_WritePeriod
(0066) 		Timer16UsEcho_Start(); // Used to measure time until echo signal is returned 
    077F: 7C 03 B0 LCALL _Timer16UsEcho_Start
    0782: 20       POP   X
(0067) 		start++;
    0783: 76 1F    INC   [start+1]
    0785: 0E 1E 00 ADC   [start],0x0
(0068) 	}
    0788: 80 3A    JMP   0x07C3
(0069) 	else
(0070) 	{
(0071) 		usRawTimerValue = Timer16UsEcho_wReadTimer();
    078A: 10       PUSH  X
    078B: 7C 03 FC LCALL _wTimer16UsEcho_ReadTimer|_wTimer16UsEcho_CaptureCounter|_Timer16UsEcho_wReadTimer|Timer16UsEcho_wReadTimer|wTimer16UsEcho_ReadTimer|wTimer16UsEcho_CaptureCounter
    078E: 5A 32    MOV   [__r0],X
    0790: 20       POP   X
    0791: 53 19    MOV   [usRawTimerValue+3],A
    0793: 5F 18 32 MOV   [usRawTimerValue+2],[__r0]
    0796: 55 17 00 MOV   [usRawTimerValue+1],0x0
    0799: 55 16 00 MOV   [usRawTimerValue],0x0
(0072) 		Timer16UsEcho_Stop();
    079C: 10       PUSH  X
    079D: 7C 03 B4 LCALL _Timer16UsEcho_Stop
    07A0: 20       POP   X
(0073) 		ltoa(lcdBuffer[0], usRawTimerValue, 10);
    07A1: 50 00    MOV   A,0x0
    07A3: 08       PUSH  A
    07A4: 50 0A    MOV   A,0xA
    07A6: 08       PUSH  A
    07A7: 51 16    MOV   A,[usRawTimerValue]
    07A9: 08       PUSH  A
    07AA: 51 17    MOV   A,[usRawTimerValue+1]
    07AC: 08       PUSH  A
    07AD: 51 18    MOV   A,[usRawTimerValue+2]
    07AF: 08       PUSH  A
    07B0: 51 19    MOV   A,[usRawTimerValue+3]
    07B2: 08       PUSH  A
    07B3: 50 00    MOV   A,0x0
    07B5: 08       PUSH  A
    07B6: 50 06    MOV   A,0x6
    07B8: 08       PUSH  A
    07B9: 7C 0F 35 LCALL _ltoa
    07BC: 38 F8    ADD   SP,0xF8
(0074) 		stop++;
    07BE: 76 21    INC   [stop+1]
    07C0: 0E 20 00 ADC   [stop],0x0
(0075) 	}
(0076) 	gpioTick = true;
    07C3: 55 05 01 MOV   [gpioTick+1],0x1
    07C6: 55 04 00 MOV   [gpioTick],0x0
(0077) 	isrclear = PRT1DR;
    07C9: 5D 04    MOV   A,REG[0x4]
    07CB: 53 23    MOV   [isrclear+1],A
    07CD: 55 22 00 MOV   [isrclear],0x0
    07D0: 18       POP   A
    07D1: 53 24    MOV   [__rZ],A
    07D3: 18       POP   A
    07D4: 53 25    MOV   [__rY],A
    07D6: 18       POP   A
    07D7: 53 26    MOV   [__rX],A
    07D9: 18       POP   A
    07DA: 53 27    MOV   [__r11],A
    07DC: 18       POP   A
    07DD: 53 28    MOV   [__r10],A
    07DF: 18       POP   A
    07E0: 53 29    MOV   [__r9],A
    07E2: 18       POP   A
    07E3: 53 2A    MOV   [__r8],A
    07E5: 18       POP   A
    07E6: 53 2B    MOV   [__r7],A
    07E8: 18       POP   A
    07E9: 53 2C    MOV   [__r6],A
    07EB: 18       POP   A
    07EC: 53 2D    MOV   [__r5],A
    07EE: 18       POP   A
    07EF: 53 2E    MOV   [__r4],A
    07F1: 18       POP   A
    07F2: 53 2F    MOV   [__r3],A
    07F4: 18       POP   A
    07F5: 53 30    MOV   [__r2],A
    07F7: 18       POP   A
    07F8: 53 31    MOV   [__r1],A
    07FA: 18       POP   A
    07FB: 53 32    MOV   [__r0],A
    07FD: 18       POP   A
    07FE: 7E       RETI  
(0078) }
(0079) 
(0080) /******************
(0081) *  Main function  *
(0082) ******************/
(0083) 
(0084) void main(void) {
(0085) 	setup();
_main:
    07FF: 91 40    CALL  _setup
    0801: 81 3B    JMP   0x093D
(0086) 
(0087) 	while(1) {
(0088) 		if(gpioTick) {
    0803: 3C 04 00 CMP   [gpioTick],0x0
    0806: B0 06    JNZ   0x080D
    0808: 3C 05 00 CMP   [gpioTick+1],0x0
    080B: A0 07    JZ    0x0813
(0089) 			gpioTick = false;
    080D: 55 05 00 MOV   [gpioTick+1],0x0
    0810: 55 04 00 MOV   [gpioTick],0x0
(0090) 		}
(0091) 		
(0092) 		if(timer8MainTick) {
    0813: 3C 00 00 CMP   [timer8MainTick],0x0
    0816: B0 06    JNZ   0x081D
    0818: 3C 01 00 CMP   [timer8MainTick+1],0x0
    081B: A1 21    JZ    0x093D
(0093) 			timer8MainTick = false;
    081D: 55 01 00 MOV   [timer8MainTick+1],0x0
    0820: 55 00 00 MOV   [timer8MainTick],0x0
(0094) 			lcdUpdate++;
    0823: 76 1D    INC   [lcdUpdate+1]
    0825: 0E 1C 00 ADC   [lcdUpdate],0x0
(0095) 			
(0096) 			if (lcdUpdate >= 499)
    0828: 51 1D    MOV   A,[lcdUpdate+1]
    082A: 11 F3    SUB   A,0xF3
    082C: 51 1C    MOV   A,[lcdUpdate]
    082E: 19 01    SBB   A,0x1
    0830: C0 FA    JC    0x092B
(0097) 			{
(0098) 				lcdUpdate = 0;		
    0832: 55 1D 00 MOV   [lcdUpdate+1],0x0
    0835: 55 1C 00 MOV   [lcdUpdate],0x0
(0099) 				LCD_Control(0x01);
    0838: 10       PUSH  X
    0839: 50 01    MOV   A,0x1
    083B: 7C 04 5E LCALL _LCD_Control
(0100) 				LCD_PrString(lcdBuffer[0]);
    083E: 50 00    MOV   A,0x0
    0840: 08       PUSH  A
    0841: 50 06    MOV   A,0x6
    0843: 5C       MOV   X,A
    0844: 18       POP   A
    0845: 7C 04 40 LCALL _LCD_PrString
    0848: 20       POP   X
(0101) 				
(0102) 				usDistance = (((46400-usRawTimerValue)/2) / 58);
    0849: 50 40    MOV   A,0x40
    084B: 12 19    SUB   A,[usRawTimerValue+3]
    084D: 53 2F    MOV   [__r3],A
    084F: 50 B5    MOV   A,0xB5
    0851: 1A 18    SBB   A,[usRawTimerValue+2]
    0853: 53 30    MOV   [__r2],A
    0855: 50 00    MOV   A,0x0
    0857: 1A 17    SBB   A,[usRawTimerValue+1]
    0859: 53 31    MOV   [__r1],A
    085B: 50 00    MOV   A,0x0
    085D: 1A 16    SBB   A,[usRawTimerValue]
    085F: 53 32    MOV   [__r0],A
    0861: 70 FB    AND   F,0xFB
    0863: 6E 32    RRC   [__r0]
    0865: 6E 31    RRC   [__r1]
    0867: 6E 30    RRC   [__r2]
    0869: 6E 2F    RRC   [__r3]
    086B: 50 00    MOV   A,0x0
    086D: 08       PUSH  A
    086E: 08       PUSH  A
    086F: 08       PUSH  A
    0870: 50 3A    MOV   A,0x3A
    0872: 08       PUSH  A
    0873: 51 32    MOV   A,[__r0]
    0875: 08       PUSH  A
    0876: 51 31    MOV   A,[__r1]
    0878: 08       PUSH  A
    0879: 51 30    MOV   A,[__r2]
    087B: 08       PUSH  A
    087C: 51 2F    MOV   A,[__r3]
    087E: 08       PUSH  A
    087F: 7C 0D 23 LCALL 0x0D23
    0882: 18       POP   A
    0883: 53 2F    MOV   [__r3],A
    0885: 18       POP   A
    0886: 53 30    MOV   [__r2],A
    0888: 18       POP   A
    0889: 18       POP   A
    088A: 38 FC    ADD   SP,0xFC
    088C: 5F 31 2F MOV   [__r1],[__r3]
    088F: 5F 32 30 MOV   [__r0],[__r2]
    0892: 5F 1B 31 MOV   [usDistance+1],[__r1]
    0895: 5F 1A 32 MOV   [usDistance],[__r0]
(0103) 				itoa(lcdBuffer[1], usDistance,10);
    0898: 50 00    MOV   A,0x0
    089A: 08       PUSH  A
    089B: 50 0A    MOV   A,0xA
    089D: 08       PUSH  A
    089E: 51 1A    MOV   A,[usDistance]
    08A0: 08       PUSH  A
    08A1: 51 1B    MOV   A,[usDistance+1]
    08A3: 08       PUSH  A
    08A4: 50 00    MOV   A,0x0
    08A6: 08       PUSH  A
    08A7: 50 16    MOV   A,0x16
    08A9: 08       PUSH  A
    08AA: 7C 0D B8 LCALL _itoa
(0104) 				
(0105) 				itoa(lcdBuffer[1], start, 10);
    08AD: 50 00    MOV   A,0x0
    08AF: 08       PUSH  A
    08B0: 50 0A    MOV   A,0xA
    08B2: 08       PUSH  A
    08B3: 51 1E    MOV   A,[start]
    08B5: 08       PUSH  A
    08B6: 51 1F    MOV   A,[start+1]
    08B8: 08       PUSH  A
    08B9: 50 00    MOV   A,0x0
    08BB: 08       PUSH  A
    08BC: 50 16    MOV   A,0x16
    08BE: 08       PUSH  A
    08BF: 7C 0D B8 LCALL _itoa
    08C2: 38 F4    ADD   SP,0xF4
(0106) 				LCD_Position(0,10);
    08C4: 10       PUSH  X
    08C5: 57 0A    MOV   X,0xA
    08C7: 50 00    MOV   A,0x0
    08C9: 7C 05 75 LCALL _LCD_Position
(0107) 				LCD_PrString(lcdBuffer[1]);
    08CC: 50 00    MOV   A,0x0
    08CE: 08       PUSH  A
    08CF: 50 16    MOV   A,0x16
    08D1: 5C       MOV   X,A
    08D2: 18       POP   A
    08D3: 7C 04 40 LCALL _LCD_PrString
    08D6: 20       POP   X
(0108) 				
(0109) 				itoa(lcdBuffer[1], stop, 10);
    08D7: 50 00    MOV   A,0x0
    08D9: 08       PUSH  A
    08DA: 50 0A    MOV   A,0xA
    08DC: 08       PUSH  A
    08DD: 51 20    MOV   A,[stop]
    08DF: 08       PUSH  A
    08E0: 51 21    MOV   A,[stop+1]
    08E2: 08       PUSH  A
    08E3: 50 00    MOV   A,0x0
    08E5: 08       PUSH  A
    08E6: 50 16    MOV   A,0x16
    08E8: 08       PUSH  A
    08E9: 7C 0D B8 LCALL _itoa
    08EC: 38 FA    ADD   SP,0xFA
(0110) 				LCD_Position(1,10);
    08EE: 10       PUSH  X
    08EF: 57 0A    MOV   X,0xA
    08F1: 50 01    MOV   A,0x1
    08F3: 7C 05 75 LCALL _LCD_Position
(0111) 				LCD_PrString(lcdBuffer[1]);
    08F6: 50 00    MOV   A,0x0
    08F8: 08       PUSH  A
    08F9: 50 16    MOV   A,0x16
    08FB: 5C       MOV   X,A
    08FC: 18       POP   A
    08FD: 7C 04 40 LCALL _LCD_PrString
    0900: 20       POP   X
(0112) 				
(0113) 				itoa(lcdBuffer[1], usDistance, 10);
    0901: 50 00    MOV   A,0x0
    0903: 08       PUSH  A
    0904: 50 0A    MOV   A,0xA
    0906: 08       PUSH  A
    0907: 51 1A    MOV   A,[usDistance]
    0909: 08       PUSH  A
    090A: 51 1B    MOV   A,[usDistance+1]
    090C: 08       PUSH  A
    090D: 50 00    MOV   A,0x0
    090F: 08       PUSH  A
    0910: 50 16    MOV   A,0x16
    0912: 08       PUSH  A
    0913: 7C 0D B8 LCALL _itoa
    0916: 38 FA    ADD   SP,0xFA
(0114) 				LCD_Position(1,0);
    0918: 10       PUSH  X
    0919: 57 00    MOV   X,0x0
    091B: 50 01    MOV   A,0x1
    091D: 7C 05 75 LCALL _LCD_Position
(0115) 				LCD_PrString(lcdBuffer[1]);
    0920: 50 00    MOV   A,0x0
    0922: 08       PUSH  A
    0923: 50 16    MOV   A,0x16
    0925: 5C       MOV   X,A
    0926: 18       POP   A
    0927: 7C 04 40 LCALL _LCD_PrString
    092A: 20       POP   X
(0116) 				
(0117) 			}
(0118) 			
(0119) 			if(timer8MainCount >= 99) {
    092B: 51 03    MOV   A,[timer8MainCount+1]
    092D: 11 63    SUB   A,0x63
    092F: 51 02    MOV   A,[timer8MainCount]
    0931: 19 00    SBB   A,0x0
    0933: C0 09    JC    0x093D
(0120) 				timer8MainCount = 0;
    0935: 55 03 00 MOV   [timer8MainCount+1],0x0
    0938: 55 02 00 MOV   [timer8MainCount],0x0
(0121) 				usTrigSend();
    093B: 90 4F    CALL  _usTrigSend
(0122) 			}
(0123) 		}
(0124) 	}
    093D: 8E C5    JMP   0x0803
    093F: 8F FF    JMP   0x093F
(0125) }
(0126) 
(0127) /**************
(0128) *  Functions  *
(0129) **************/
(0130) 
(0131) void setup(void) {
_setup:
  moi                  --> X+0
    0941: 10       PUSH  X
    0942: 4F       MOV   X,SP
    0943: 38 02    ADD   SP,0x2
(0132) 	int moi = 0;
    0945: 56 01 00 MOV   [X+1],0x0
    0948: 56 00 00 MOV   [X+0],0x0
(0133) 	M8C_EnableGInt;
    094B: 71 01    OR    F,0x1
(0134) 	M8C_EnableIntMask(INT_MSK0, INT_MSK0_GPIO);
    094D: 43 E0 20 OR    REG[0xE0],0x20
(0135) 	LCD_Init();
    0950: 10       PUSH  X
    0951: 7C 05 05 LCALL _LCD_Start|_LCD_Init|LCD_Init
(0136) 	LCD_Start();
    0954: 7C 05 05 LCALL _LCD_Start|_LCD_Init|LCD_Init
(0137) 	Timer8UsTrig_EnableInt();
    0957: 7C 03 1E LCALL _Timer8UsTrig_EnableInt
(0138) 	Timer8UsTrig_Start();
    095A: 7C 03 26 LCALL _Timer8UsTrig_Start
(0139) 	Timer8Main_EnableInt();
    095D: 7C 03 63 LCALL _Timer8Main_EnableInt
(0140) 	Timer8Main_Start();
    0960: 7C 03 6B LCALL _Timer8Main_Start
(0141) 	
(0142) 	Timer16UsEcho_EnableInt();
    0963: 7C 03 A8 LCALL _Timer16UsEcho_EnableInt
    0966: 20       POP   X
(0143) 	backlight(1);
    0967: 50 00    MOV   A,0x0
    0969: 08       PUSH  A
    096A: 50 01    MOV   A,0x1
    096C: 08       PUSH  A
    096D: 93 70    CALL  _backlight
    096F: 38 FE    ADD   SP,0xFE
(0144) 	for (moi = 0; moi < 9999; moi++);
    0971: 56 01 00 MOV   [X+1],0x0
    0974: 56 00 00 MOV   [X+0],0x0
    0977: 77 01    INC   [X+1]
    0979: 0F 00 00 ADC   [X+0],0x0
    097C: 52 01    MOV   A,[X+1]
    097E: 11 0F    SUB   A,0xF
    0980: 52 00    MOV   A,[X+0]
    0982: 31 80    XOR   A,0x80
    0984: 19 A7    SBB   A,0xA7
    0986: CF F0    JC    0x0977
    0988: 38 FE    ADD   SP,0xFE
    098A: 20       POP   X
    098B: 7F       RET   
(0145) }
(0146) 
(0147) // Sends ultrasound trigger signal
(0148) void usTrigSend(void) {
(0149) 	digitalWrite(0, 4, 1); // Start the trigger signal
_usTrigSend:
    098C: 50 01    MOV   A,0x1
    098E: 08       PUSH  A
    098F: 50 04    MOV   A,0x4
    0991: 08       PUSH  A
    0992: 50 00    MOV   A,0x0
    0994: 08       PUSH  A
    0995: 92 4B    CALL  _digitalWrite
    0997: 38 FD    ADD   SP,0xFD
(0150) 	Timer8UsTrig_Start(); // Used to measure 10us trigger pulse
    0999: 10       PUSH  X
    099A: 7C 03 26 LCALL _Timer8UsTrig_Start
    099D: 20       POP   X
    099E: 7F       RET   
(0151) }
(0152) 
(0153) // Used to drive the H-Bridge; think of a numpad for controls
(0154) // 5 = 00 00 = 8 = stop
(0155) // 8 = 10 10 = xx = forward (L&R forward)
(0156) // 2 = 01 01 = xx = backward  (L&R backwards)
(0157) // 4 = 01 10 = xx = left    (L back   R forward)
(0158) // 6 = 10 01 = xx = right (L forward  R backwards)
(0159) // 7 = 00 10 = xx = left move(L coast R forward)
(0160) // 9 = 10 00 = xx = right mov(L forward L coast)
(0161) void drive(BYTE dir) {
_drive:
  dir                  --> X-4
    099F: 10       PUSH  X
    09A0: 4F       MOV   X,SP
    09A1: 38 02    ADD   SP,0x2
(0162) 	switch (dir){
    09A3: 52 FC    MOV   A,[X-4]
    09A5: 54 01    MOV   [X+1],A
    09A7: 56 00 00 MOV   [X+0],0x0
    09AA: 3D 00 00 CMP   [X+0],0x0
    09AD: B0 06    JNZ   0x09B4
    09AF: 3D 01 02 CMP   [X+1],0x2
    09B2: A0 2E    JZ    0x09E1
    09B4: 3D 00 00 CMP   [X+0],0x0
    09B7: B0 06    JNZ   0x09BE
    09B9: 3D 01 04 CMP   [X+1],0x4
    09BC: A0 2C    JZ    0x09E9
    09BE: 3D 00 00 CMP   [X+0],0x0
    09C1: B0 06    JNZ   0x09C8
    09C3: 3D 01 05 CMP   [X+1],0x5
    09C6: A0 0D    JZ    0x09D4
    09C8: 3D 00 00 CMP   [X+0],0x0
    09CB: B0 06    JNZ   0x09D2
    09CD: 3D 01 08 CMP   [X+1],0x8
    09D0: A0 08    JZ    0x09D9
    09D2: 80 1E    JMP   0x09F1
(0163) 		case 5: // Stop
(0164) 		PRT0DR &= ~0xFF; // All pins low
    09D4: 41 00 00 AND   REG[0x0],0x0
(0165) 		break;
    09D7: 80 1C    JMP   0x09F4
(0166) 	case 8: // Forward (1010)
(0167) 		PRT0DR &= ~0x5;
    09D9: 41 00 FA AND   REG[0x0],0xFA
(0168) 		PRT0DR |= 0xA;
    09DC: 43 00 0A OR    REG[0x0],0xA
(0169) 		break;
    09DF: 80 14    JMP   0x09F4
(0170) 	case 2: // Back (0101)
(0171) 		PRT0DR &= ~0xA;
    09E1: 41 00 F5 AND   REG[0x0],0xF5
(0172) 		PRT0DR |= 0x5;
    09E4: 43 00 05 OR    REG[0x0],0x5
(0173) 		break;
    09E7: 80 0C    JMP   0x09F4
(0174) 	case 4: // Left (01 10)
(0175) 		PRT0DR &= ~0x9;
    09E9: 41 00 F6 AND   REG[0x0],0xF6
(0176) 		PRT0DR |= 0x6;
    09EC: 43 00 06 OR    REG[0x0],0x6
(0177) 		break;
    09EF: 80 04    JMP   0x09F4
(0178) 	default:
(0179) 		PRT0DR &= ~0x15; // All pins low
    09F1: 41 00 EA AND   REG[0x0],0xEA
(0180) 		break;
    09F4: 38 FE    ADD   SP,0xFE
    09F6: 20       POP   X
    09F7: 7F       RET   
(0181) 	} 
(0182) }
(0183) 
(0184) // Sets the pin mode
(0185) void pinMode(BYTE port, BYTE pin, BYTE state) {
_pinMode:
  bitMask              --> X+2
  i                    --> X+0
  state                --> X-6
  pin                  --> X-5
  port                 --> X-4
    09F8: 10       PUSH  X
    09F9: 4F       MOV   X,SP
    09FA: 38 05    ADD   SP,0x5
(0186) 	int i;
(0187) 	BYTE bitMask = 1;
    09FC: 56 02 01 MOV   [X+2],0x1
(0188) 	for(i = 0; i < pin; i++) { bitMask *= 2; }
    09FF: 56 01 00 MOV   [X+1],0x0
    0A02: 56 00 00 MOV   [X+0],0x0
    0A05: 80 08    JMP   0x0A0E
    0A07: 66 02    ASL   [X+2]
    0A09: 77 01    INC   [X+1]
    0A0B: 0F 00 00 ADC   [X+0],0x0
    0A0E: 52 FB    MOV   A,[X-5]
    0A10: 53 31    MOV   [__r1],A
    0A12: 52 01    MOV   A,[X+1]
    0A14: 12 31    SUB   A,[__r1]
    0A16: 50 00    MOV   A,0x0
    0A18: 31 80    XOR   A,0x80
    0A1A: 53 26    MOV   [__rX],A
    0A1C: 52 00    MOV   A,[X+0]
    0A1E: 31 80    XOR   A,0x80
    0A20: 1A 26    SBB   A,[__rX]
    0A22: CF E4    JC    0x0A07
(0189) 
(0190) 	switch (state){
    0A24: 52 FA    MOV   A,[X-6]
    0A26: 54 04    MOV   [X+4],A
    0A28: 56 03 00 MOV   [X+3],0x0
    0A2B: 3D 03 00 CMP   [X+3],0x0
    0A2E: B0 06    JNZ   0x0A35
    0A30: 3D 04 00 CMP   [X+4],0x0
    0A33: A0 17    JZ    0x0A4B
    0A35: 3D 03 00 CMP   [X+3],0x0
    0A38: B0 06    JNZ   0x0A3F
    0A3A: 3D 04 01 CMP   [X+4],0x1
    0A3D: A0 91    JZ    0x0ACF
    0A3F: 3D 03 00 CMP   [X+3],0x0
    0A42: B0 06    JNZ   0x0A49
    0A44: 3D 04 03 CMP   [X+4],0x3
    0A47: A1 0E    JZ    0x0B56
    0A49: 81 94    JMP   0x0BDE
(0191) 		case 0: // Resistive Pulldown
(0192) 			if(port == 0) { PRT0DM2 &= ~bitMask; PRT0DM1 &= ~bitMask; PRT0DM0 &= ~bitMask; }
    0A4B: 3D FC 00 CMP   [X-4],0x0
    0A4E: B0 28    JNZ   0x0A77
    0A50: 52 02    MOV   A,[X+2]
    0A52: 73       CPL   A
    0A53: 53 32    MOV   [__r0],A
    0A55: 5D 03    MOV   A,REG[0x3]
    0A57: 22 32    AND   A,[__r0]
    0A59: 60 03    MOV   REG[0x3],A
    0A5B: 52 02    MOV   A,[X+2]
    0A5D: 73       CPL   A
    0A5E: 53 32    MOV   [__r0],A
    0A60: 71 10    OR    F,0x10
    0A62: 5D 01    MOV   A,REG[0x1]
    0A64: 22 32    AND   A,[__r0]
    0A66: 60 01    MOV   REG[0x1],A
    0A68: 52 02    MOV   A,[X+2]
    0A6A: 73       CPL   A
    0A6B: 53 32    MOV   [__r0],A
    0A6D: 5D 00    MOV   A,REG[0x0]
    0A6F: 22 32    AND   A,[__r0]
    0A71: 60 00    MOV   REG[0x0],A
    0A73: 70 CF    AND   F,0xCF
    0A75: 81 68    JMP   0x0BDE
(0193) 			else if(port == 1) { PRT1DM2 &= ~bitMask; PRT1DM1 &= ~bitMask; PRT1DM0 &= ~bitMask; }
    0A77: 3D FC 01 CMP   [X-4],0x1
    0A7A: B0 28    JNZ   0x0AA3
    0A7C: 52 02    MOV   A,[X+2]
    0A7E: 73       CPL   A
    0A7F: 53 32    MOV   [__r0],A
    0A81: 5D 07    MOV   A,REG[0x7]
    0A83: 22 32    AND   A,[__r0]
    0A85: 60 07    MOV   REG[0x7],A
    0A87: 52 02    MOV   A,[X+2]
    0A89: 73       CPL   A
    0A8A: 53 32    MOV   [__r0],A
    0A8C: 71 10    OR    F,0x10
    0A8E: 5D 05    MOV   A,REG[0x5]
    0A90: 22 32    AND   A,[__r0]
    0A92: 60 05    MOV   REG[0x5],A
    0A94: 52 02    MOV   A,[X+2]
    0A96: 73       CPL   A
    0A97: 53 32    MOV   [__r0],A
    0A99: 5D 04    MOV   A,REG[0x4]
    0A9B: 22 32    AND   A,[__r0]
    0A9D: 60 04    MOV   REG[0x4],A
    0A9F: 70 CF    AND   F,0xCF
    0AA1: 81 3C    JMP   0x0BDE
(0194) 			else if(port == 2) { PRT2DM2 &= ~bitMask; PRT2DM1 &= ~bitMask; PRT2DM0 &= ~bitMask; }
    0AA3: 3D FC 02 CMP   [X-4],0x2
    0AA6: B1 37    JNZ   0x0BDE
    0AA8: 52 02    MOV   A,[X+2]
    0AAA: 73       CPL   A
    0AAB: 53 32    MOV   [__r0],A
    0AAD: 5D 0B    MOV   A,REG[0xB]
    0AAF: 22 32    AND   A,[__r0]
    0AB1: 60 0B    MOV   REG[0xB],A
    0AB3: 52 02    MOV   A,[X+2]
    0AB5: 73       CPL   A
    0AB6: 53 32    MOV   [__r0],A
    0AB8: 71 10    OR    F,0x10
    0ABA: 5D 09    MOV   A,REG[0x9]
    0ABC: 22 32    AND   A,[__r0]
    0ABE: 60 09    MOV   REG[0x9],A
    0AC0: 52 02    MOV   A,[X+2]
    0AC2: 73       CPL   A
    0AC3: 53 32    MOV   [__r0],A
    0AC5: 5D 08    MOV   A,REG[0x8]
    0AC7: 22 32    AND   A,[__r0]
    0AC9: 60 08    MOV   REG[0x8],A
(0195) 			break;
    0ACB: 70 CF    AND   F,0xCF
    0ACD: 81 10    JMP   0x0BDE
(0196) 		case 1: // Strong
(0197) 			if(port == 0) { PRT0DM2 &= ~bitMask; PRT0DM1 &= ~bitMask; PRT0DM0 |= bitMask; }
    0ACF: 3D FC 00 CMP   [X-4],0x0
    0AD2: B0 29    JNZ   0x0AFC
    0AD4: 52 02    MOV   A,[X+2]
    0AD6: 73       CPL   A
    0AD7: 53 32    MOV   [__r0],A
    0AD9: 5D 03    MOV   A,REG[0x3]
    0ADB: 22 32    AND   A,[__r0]
    0ADD: 60 03    MOV   REG[0x3],A
    0ADF: 52 02    MOV   A,[X+2]
    0AE1: 73       CPL   A
    0AE2: 53 32    MOV   [__r0],A
    0AE4: 71 10    OR    F,0x10
    0AE6: 5D 01    MOV   A,REG[0x1]
    0AE8: 22 32    AND   A,[__r0]
    0AEA: 60 01    MOV   REG[0x1],A
    0AEC: 5D 00    MOV   A,REG[0x0]
    0AEE: 53 32    MOV   [__r0],A
    0AF0: 52 02    MOV   A,[X+2]
    0AF2: 2C 32    OR    [__r0],A
    0AF4: 51 32    MOV   A,[__r0]
    0AF6: 60 00    MOV   REG[0x0],A
    0AF8: 70 CF    AND   F,0xCF
    0AFA: 80 E3    JMP   0x0BDE
(0198) 			else if(port == 1) { PRT1DM2 &= ~bitMask; PRT1DM1 &= ~bitMask; PRT1DM0 |= bitMask; }
    0AFC: 3D FC 01 CMP   [X-4],0x1
    0AFF: B0 29    JNZ   0x0B29
    0B01: 52 02    MOV   A,[X+2]
    0B03: 73       CPL   A
    0B04: 53 32    MOV   [__r0],A
    0B06: 5D 07    MOV   A,REG[0x7]
    0B08: 22 32    AND   A,[__r0]
    0B0A: 60 07    MOV   REG[0x7],A
    0B0C: 52 02    MOV   A,[X+2]
    0B0E: 73       CPL   A
    0B0F: 53 32    MOV   [__r0],A
    0B11: 71 10    OR    F,0x10
    0B13: 5D 05    MOV   A,REG[0x5]
    0B15: 22 32    AND   A,[__r0]
    0B17: 60 05    MOV   REG[0x5],A
    0B19: 5D 04    MOV   A,REG[0x4]
    0B1B: 53 32    MOV   [__r0],A
    0B1D: 52 02    MOV   A,[X+2]
    0B1F: 2C 32    OR    [__r0],A
    0B21: 51 32    MOV   A,[__r0]
    0B23: 60 04    MOV   REG[0x4],A
    0B25: 70 CF    AND   F,0xCF
    0B27: 80 B6    JMP   0x0BDE
(0199) 			else if(port == 2) { PRT2DM2 &= ~bitMask; PRT2DM1 &= ~bitMask; PRT2DM0 |= bitMask; }
    0B29: 3D FC 02 CMP   [X-4],0x2
    0B2C: B0 B1    JNZ   0x0BDE
    0B2E: 52 02    MOV   A,[X+2]
    0B30: 73       CPL   A
    0B31: 53 32    MOV   [__r0],A
    0B33: 5D 0B    MOV   A,REG[0xB]
    0B35: 22 32    AND   A,[__r0]
    0B37: 60 0B    MOV   REG[0xB],A
    0B39: 52 02    MOV   A,[X+2]
    0B3B: 73       CPL   A
    0B3C: 53 32    MOV   [__r0],A
    0B3E: 71 10    OR    F,0x10
    0B40: 5D 09    MOV   A,REG[0x9]
    0B42: 22 32    AND   A,[__r0]
    0B44: 60 09    MOV   REG[0x9],A
    0B46: 5D 08    MOV   A,REG[0x8]
    0B48: 53 32    MOV   [__r0],A
    0B4A: 52 02    MOV   A,[X+2]
    0B4C: 2C 32    OR    [__r0],A
    0B4E: 51 32    MOV   A,[__r0]
    0B50: 60 08    MOV   REG[0x8],A
(0200) 			break;
    0B52: 70 CF    AND   F,0xCF
    0B54: 80 89    JMP   0x0BDE
(0201) 		case 3: // Pull up
(0202) 			if(port == 0) { PRT0DM2 &= ~bitMask; PRT0DM1 |= bitMask; PRT0DM0 |= bitMask; }
    0B56: 3D FC 00 CMP   [X-4],0x0
    0B59: B0 2A    JNZ   0x0B84
    0B5B: 52 02    MOV   A,[X+2]
    0B5D: 73       CPL   A
    0B5E: 53 32    MOV   [__r0],A
    0B60: 5D 03    MOV   A,REG[0x3]
    0B62: 22 32    AND   A,[__r0]
    0B64: 60 03    MOV   REG[0x3],A
    0B66: 71 10    OR    F,0x10
    0B68: 5D 01    MOV   A,REG[0x1]
    0B6A: 53 32    MOV   [__r0],A
    0B6C: 52 02    MOV   A,[X+2]
    0B6E: 2C 32    OR    [__r0],A
    0B70: 51 32    MOV   A,[__r0]
    0B72: 60 01    MOV   REG[0x1],A
    0B74: 5D 00    MOV   A,REG[0x0]
    0B76: 53 32    MOV   [__r0],A
    0B78: 52 02    MOV   A,[X+2]
    0B7A: 2C 32    OR    [__r0],A
    0B7C: 51 32    MOV   A,[__r0]
    0B7E: 60 00    MOV   REG[0x0],A
    0B80: 70 CF    AND   F,0xCF
    0B82: 80 5B    JMP   0x0BDE
(0203) 			else if(port == 1) { PRT1DM2 &= ~bitMask; PRT1DM1 |= bitMask; PRT1DM0 |= bitMask; }
    0B84: 3D FC 01 CMP   [X-4],0x1
    0B87: B0 2A    JNZ   0x0BB2
    0B89: 52 02    MOV   A,[X+2]
    0B8B: 73       CPL   A
    0B8C: 53 32    MOV   [__r0],A
    0B8E: 5D 07    MOV   A,REG[0x7]
    0B90: 22 32    AND   A,[__r0]
    0B92: 60 07    MOV   REG[0x7],A
    0B94: 71 10    OR    F,0x10
    0B96: 5D 05    MOV   A,REG[0x5]
    0B98: 53 32    MOV   [__r0],A
    0B9A: 52 02    MOV   A,[X+2]
    0B9C: 2C 32    OR    [__r0],A
    0B9E: 51 32    MOV   A,[__r0]
    0BA0: 60 05    MOV   REG[0x5],A
    0BA2: 5D 04    MOV   A,REG[0x4]
    0BA4: 53 32    MOV   [__r0],A
    0BA6: 52 02    MOV   A,[X+2]
    0BA8: 2C 32    OR    [__r0],A
    0BAA: 51 32    MOV   A,[__r0]
    0BAC: 60 04    MOV   REG[0x4],A
    0BAE: 70 CF    AND   F,0xCF
    0BB0: 80 2D    JMP   0x0BDE
(0204) 			else if(port == 2) { PRT2DM2 &= ~bitMask; PRT2DM1 |= bitMask; PRT2DM0 |= bitMask; }
    0BB2: 3D FC 02 CMP   [X-4],0x2
    0BB5: B0 28    JNZ   0x0BDE
    0BB7: 52 02    MOV   A,[X+2]
    0BB9: 73       CPL   A
    0BBA: 53 32    MOV   [__r0],A
    0BBC: 5D 0B    MOV   A,REG[0xB]
    0BBE: 22 32    AND   A,[__r0]
    0BC0: 60 0B    MOV   REG[0xB],A
    0BC2: 71 10    OR    F,0x10
    0BC4: 5D 09    MOV   A,REG[0x9]
    0BC6: 53 32    MOV   [__r0],A
    0BC8: 52 02    MOV   A,[X+2]
    0BCA: 2C 32    OR    [__r0],A
    0BCC: 51 32    MOV   A,[__r0]
    0BCE: 60 09    MOV   REG[0x9],A
    0BD0: 5D 08    MOV   A,REG[0x8]
    0BD2: 53 32    MOV   [__r0],A
    0BD4: 52 02    MOV   A,[X+2]
    0BD6: 2C 32    OR    [__r0],A
    0BD8: 51 32    MOV   A,[__r0]
    0BDA: 60 08    MOV   REG[0x8],A
(0205) 			break;
(0206) 		default:
(0207) 			break;
    0BDC: 70 CF    AND   F,0xCF
    0BDE: 38 FB    ADD   SP,0xFB
    0BE0: 20       POP   X
    0BE1: 7F       RET   
(0208) 	} 
(0209) }
(0210) 
(0211) // Function for setting pins
(0212) // 0 = low, 1 = high, 2 = toggle
(0213) void digitalWrite(BYTE port, BYTE pin, BYTE state) {
_digitalWrite:
  bitMask              --> X+2
  i                    --> X+0
  state                --> X-6
  pin                  --> X-5
  port                 --> X-4
    0BE2: 10       PUSH  X
    0BE3: 4F       MOV   X,SP
    0BE4: 38 05    ADD   SP,0x5
(0214) 	int i ;
(0215) 	BYTE bitMask = 1; 
    0BE6: 56 02 01 MOV   [X+2],0x1
(0216) 	for(i = 0; i < pin; i++) { bitMask *= 2; }
    0BE9: 56 01 00 MOV   [X+1],0x0
    0BEC: 56 00 00 MOV   [X+0],0x0
    0BEF: 80 08    JMP   0x0BF8
    0BF1: 66 02    ASL   [X+2]
    0BF3: 77 01    INC   [X+1]
    0BF5: 0F 00 00 ADC   [X+0],0x0
    0BF8: 52 FB    MOV   A,[X-5]
    0BFA: 53 31    MOV   [__r1],A
    0BFC: 52 01    MOV   A,[X+1]
    0BFE: 12 31    SUB   A,[__r1]
    0C00: 50 00    MOV   A,0x0
    0C02: 31 80    XOR   A,0x80
    0C04: 53 26    MOV   [__rX],A
    0C06: 52 00    MOV   A,[X+0]
    0C08: 31 80    XOR   A,0x80
    0C0A: 1A 26    SBB   A,[__rX]
    0C0C: CF E4    JC    0x0BF1
(0217) 
(0218) 	switch (state){
    0C0E: 52 FA    MOV   A,[X-6]
    0C10: 54 04    MOV   [X+4],A
    0C12: 56 03 00 MOV   [X+3],0x0
    0C15: 3D 03 00 CMP   [X+3],0x0
    0C18: B0 06    JNZ   0x0C1F
    0C1A: 3D 04 00 CMP   [X+4],0x0
    0C1D: A0 17    JZ    0x0C35
    0C1F: 3D 03 00 CMP   [X+3],0x0
    0C22: B0 06    JNZ   0x0C29
    0C24: 3D 04 01 CMP   [X+4],0x1
    0C27: A0 43    JZ    0x0C6B
    0C29: 3D 03 00 CMP   [X+3],0x0
    0C2C: B0 06    JNZ   0x0C33
    0C2E: 3D 04 02 CMP   [X+4],0x2
    0C31: A0 72    JZ    0x0CA4
    0C33: 80 A7    JMP   0x0CDB
(0219) 		case 0:
(0220) 			if(port == 0) PRT0DR &= ~bitMask;
    0C35: 3D FC 00 CMP   [X-4],0x0
    0C38: B0 0E    JNZ   0x0C47
    0C3A: 52 02    MOV   A,[X+2]
    0C3C: 73       CPL   A
    0C3D: 53 32    MOV   [__r0],A
    0C3F: 5D 00    MOV   A,REG[0x0]
    0C41: 22 32    AND   A,[__r0]
    0C43: 60 00    MOV   REG[0x0],A
    0C45: 80 95    JMP   0x0CDB
(0221) 			else if(port == 1) PRT1DR &= ~bitMask;
    0C47: 3D FC 01 CMP   [X-4],0x1
    0C4A: B0 0E    JNZ   0x0C59
    0C4C: 52 02    MOV   A,[X+2]
    0C4E: 73       CPL   A
    0C4F: 53 32    MOV   [__r0],A
    0C51: 5D 04    MOV   A,REG[0x4]
    0C53: 22 32    AND   A,[__r0]
    0C55: 60 04    MOV   REG[0x4],A
    0C57: 80 83    JMP   0x0CDB
(0222) 			else if(port == 2) PRT2DR &= ~bitMask;
    0C59: 3D FC 02 CMP   [X-4],0x2
    0C5C: B0 7E    JNZ   0x0CDB
    0C5E: 52 02    MOV   A,[X+2]
    0C60: 73       CPL   A
    0C61: 53 32    MOV   [__r0],A
    0C63: 5D 08    MOV   A,REG[0x8]
    0C65: 22 32    AND   A,[__r0]
    0C67: 60 08    MOV   REG[0x8],A
(0223) 			break;
    0C69: 80 71    JMP   0x0CDB
(0224) 		case 1:
(0225) 			if(port == 0) PRT0DR |= bitMask;
    0C6B: 3D FC 00 CMP   [X-4],0x0
    0C6E: B0 0F    JNZ   0x0C7E
    0C70: 5D 00    MOV   A,REG[0x0]
    0C72: 53 32    MOV   [__r0],A
    0C74: 52 02    MOV   A,[X+2]
    0C76: 2C 32    OR    [__r0],A
    0C78: 51 32    MOV   A,[__r0]
    0C7A: 60 00    MOV   REG[0x0],A
    0C7C: 80 5E    JMP   0x0CDB
(0226) 			else if(port == 1) PRT1DR |= bitMask;
    0C7E: 3D FC 01 CMP   [X-4],0x1
    0C81: B0 0F    JNZ   0x0C91
    0C83: 5D 04    MOV   A,REG[0x4]
    0C85: 53 32    MOV   [__r0],A
    0C87: 52 02    MOV   A,[X+2]
    0C89: 2C 32    OR    [__r0],A
    0C8B: 51 32    MOV   A,[__r0]
    0C8D: 60 04    MOV   REG[0x4],A
    0C8F: 80 4B    JMP   0x0CDB
(0227) 			else if(port == 2) PRT2DR |= bitMask;
    0C91: 3D FC 02 CMP   [X-4],0x2
    0C94: B0 46    JNZ   0x0CDB
    0C96: 5D 08    MOV   A,REG[0x8]
    0C98: 53 32    MOV   [__r0],A
    0C9A: 52 02    MOV   A,[X+2]
    0C9C: 2C 32    OR    [__r0],A
    0C9E: 51 32    MOV   A,[__r0]
    0CA0: 60 08    MOV   REG[0x8],A
(0228) 			break;    
    0CA2: 80 38    JMP   0x0CDB
(0229) 		case 2:
(0230) 			if(port == 0) PRT0DR ^= bitMask;
    0CA4: 3D FC 00 CMP   [X-4],0x0
    0CA7: B0 0F    JNZ   0x0CB7
    0CA9: 5D 00    MOV   A,REG[0x0]
    0CAB: 53 32    MOV   [__r0],A
    0CAD: 52 02    MOV   A,[X+2]
    0CAF: 34 32    XOR   [__r0],A
    0CB1: 51 32    MOV   A,[__r0]
    0CB3: 60 00    MOV   REG[0x0],A
    0CB5: 80 25    JMP   0x0CDB
(0231) 			else if(port == 1) PRT1DR ^= bitMask;
    0CB7: 3D FC 01 CMP   [X-4],0x1
    0CBA: B0 0F    JNZ   0x0CCA
    0CBC: 5D 04    MOV   A,REG[0x4]
    0CBE: 53 32    MOV   [__r0],A
    0CC0: 52 02    MOV   A,[X+2]
    0CC2: 34 32    XOR   [__r0],A
    0CC4: 51 32    MOV   A,[__r0]
    0CC6: 60 04    MOV   REG[0x4],A
    0CC8: 80 12    JMP   0x0CDB
(0232) 			else if(port == 2) PRT2DR ^= bitMask;
    0CCA: 3D FC 02 CMP   [X-4],0x2
    0CCD: B0 0D    JNZ   0x0CDB
    0CCF: 5D 08    MOV   A,REG[0x8]
    0CD1: 53 32    MOV   [__r0],A
    0CD3: 52 02    MOV   A,[X+2]
    0CD5: 34 32    XOR   [__r0],A
    0CD7: 51 32    MOV   A,[__r0]
    0CD9: 60 08    MOV   REG[0x8],A
(0233) 			break;
(0234) 		default:
(0235) 			break;
    0CDB: 38 FB    ADD   SP,0xFB
    0CDD: 20       POP   X
    0CDE: 7F       RET   
(0236) 	}
(0237) }
(0238) 
(0239) void backlight(BYTE toggle)
(0240) {
_backlight:
  toggle               --> X-4
    0CDF: 10       PUSH  X
    0CE0: 4F       MOV   X,SP
(0241) 	pinMode(2,7,1); // set the pin to strong
    0CE1: 50 01    MOV   A,0x1
    0CE3: 08       PUSH  A
    0CE4: 50 07    MOV   A,0x7
    0CE6: 08       PUSH  A
    0CE7: 50 02    MOV   A,0x2
    0CE9: 08       PUSH  A
    0CEA: 9D 0C    CALL  _pinMode
    0CEC: 38 FD    ADD   SP,0xFD
(0242) 	if (toggle == 0) { BL_Data_ADDR=(BL_DataShadow&=~BL_MASK); }
    0CEE: 3D FC 00 CMP   [X-4],0x0
    0CF1: B0 0A    JNZ   0x0CFC
    0CF3: 26 33 7F AND   [0x33],0x7F
    0CF6: 51 33    MOV   A,[0x33]
    0CF8: 60 08    MOV   REG[0x8],A
    0CFA: 80 1B    JMP   0x0D16
(0243) 	else if (toggle == 1) { BL_Data_ADDR=(BL_DataShadow|=BL_MASK); }
    0CFC: 3D FC 01 CMP   [X-4],0x1
    0CFF: B0 0A    JNZ   0x0D0A
    0D01: 2E 33 80 OR    [0x33],0x80
    0D04: 51 33    MOV   A,[0x33]
    0D06: 60 08    MOV   REG[0x8],A
    0D08: 80 0D    JMP   0x0D16
(0244) 	else if (toggle == 2) { BL_Data_ADDR=(BL_DataShadow^=BL_MASK); }
    0D0A: 3D FC 02 CMP   [X-4],0x2
    0D0D: B0 08    JNZ   0x0D16
    0D0F: 36 33 80 XOR   [0x33],0x80
    0D12: 51 33    MOV   A,[0x33]
    0D14: 60 08    MOV   REG[0x8],A
    0D16: 20       POP   X
FILE: lib\psocgpioint.asm               (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;;*****************************************************************************
                                        (0004) ;;*****************************************************************************
                                        (0005) ;;  FILENAME: PSoCGPIOINT.asm
                                        (0006) ;;   Version: 2.0.0.20, Updated on 2003/07/17 at 12:10:35
                                        (0007) ;;  @PSOC_VERSION
                                        (0008) ;;
                                        (0009) ;;  DESCRIPTION: PSoC GPIO Interrupt Service Routine
                                        (0010) ;;-----------------------------------------------------------------------------
                                        (0011) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0012) ;;*****************************************************************************
                                        (0013) ;;*****************************************************************************
                                        (0014) 
                                        (0015) include "m8c.inc"
                                        (0016) include "PSoCGPIOINT.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export   PSoC_GPIO_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) ;-----------------------------------------------
                                        (0025) ;  Constant Definitions
                                        (0026) ;-----------------------------------------------
                                        (0027) 
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ; Variable Allocation
                                        (0031) ;-----------------------------------------------
                                        (0032) 	
                                        (0033) 
                                        (0034) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0035) ;---------------------------------------------------
                                        (0036) ; Insert your custom declarations below this banner
                                        (0037) ;---------------------------------------------------
                                        (0038) 
                                        (0039) ;---------------------------------------------------
                                        (0040) ; Insert your custom declarations above this banner
                                        (0041) ;---------------------------------------------------
                                        (0042) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0043) 
                                        (0044) 
                                        (0045) ;-----------------------------------------------------------------------------
                                        (0046) ;  FUNCTION NAME: PSoC_GPIO_ISR
                                        (0047) ;
                                        (0048) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0049) ;
                                        (0050) ;-----------------------------------------------------------------------------
                                        (0051) ;
                                        (0052) PSoC_GPIO_ISR:
                                        (0053) 
                                        (0054) 
                                        (0055)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0056)    ;---------------------------------------------------
                                        (0057)    ; Insert your custom code below this banner
                                        (0058)    ;---------------------------------------------------
0D18: 7D 07 40 LJMP  _GPIO_ISR          (0059) 	ljmp _GPIO_ISR
                                        (0060)    ;---------------------------------------------------
                                        (0061)    ; Insert your custom code above this banner
                                        (0062)    ;---------------------------------------------------
                                        (0063)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0064) 
0D1B: 7E       RETI                     (0065)    reti
                                        (0066) 
                                        (0067) 
                                        (0068) ; end of file PSoCGPIOINT.asm
_itoa:
    0DB8: 10       PUSH  X
    0DB9: 4F       MOV   X,SP
    0DBA: 38 09    ADD   SP,0x9
    0DBC: 52 FA    MOV   A,[X-6]
    0DBE: 54 03    MOV   [X+3],A
    0DC0: 52 F9    MOV   A,[X-7]
    0DC2: 54 02    MOV   [X+2],A
    0DC4: 3D F9 00 CMP   [X-7],0x0
    0DC7: B0 22    JNZ   0x0DEA
    0DC9: 3D FA 00 CMP   [X-6],0x0
    0DCC: B0 1D    JNZ   0x0DEA
    0DCE: 52 FC    MOV   A,[X-4]
    0DD0: 53 31    MOV   [__r1],A
    0DD2: 50 30    MOV   A,0x30
    0DD4: 3F 31    MVI   [__r1],A
    0DD6: 52 FC    MOV   A,[X-4]
    0DD8: 01 01    ADD   A,0x1
    0DDA: 53 31    MOV   [__r1],A
    0DDC: 50 00    MOV   A,0x0
    0DDE: 3F 31    MVI   [__r1],A
    0DE0: 52 FC    MOV   A,[X-4]
    0DE2: 53 31    MOV   [__r1],A
    0DE4: 52 FB    MOV   A,[X-5]
    0DE6: 53 32    MOV   [__r0],A
    0DE8: 81 48    JMP   0x0F31
    0DEA: 52 FA    MOV   A,[X-6]
    0DEC: 11 00    SUB   A,0x0
    0DEE: 52 F9    MOV   A,[X-7]
    0DF0: 31 80    XOR   A,0x80
    0DF2: 19 80    SBB   A,0x80
    0DF4: D0 26    JNC   0x0E1B
    0DF6: 3D F7 00 CMP   [X-9],0x0
    0DF9: B0 21    JNZ   0x0E1B
    0DFB: 3D F8 0A CMP   [X-8],0xA
    0DFE: B0 1C    JNZ   0x0E1B
    0E00: 56 06 01 MOV   [X+6],0x1
    0E03: 52 03    MOV   A,[X+3]
    0E05: 73       CPL   A
    0E06: 53 31    MOV   [__r1],A
    0E08: 52 02    MOV   A,[X+2]
    0E0A: 73       CPL   A
    0E0B: 53 32    MOV   [__r0],A
    0E0D: 51 31    MOV   A,[__r1]
    0E0F: 01 01    ADD   A,0x1
    0E11: 54 03    MOV   [X+3],A
    0E13: 51 32    MOV   A,[__r0]
    0E15: 09 00    ADC   A,0x0
    0E17: 54 02    MOV   [X+2],A
    0E19: 80 04    JMP   0x0E1E
    0E1B: 56 06 00 MOV   [X+6],0x0
    0E1E: 52 FC    MOV   A,[X-4]
    0E20: 54 01    MOV   [X+1],A
    0E22: 52 F7    MOV   A,[X-9]
    0E24: 08       PUSH  A
    0E25: 52 F8    MOV   A,[X-8]
    0E27: 08       PUSH  A
    0E28: 52 02    MOV   A,[X+2]
    0E2A: 08       PUSH  A
    0E2B: 52 03    MOV   A,[X+3]
    0E2D: 08       PUSH  A
    0E2E: 7C 0D 1C LCALL 0x0D1C
    0E31: 38 FE    ADD   SP,0xFE
    0E33: 18       POP   A
    0E34: 53 31    MOV   [__r1],A
    0E36: 18       POP   A
    0E37: 53 32    MOV   [__r0],A
    0E39: 51 31    MOV   A,[__r1]
    0E3B: 54 08    MOV   [X+8],A
    0E3D: 51 32    MOV   A,[__r0]
    0E3F: 54 07    MOV   [X+7],A
    0E41: 50 09    MOV   A,0x9
    0E43: 13 08    SUB   A,[X+8]
    0E45: 52 07    MOV   A,[X+7]
    0E47: 31 80    XOR   A,0x80
    0E49: 53 26    MOV   [__rX],A
    0E4B: 50 80    MOV   A,0x80
    0E4D: 1A 26    SBB   A,[__rX]
    0E4F: C0 1D    JC    0x0E6D
    0E51: 52 01    MOV   A,[X+1]
    0E53: 53 31    MOV   [__r1],A
    0E55: 52 00    MOV   A,[X+0]
    0E57: 53 32    MOV   [__r0],A
    0E59: 51 31    MOV   A,[__r1]
    0E5B: 01 01    ADD   A,0x1
    0E5D: 54 01    MOV   [X+1],A
    0E5F: 51 32    MOV   A,[__r0]
    0E61: 09 00    ADC   A,0x0
    0E63: 54 00    MOV   [X+0],A
    0E65: 52 08    MOV   A,[X+8]
    0E67: 01 30    ADD   A,0x30
    0E69: 3F 31    MVI   [__r1],A
    0E6B: 80 1B    JMP   0x0E87
    0E6D: 52 01    MOV   A,[X+1]
    0E6F: 53 31    MOV   [__r1],A
    0E71: 52 00    MOV   A,[X+0]
    0E73: 53 32    MOV   [__r0],A
    0E75: 51 31    MOV   A,[__r1]
    0E77: 01 01    ADD   A,0x1
    0E79: 54 01    MOV   [X+1],A
    0E7B: 51 32    MOV   A,[__r0]
    0E7D: 09 00    ADC   A,0x0
    0E7F: 54 00    MOV   [X+0],A
    0E81: 52 08    MOV   A,[X+8]
    0E83: 01 57    ADD   A,0x57
    0E85: 3F 31    MVI   [__r1],A
    0E87: 52 F7    MOV   A,[X-9]
    0E89: 08       PUSH  A
    0E8A: 52 F8    MOV   A,[X-8]
    0E8C: 08       PUSH  A
    0E8D: 52 02    MOV   A,[X+2]
    0E8F: 08       PUSH  A
    0E90: 52 03    MOV   A,[X+3]
    0E92: 08       PUSH  A
    0E93: 7C 0D 1C LCALL 0x0D1C
    0E96: 18       POP   A
    0E97: 54 03    MOV   [X+3],A
    0E99: 18       POP   A
    0E9A: 54 02    MOV   [X+2],A
    0E9C: 38 FE    ADD   SP,0xFE
    0E9E: 3D 02 00 CMP   [X+2],0x0
    0EA1: BF 80    JNZ   0x0E22
    0EA3: 3D 03 00 CMP   [X+3],0x0
    0EA6: BF 7B    JNZ   0x0E22
    0EA8: 3D 06 00 CMP   [X+6],0x0
    0EAB: A0 19    JZ    0x0EC5
    0EAD: 52 01    MOV   A,[X+1]
    0EAF: 53 31    MOV   [__r1],A
    0EB1: 52 00    MOV   A,[X+0]
    0EB3: 53 32    MOV   [__r0],A
    0EB5: 51 31    MOV   A,[__r1]
    0EB7: 01 01    ADD   A,0x1
    0EB9: 54 01    MOV   [X+1],A
    0EBB: 51 32    MOV   A,[__r0]
    0EBD: 09 00    ADC   A,0x0
    0EBF: 54 00    MOV   [X+0],A
    0EC1: 50 2D    MOV   A,0x2D
    0EC3: 3F 31    MVI   [__r1],A
    0EC5: 52 01    MOV   A,[X+1]
    0EC7: 53 31    MOV   [__r1],A
    0EC9: 52 00    MOV   A,[X+0]
    0ECB: 53 32    MOV   [__r0],A
    0ECD: 51 31    MOV   A,[__r1]
    0ECF: 01 FF    ADD   A,0xFF
    0ED1: 54 01    MOV   [X+1],A
    0ED3: 51 32    MOV   A,[__r0]
    0ED5: 09 FF    ADC   A,0xFF
    0ED7: 54 00    MOV   [X+0],A
    0ED9: 50 00    MOV   A,0x0
    0EDB: 3F 31    MVI   [__r1],A
    0EDD: 52 FC    MOV   A,[X-4]
    0EDF: 54 05    MOV   [X+5],A
    0EE1: 80 3D    JMP   0x0F1F
    0EE3: 52 05    MOV   A,[X+5]
    0EE5: 53 31    MOV   [__r1],A
    0EE7: 3E 31    MVI   A,[__r1]
    0EE9: 54 06    MOV   [X+6],A
    0EEB: 52 05    MOV   A,[X+5]
    0EED: 53 31    MOV   [__r1],A
    0EEF: 52 04    MOV   A,[X+4]
    0EF1: 53 32    MOV   [__r0],A
    0EF3: 51 31    MOV   A,[__r1]
    0EF5: 01 01    ADD   A,0x1
    0EF7: 54 05    MOV   [X+5],A
    0EF9: 51 32    MOV   A,[__r0]
    0EFB: 09 00    ADC   A,0x0
    0EFD: 54 04    MOV   [X+4],A
    0EFF: 52 01    MOV   A,[X+1]
    0F01: 53 2F    MOV   [__r3],A
    0F03: 3E 2F    MVI   A,[__r3]
    0F05: 3F 31    MVI   [__r1],A
    0F07: 52 01    MOV   A,[X+1]
    0F09: 53 31    MOV   [__r1],A
    0F0B: 52 00    MOV   A,[X+0]
    0F0D: 53 32    MOV   [__r0],A
    0F0F: 51 31    MOV   A,[__r1]
    0F11: 01 FF    ADD   A,0xFF
    0F13: 54 01    MOV   [X+1],A
    0F15: 51 32    MOV   A,[__r0]
    0F17: 09 FF    ADC   A,0xFF
    0F19: 54 00    MOV   [X+0],A
    0F1B: 52 06    MOV   A,[X+6]
    0F1D: 3F 31    MVI   [__r1],A
    0F1F: 52 01    MOV   A,[X+1]
    0F21: 53 32    MOV   [__r0],A
    0F23: 52 05    MOV   A,[X+5]
    0F25: 3A 32    CMP   A,[__r0]
    0F27: CF BB    JC    0x0EE3
    0F29: 52 FC    MOV   A,[X-4]
    0F2B: 53 31    MOV   [__r1],A
    0F2D: 52 FB    MOV   A,[X-5]
    0F2F: 53 32    MOV   [__r0],A
    0F31: 38 F7    ADD   SP,0xF7
    0F33: 20       POP   X
    0F34: 7F       RET   
_ltoa:
    0F35: 10       PUSH  X
    0F36: 4F       MOV   X,SP
    0F37: 38 0B    ADD   SP,0xB
    0F39: 52 F7    MOV   A,[X-9]
    0F3B: 54 02    MOV   [X+2],A
    0F3D: 52 F8    MOV   A,[X-8]
    0F3F: 54 03    MOV   [X+3],A
    0F41: 52 F9    MOV   A,[X-7]
    0F43: 54 04    MOV   [X+4],A
    0F45: 52 FA    MOV   A,[X-6]
    0F47: 54 05    MOV   [X+5],A
    0F49: 3D F7 00 CMP   [X-9],0x0
    0F4C: B0 2C    JNZ   0x0F79
    0F4E: 3D F8 00 CMP   [X-8],0x0
    0F51: B0 27    JNZ   0x0F79
    0F53: 3D F9 00 CMP   [X-7],0x0
    0F56: B0 22    JNZ   0x0F79
    0F58: 3D FA 00 CMP   [X-6],0x0
    0F5B: B0 1D    JNZ   0x0F79
    0F5D: 52 FC    MOV   A,[X-4]
    0F5F: 53 31    MOV   [__r1],A
    0F61: 50 30    MOV   A,0x30
    0F63: 3F 31    MVI   [__r1],A
    0F65: 52 FC    MOV   A,[X-4]
    0F67: 01 01    ADD   A,0x1
    0F69: 53 31    MOV   [__r1],A
    0F6B: 50 00    MOV   A,0x0
    0F6D: 3F 31    MVI   [__r1],A
    0F6F: 52 FC    MOV   A,[X-4]
    0F71: 53 31    MOV   [__r1],A
    0F73: 52 FB    MOV   A,[X-5]
    0F75: 53 32    MOV   [__r0],A
    0F77: 81 C2    JMP   0x113A
    0F79: 52 FA    MOV   A,[X-6]
    0F7B: 11 00    SUB   A,0x0
    0F7D: 52 F9    MOV   A,[X-7]
    0F7F: 19 00    SBB   A,0x0
    0F81: 52 F8    MOV   A,[X-8]
    0F83: 19 00    SBB   A,0x0
    0F85: 52 F7    MOV   A,[X-9]
    0F87: 31 80    XOR   A,0x80
    0F89: 19 80    SBB   A,0x80
    0F8B: D0 38    JNC   0x0FC4
    0F8D: 3D F5 00 CMP   [X-11],0x0
    0F90: B0 33    JNZ   0x0FC4
    0F92: 3D F6 0A CMP   [X-10],0xA
    0F95: B0 2E    JNZ   0x0FC4
    0F97: 56 08 01 MOV   [X+8],0x1
    0F9A: 52 02    MOV   A,[X+2]
    0F9C: 73       CPL   A
    0F9D: 53 32    MOV   [__r0],A
    0F9F: 52 03    MOV   A,[X+3]
    0FA1: 73       CPL   A
    0FA2: 53 31    MOV   [__r1],A
    0FA4: 52 04    MOV   A,[X+4]
    0FA6: 73       CPL   A
    0FA7: 53 30    MOV   [__r2],A
    0FA9: 52 05    MOV   A,[X+5]
    0FAB: 73       CPL   A
    0FAC: 01 01    ADD   A,0x1
    0FAE: 54 05    MOV   [X+5],A
    0FB0: 51 30    MOV   A,[__r2]
    0FB2: 09 00    ADC   A,0x0
    0FB4: 54 04    MOV   [X+4],A
    0FB6: 51 31    MOV   A,[__r1]
    0FB8: 09 00    ADC   A,0x0
    0FBA: 54 03    MOV   [X+3],A
    0FBC: 51 32    MOV   A,[__r0]
    0FBE: 09 00    ADC   A,0x0
    0FC0: 54 02    MOV   [X+2],A
    0FC2: 80 04    JMP   0x0FC7
    0FC4: 56 08 00 MOV   [X+8],0x0
    0FC7: 52 FC    MOV   A,[X-4]
    0FC9: 54 01    MOV   [X+1],A
    0FCB: 52 F6    MOV   A,[X-10]
    0FCD: 53 2F    MOV   [__r3],A
    0FCF: 52 F5    MOV   A,[X-11]
    0FD1: 53 30    MOV   [__r2],A
    0FD3: 47 30 80 TST   [__r2],0x80
    0FD6: A0 09    JZ    0x0FE0
    0FD8: 55 31 FF MOV   [__r1],0xFF
    0FDB: 55 32 FF MOV   [__r0],0xFF
    0FDE: 80 07    JMP   0x0FE6
    0FE0: 55 31 00 MOV   [__r1],0x0
    0FE3: 55 32 00 MOV   [__r0],0x0
    0FE6: 51 32    MOV   A,[__r0]
    0FE8: 08       PUSH  A
    0FE9: 51 31    MOV   A,[__r1]
    0FEB: 08       PUSH  A
    0FEC: 51 30    MOV   A,[__r2]
    0FEE: 08       PUSH  A
    0FEF: 51 2F    MOV   A,[__r3]
    0FF1: 08       PUSH  A
    0FF2: 52 02    MOV   A,[X+2]
    0FF4: 08       PUSH  A
    0FF5: 52 03    MOV   A,[X+3]
    0FF7: 08       PUSH  A
    0FF8: 52 04    MOV   A,[X+4]
    0FFA: 08       PUSH  A
    0FFB: 52 05    MOV   A,[X+5]
    0FFD: 08       PUSH  A
    0FFE: 7C 0D 23 LCALL 0x0D23
    1001: 38 FC    ADD   SP,0xFC
    1003: 18       POP   A
    1004: 53 2F    MOV   [__r3],A
    1006: 18       POP   A
    1007: 53 30    MOV   [__r2],A
    1009: 18       POP   A
    100A: 18       POP   A
    100B: 51 2F    MOV   A,[__r3]
    100D: 54 0A    MOV   [X+10],A
    100F: 51 30    MOV   A,[__r2]
    1011: 54 09    MOV   [X+9],A
    1013: 50 09    MOV   A,0x9
    1015: 13 0A    SUB   A,[X+10]
    1017: 52 09    MOV   A,[X+9]
    1019: 31 80    XOR   A,0x80
    101B: 53 26    MOV   [__rX],A
    101D: 50 80    MOV   A,0x80
    101F: 1A 26    SBB   A,[__rX]
    1021: C0 1D    JC    0x103F
    1023: 52 01    MOV   A,[X+1]
    1025: 53 31    MOV   [__r1],A
    1027: 52 00    MOV   A,[X+0]
    1029: 53 32    MOV   [__r0],A
    102B: 51 31    MOV   A,[__r1]
    102D: 01 01    ADD   A,0x1
    102F: 54 01    MOV   [X+1],A
    1031: 51 32    MOV   A,[__r0]
    1033: 09 00    ADC   A,0x0
    1035: 54 00    MOV   [X+0],A
    1037: 52 0A    MOV   A,[X+10]
    1039: 01 30    ADD   A,0x30
    103B: 3F 31    MVI   [__r1],A
    103D: 80 1B    JMP   0x1059
    103F: 52 01    MOV   A,[X+1]
    1041: 53 31    MOV   [__r1],A
    1043: 52 00    MOV   A,[X+0]
    1045: 53 32    MOV   [__r0],A
    1047: 51 31    MOV   A,[__r1]
    1049: 01 01    ADD   A,0x1
    104B: 54 01    MOV   [X+1],A
    104D: 51 32    MOV   A,[__r0]
    104F: 09 00    ADC   A,0x0
    1051: 54 00    MOV   [X+0],A
    1053: 52 0A    MOV   A,[X+10]
    1055: 01 57    ADD   A,0x57
    1057: 3F 31    MVI   [__r1],A
    1059: 52 F6    MOV   A,[X-10]
    105B: 53 2F    MOV   [__r3],A
    105D: 52 F5    MOV   A,[X-11]
    105F: 53 30    MOV   [__r2],A
    1061: 47 30 80 TST   [__r2],0x80
    1064: A0 09    JZ    0x106E
    1066: 55 31 FF MOV   [__r1],0xFF
    1069: 55 32 FF MOV   [__r0],0xFF
    106C: 80 07    JMP   0x1074
    106E: 55 31 00 MOV   [__r1],0x0
    1071: 55 32 00 MOV   [__r0],0x0
    1074: 51 32    MOV   A,[__r0]
    1076: 08       PUSH  A
    1077: 51 31    MOV   A,[__r1]
    1079: 08       PUSH  A
    107A: 51 30    MOV   A,[__r2]
    107C: 08       PUSH  A
    107D: 51 2F    MOV   A,[__r3]
    107F: 08       PUSH  A
    1080: 52 02    MOV   A,[X+2]
    1082: 08       PUSH  A
    1083: 52 03    MOV   A,[X+3]
    1085: 08       PUSH  A
    1086: 52 04    MOV   A,[X+4]
    1088: 08       PUSH  A
    1089: 52 05    MOV   A,[X+5]
    108B: 08       PUSH  A
    108C: 7C 0D 23 LCALL 0x0D23
    108F: 18       POP   A
    1090: 54 05    MOV   [X+5],A
    1092: 18       POP   A
    1093: 54 04    MOV   [X+4],A
    1095: 18       POP   A
    1096: 54 03    MOV   [X+3],A
    1098: 18       POP   A
    1099: 54 02    MOV   [X+2],A
    109B: 38 FC    ADD   SP,0xFC
    109D: 3D 02 00 CMP   [X+2],0x0
    10A0: BF 2A    JNZ   0x0FCB
    10A2: 3D 03 00 CMP   [X+3],0x0
    10A5: BF 25    JNZ   0x0FCB
    10A7: 3D 04 00 CMP   [X+4],0x0
    10AA: BF 20    JNZ   0x0FCB
    10AC: 3D 05 00 CMP   [X+5],0x0
    10AF: BF 1B    JNZ   0x0FCB
    10B1: 3D 08 00 CMP   [X+8],0x0
    10B4: A0 19    JZ    0x10CE
    10B6: 52 01    MOV   A,[X+1]
    10B8: 53 31    MOV   [__r1],A
    10BA: 52 00    MOV   A,[X+0]
    10BC: 53 32    MOV   [__r0],A
    10BE: 51 31    MOV   A,[__r1]
    10C0: 01 01    ADD   A,0x1
    10C2: 54 01    MOV   [X+1],A
    10C4: 51 32    MOV   A,[__r0]
    10C6: 09 00    ADC   A,0x0
    10C8: 54 00    MOV   [X+0],A
    10CA: 50 2D    MOV   A,0x2D
    10CC: 3F 31    MVI   [__r1],A
    10CE: 52 01    MOV   A,[X+1]
    10D0: 53 31    MOV   [__r1],A
    10D2: 52 00    MOV   A,[X+0]
    10D4: 53 32    MOV   [__r0],A
    10D6: 51 31    MOV   A,[__r1]
    10D8: 01 FF    ADD   A,0xFF
    10DA: 54 01    MOV   [X+1],A
    10DC: 51 32    MOV   A,[__r0]
    10DE: 09 FF    ADC   A,0xFF
    10E0: 54 00    MOV   [X+0],A
    10E2: 50 00    MOV   A,0x0
    10E4: 3F 31    MVI   [__r1],A
    10E6: 52 FC    MOV   A,[X-4]
    10E8: 54 07    MOV   [X+7],A
    10EA: 80 3D    JMP   0x1128
    10EC: 52 07    MOV   A,[X+7]
    10EE: 53 31    MOV   [__r1],A
    10F0: 3E 31    MVI   A,[__r1]
    10F2: 54 08    MOV   [X+8],A
    10F4: 52 07    MOV   A,[X+7]
    10F6: 53 31    MOV   [__r1],A
    10F8: 52 06    MOV   A,[X+6]
    10FA: 53 32    MOV   [__r0],A
    10FC: 51 31    MOV   A,[__r1]
    10FE: 01 01    ADD   A,0x1
    1100: 54 07    MOV   [X+7],A
    1102: 51 32    MOV   A,[__r0]
    1104: 09 00    ADC   A,0x0
    1106: 54 06    MOV   [X+6],A
    1108: 52 01    MOV   A,[X+1]
    110A: 53 2F    MOV   [__r3],A
    110C: 3E 2F    MVI   A,[__r3]
    110E: 3F 31    MVI   [__r1],A
    1110: 52 01    MOV   A,[X+1]
    1112: 53 31    MOV   [__r1],A
    1114: 52 00    MOV   A,[X+0]
    1116: 53 32    MOV   [__r0],A
    1118: 51 31    MOV   A,[__r1]
    111A: 01 FF    ADD   A,0xFF
    111C: 54 01    MOV   [X+1],A
    111E: 51 32    MOV   A,[__r0]
    1120: 09 FF    ADC   A,0xFF
    1122: 54 00    MOV   [X+0],A
    1124: 52 08    MOV   A,[X+8]
    1126: 3F 31    MVI   [__r1],A
    1128: 52 01    MOV   A,[X+1]
    112A: 53 32    MOV   [__r0],A
    112C: 52 07    MOV   A,[X+7]
    112E: 3A 32    CMP   A,[__r0]
    1130: CF BB    JC    0x10EC
    1132: 52 FC    MOV   A,[X-4]
    1134: 53 31    MOV   [__r1],A
    1136: 52 FB    MOV   A,[X-5]
    1138: 53 32    MOV   [__r0],A
    113A: 38 F5    ADD   SP,0xF5
    113C: 20       POP   X
    113D: 7F       RET   
