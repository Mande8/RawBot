                        .module functions.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./functions.c
 0000                   .dbfile C:\Projects\RawBot\RawBot\functions.c
 0000                   .dbfunc e servoStart _servoStart fV
 0000           ;         period -> X-5
 0000           _servoStart::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002                   .dbline 13
 0002           ; /*************
 0002           ; *  Includes  *
 0002           ; *************/
 0002           ; 
 0002           ; #include "Functions.h"
 0002           ; #include <m8c.h>
 0002           ; #include "PSoCAPI.h"
 0002           ; 
 0002           ; /**********
 0002           ; *  Servo  *
 0002           ; **********/
 0002           ; 
 0002           ; void servoStart(unsigned int period) {
 0002                   .dbline 14
 0002           ;       ServoPWM_WritePeriod(period);
 0002 10                push X
 0003 52FB              mov A,[X-5]
 0005 08                push A
 0006 52FC              mov A,[X-4]
 0008 20                pop X
 0009 7C0000            xcall _ServoPWM_WritePeriod
 000C                   .dbline 15
 000C           ;       ServoPWM_Start();       
 000C 7C0000            xcall _ServoPWM_Start
 000F 20                pop X
 0010                   .dbline -2
 0010           L1:
 0010 20                pop X
 0011                   .dbline 0 ; func end
 0011 7F                ret
 0012                   .dbsym l period -5 i
 0012                   .dbend
 0012                   .dbfunc e servoStop _servoStop fV
 0012           _servoStop::
 0012                   .dbline -1
 0012                   .dbline 18
 0012           ; }
 0012           ; 
 0012           ; void servoStop(void) {
 0012                   .dbline 19
 0012           ;       ServoPWM_Stop(); // Just for uniformity
 0012 10                push X
 0013 7C0000            xcall _ServoPWM_Stop
 0016 20                pop X
 0017                   .dbline -2
 0017           L2:
 0017                   .dbline 0 ; func end
 0017 7F                ret
 0018                   .dbend
 0018                   .dbfunc e servoMove _servoMove fV
 0018           ;          range -> X-9
 0018           ;         middle -> X-7
 0018           ;          angle -> X-5
 0018           _servoMove::
 0018                   .dbline -1
 0018 10                push X
 0019 4F                mov X,SP
 001A                   .dbline 23
 001A           ; }
 001A           ; 
 001A           ; // Servo moving
 001A           ; void servoMove(int angle, unsigned int middle, unsigned int range) {
 001A                   .dbline 24
 001A           ;       ServoPWM_WritePulseWidth(middle + (angle*((range*2)/180)));
 001A 52F8              mov A,[X-8]
 001C 5300              mov [__r1],A
 001E 52F7              mov A,[X-9]
 0020 5300              mov [__r0],A
 0022 6500              asl [__r1]
 0024 6B00              rlc [__r0]
 0026 5000              mov A,0
 0028 08                push A
 0029 50B4              mov A,-76
 002B 08                push A
 002C 5100              mov A,[__r0]
 002E 08                push A
 002F 5100              mov A,[__r1]
 0031 08                push A
 0032 7C0000            xcall __divmodu_16X16_16
 0035 18                pop A
 0036 5300              mov [__r1],A
 0038 18                pop A
 0039 38FE              add SP,-2
 003B 08                push A
 003C 5100              mov A,[__r1]
 003E 08                push A
 003F 52FB              mov A,[X-5]
 0041 08                push A
 0042 52FC              mov A,[X-4]
 0044 08                push A
 0045 7C0000            xcall __mul16
 0048 38FC              add SP,-4
 004A 5F0000            mov [__r1],[__rX]
 004D 5F0000            mov [__r0],[__rY]
 0050 52FA              mov A,[X-6]
 0052 0200              add A,[__r1]
 0054 5300              mov [__r1],A
 0056 52F9              mov A,[X-7]
 0058 0A00              adc A,[__r0]
 005A 10                push X
 005B 08                push A
 005C 5100              mov A,[__r1]
 005E 20                pop X
 005F 7C0000            xcall _ServoPWM_WritePulseWidth
 0062 20                pop X
 0063                   .dbline -2
 0063           L3:
 0063 20                pop X
 0064                   .dbline 0 ; func end
 0064 7F                ret
 0065                   .dbsym l range -9 i
 0065                   .dbsym l middle -7 i
 0065                   .dbsym l angle -5 I
 0065                   .dbend
 0065                   .dbfunc e usTrigSend _usTrigSend fV
 0065           _usTrigSend::
 0065                   .dbline -1
 0065                   .dbline 31
 0065           ; }
 0065           ; 
 0065           ; /***************
 0065           ; *  Ultrasound  *
 0065           ; ***************/
 0065           ; 
 0065           ; void usTrigSend(void) {
 0065                   .dbline 32
 0065           ;       digitalWrite(0, 6, 1); // Start the trigger signal
 0065 5001              mov A,1
 0067 08                push A
 0068 5006              mov A,6
 006A 08                push A
 006B 5000              mov A,0
 006D 08                push A
 006E 92E1              xcall _digitalWrite
 0070 38FD              add SP,-3
 0072                   .dbline 33
 0072           ;       Timer8UsTrig_Start(); // Used to measure 10us trigger pulse
 0072 10                push X
 0073 7C0000            xcall _Timer8UsTrig_Start
 0076 20                pop X
 0077                   .dbline -2
 0077           L4:
 0077                   .dbline 0 ; func end
 0077 7F                ret
 0078                   .dbend
 0078                   .dbfunc e usCalculateDistance _usCalculateDistance fl
 0078           ;      usRawTime -> X-7
 0078           _usCalculateDistance::
 0078                   .dbline -1
 0078 10                push X
 0079 4F                mov X,SP
 007A                   .dbline 36
 007A           ; }
 007A           ; 
 007A           ; unsigned long usCalculateDistance(unsigned long usRawTime) {
 007A                   .dbline 37
 007A           ;       return (((46400 - usRawTime) / 2) / 58);
 007A 5040              mov A,64
 007C 13FC              sub A,[X-4]
 007E 5300              mov [__r3],A
 0080 50B5              mov A,-75
 0082 1BFB              sbb A,[X-5]
 0084 5300              mov [__r2],A
 0086 5000              mov A,0
 0088 1BFA              sbb A,[X-6]
 008A 5300              mov [__r1],A
 008C 5000              mov A,0
 008E 1BF9              sbb A,[X-7]
 0090 5300              mov [__r0],A
 0092 70FB              and F,-5
 0094 6E00              rrc [__r0]
 0096 6E00              rrc [__r1]
 0098 6E00              rrc [__r2]
 009A 6E00              rrc [__r3]
 009C 5000              mov A,0
 009E 08                push A
 009F 08                push A
 00A0 08                push A
 00A1 503A              mov A,58
 00A3 08                push A
 00A4 5100              mov A,[__r0]
 00A6 08                push A
 00A7 5100              mov A,[__r1]
 00A9 08                push A
 00AA 5100              mov A,[__r2]
 00AC 08                push A
 00AD 5100              mov A,[__r3]
 00AF 08                push A
 00B0 7C0000            xcall __divmodu_32X32_32
 00B3 18                pop A
 00B4 5300              mov [__r3],A
 00B6 18                pop A
 00B7 5300              mov [__r2],A
 00B9 18                pop A
 00BA 5300              mov [__r1],A
 00BC 18                pop A
 00BD 5300              mov [__r0],A
 00BF 38FC              add SP,-4
 00C1                   .dbline -2
 00C1           L5:
 00C1 20                pop X
 00C2                   .dbline 0 ; func end
 00C2 7F                ret
 00C3                   .dbsym l usRawTime -7 l
 00C3                   .dbend
 00C3                   .dbfunc e drive _drive fV
 00C3           ;            dir -> X-4
 00C3           _drive::
 00C3                   .dbline -1
 00C3 10                push X
 00C4 4F                mov X,SP
 00C5 3802              add SP,2
 00C7                   .dbline 47
 00C7           ; }
 00C7           ; 
 00C7           ; /************
 00C7           ; *  Driving  *
 00C7           ; ************/
 00C7           ; 
 00C7           ; // Connections : H-bridge is connected to
 00C7           ; // Used to drive the H-Bridge; think of a numpad for controls
 00C7           ; // IN1 = Port0 Pin0 , IN2 = Port0 Pin1 etc
 00C7           ; void drive(unsigned char dir) {
 00C7                   .dbline 48
 00C7           ;       switch (dir) {
 00C7 52FC              mov A,[X-4]
 00C9 5401              mov [X+1],A
 00CB 560000            mov [X+0],0
 00CE 3D0000            cmp [X+0],0
 00D1 B006              jnz X0
 00D3 3D0102            cmp [X+1],2
 00D6 A02B              jz L10
 00D8           X0:
 00D8 3D0000            cmp [X+0],0
 00DB B006              jnz X1
 00DD 3D0104            cmp [X+1],4
 00E0 A029              jz L11
 00E2           X1:
 00E2 3D0000            cmp [X+0],0
 00E5 B006              jnz X2
 00E7 3D0105            cmp [X+1],5
 00EA A027              jz L12
 00EC           X2:
 00EC 3D0000            cmp [X+0],0
 00EF B006              jnz X3
 00F1 3D0106            cmp [X+1],6
 00F4 A022              jz L13
 00F6           X3:
 00F6 3D0000            cmp [X+0],0
 00F9 B006              jnz X4
 00FB 3D0108            cmp [X+1],8
 00FE A020              jz L14
 0100           X4:
 0100 8026              xjmp L7
 0102           L10:
 0102                   .dbline 50
 0102           ;               case 2: // Back (0101)
 0102           ;                       PRT0DR &= ~0x0A;
 0102 4100F5            and REG[0],-11
 0105                   .dbline 51
 0105           ;                       PRT0DR |= 0x05;
 0105 430005            or REG[0],5
 0108                   .dbline 52
 0108           ;                       break;
 0108 8021              xjmp L8
 010A           L11:
 010A                   .dbline 54
 010A           ;               case 4: // Left (0110)
 010A           ;                       PRT0DR &= ~0x09;
 010A 4100F6            and REG[0],-10
 010D                   .dbline 55
 010D           ;                       PRT0DR |= 0x06;
 010D 430006            or REG[0],6
 0110                   .dbline 56
 0110           ;                       break;
 0110 8019              xjmp L8
 0112           L12:
 0112                   .dbline 58
 0112           ;               case 5: // Stop
 0112           ;                       PRT0DR &= ~0x0F; // All pins low;
 0112 4100F0            and REG[0],-16
 0115                   .dbline 59
 0115           ;                       break;
 0115 8014              xjmp L8
 0117           L13:
 0117                   .dbline 61
 0117           ;               case 6: // Right (1001)
 0117           ;                       PRT0DR &= ~0x06;
 0117 4100F9            and REG[0],-7
 011A                   .dbline 62
 011A           ;                       PRT0DR |= 0x09;
 011A 430009            or REG[0],9
 011D                   .dbline 63
 011D           ;                       break;
 011D 800C              xjmp L8
 011F           L14:
 011F                   .dbline 65
 011F           ;               case 8: // Forward (1010)
 011F           ;                       PRT0DR &= ~0x05;
 011F 4100FA            and REG[0],-6
 0122                   .dbline 66
 0122           ;                       PRT0DR |= 0x0A;
 0122 43000A            or REG[0],10
 0125                   .dbline 67
 0125           ;                       break;
 0125 8004              xjmp L8
 0127           L7:
 0127                   .dbline 69
 0127           ;               default:
 0127           ;                       PRT0DR &= ~0x0F; // All pins low;
 0127 4100F0            and REG[0],-16
 012A                   .dbline 70
 012A           ;                       break;
 012A           L8:
 012A                   .dbline -2
 012A           L6:
 012A 38FE              add SP,-2
 012C 20                pop X
 012D                   .dbline 0 ; func end
 012D 7F                ret
 012E                   .dbsym l dir -4 c
 012E                   .dbend
 012E                   .dbfunc e backlight _backlight fV
 012E           ;         toggle -> X-4
 012E           _backlight::
 012E                   .dbline -1
 012E 10                push X
 012F 4F                mov X,SP
 0130                   .dbline 80
 0130           ;       }       
 0130           ; }
 0130           ; 
 0130           ; 
 0130           ; 
 0130           ; /*****************
 0130           ; *  General PSoC  *
 0130           ; *****************/
 0130           ; 
 0130           ; void backlight(unsigned char toggle) {
 0130                   .dbline 81
 0130           ;       pinMode(2,7,1); // set the pin to strong
 0130 5001              mov A,1
 0132 08                push A
 0133 5007              mov A,7
 0135 08                push A
 0136 5002              mov A,2
 0138 08                push A
 0139 902C              xcall _pinMode
 013B 38FD              add SP,-3
 013D                   .dbline 82
 013D           ;       if (toggle == 0) { BL_Data_ADDR=(BL_DataShadow&=~BL_MASK); }
 013D 3DFC00            cmp [X-4],0
 0140 B00A              jnz L16
 0142                   .dbline 82
 0142                   .dbline 82
 0142 26007F            and [_Port_2_Data_SHADE],127
 0145 5100              mov A,[_Port_2_Data_SHADE]
 0147 6008              mov REG[0x8],A
 0149                   .dbline 82
 0149 801B              xjmp L17
 014B           L16:
 014B                   .dbline 83
 014B           ;       else if (toggle == 1) { BL_Data_ADDR=(BL_DataShadow|=BL_MASK); }
 014B 3DFC01            cmp [X-4],1
 014E B00A              jnz L18
 0150                   .dbline 83
 0150                   .dbline 83
 0150 2E0080            or [_Port_2_Data_SHADE],-128
 0153 5100              mov A,[_Port_2_Data_SHADE]
 0155 6008              mov REG[0x8],A
 0157                   .dbline 83
 0157 800D              xjmp L19
 0159           L18:
 0159                   .dbline 84
 0159           ;       else if (toggle == 2) { BL_Data_ADDR=(BL_DataShadow^=BL_MASK); }
 0159 3DFC02            cmp [X-4],2
 015C B008              jnz L20
 015E                   .dbline 84
 015E                   .dbline 84
 015E 360080            xor [_Port_2_Data_SHADE],-128
 0161 5100              mov A,[_Port_2_Data_SHADE]
 0163 6008              mov REG[0x8],A
 0165                   .dbline 84
 0165           L20:
 0165           L19:
 0165           L17:
 0165                   .dbline -2
 0165           L15:
 0165 20                pop X
 0166                   .dbline 0 ; func end
 0166 7F                ret
 0167                   .dbsym l toggle -4 c
 0167                   .dbend
 0167                   .dbfunc e pinMode _pinMode fV
 0167           ;        bitMask -> X+2
 0167           ;              i -> X+0
 0167           ;          state -> X-6
 0167           ;            pin -> X-5
 0167           ;           port -> X-4
 0167           _pinMode::
 0167                   .dbline -1
 0167 10                push X
 0168 4F                mov X,SP
 0169 3805              add SP,5
 016B                   .dbline 88
 016B           ; }
 016B           ; 
 016B           ; // Sets the pin mode
 016B           ; void pinMode(unsigned char port, unsigned char pin, unsigned char state) {
 016B                   .dbline 90
 016B           ;       int i;
 016B           ;       BYTE bitMask = 1;
 016B 560201            mov [X+2],1
 016E                   .dbline 91
 016E           ;       for(i = 0; i < pin; i++) { bitMask *= 2; }
 016E 560100            mov [X+1],0
 0171 560000            mov [X+0],0
 0174 8008              xjmp L26
 0176           L23:
 0176                   .dbline 91
 0176                   .dbline 91
 0176 6602              asl [X+2]
 0178                   .dbline 91
 0178           L24:
 0178                   .dbline 91
 0178 7701              inc [X+1]
 017A 0F0000            adc [X+0],0
 017D           L26:
 017D                   .dbline 91
 017D 52FB              mov A,[X-5]
 017F 5300              mov [__r1],A
 0181 5201              mov A,[X+1]
 0183 1200              sub A,[__r1]
 0185 5000              mov A,0
 0187 3180              xor A,-128
 0189 5300              mov [__rX],A
 018B 5200              mov A,[X+0]
 018D 3180              xor A,-128
 018F 1A00              sbb A,[__rX]
 0191 CFE4              jc L23
 0193           X5:
 0193                   .dbline 93
 0193           ; 
 0193           ;       switch (state) {
 0193 52FA              mov A,[X-6]
 0195 5404              mov [X+4],A
 0197 560300            mov [X+3],0
 019A 3D0300            cmp [X+3],0
 019D B006              jnz X6
 019F 3D0400            cmp [X+4],0
 01A2 A017              jz L30
 01A4           X6:
 01A4 3D0300            cmp [X+3],0
 01A7 B006              jnz X7
 01A9 3D0401            cmp [X+4],1
 01AC A091              jz L37
 01AE           X7:
 01AE 3D0300            cmp [X+3],0
 01B1 B006              jnz X8
 01B3 3D0403            cmp [X+4],3
 01B6 A10E              jz L44
 01B8           X8:
 01B8 8194              xjmp L28
 01BA           L30:
 01BA                   .dbline 95
 01BA           ;               case 0: // Resistive Pulldown
 01BA           ;                       if(port == 0) { PRT0DM2 &= ~bitMask; PRT0DM1 &= ~bitMask; PRT0DM0 &= ~bitMask; }
 01BA 3DFC00            cmp [X-4],0
 01BD B028              jnz L31
 01BF                   .dbline 95
 01BF                   .dbline 95
 01BF 5202              mov A,[X+2]
 01C1 73                cpl A
 01C2 5300              mov [__r0],A
 01C4 5D03              mov A,REG[0x3]
 01C6 2200              and A,[__r0]
 01C8 6003              mov REG[0x3],A
 01CA                   .dbline 95
 01CA 5202              mov A,[X+2]
 01CC 73                cpl A
 01CD 5300              mov [__r0],A
 01CF 7110              or F,0x10  ; iopage = 1
 01D1 5D01              mov A,REG[0x1]
 01D3 2200              and A,[__r0]
 01D5 6001              mov REG[0x1],A
 01D7                   .dbline 95
 01D7 5202              mov A,[X+2]
 01D9 73                cpl A
 01DA 5300              mov [__r0],A
 01DC 5D00              mov A,REG[0]
 01DE 2200              and A,[__r0]
 01E0 6000              mov REG[0],A
 01E2                   .dbline 95
 01E2 70CF              and F,0xCF      ; iopage = 0
 01E4 8168              xjmp L28
 01E6           L31:
 01E6                   .dbline 96
 01E6           ;                       else if(port == 1) { PRT1DM2 &= ~bitMask; PRT1DM1 &= ~bitMask; PRT1DM0 &= ~bitMask; }
 01E6 3DFC01            cmp [X-4],1
 01E9 B028              jnz L33
 01EB                   .dbline 96
 01EB                   .dbline 96
 01EB 5202              mov A,[X+2]
 01ED 73                cpl A
 01EE 5300              mov [__r0],A
 01F0 5D07              mov A,REG[0x7]
 01F2 2200              and A,[__r0]
 01F4 6007              mov REG[0x7],A
 01F6                   .dbline 96
 01F6 5202              mov A,[X+2]
 01F8 73                cpl A
 01F9 5300              mov [__r0],A
 01FB 7110              or F,0x10  ; iopage = 1
 01FD 5D05              mov A,REG[0x5]
 01FF 2200              and A,[__r0]
 0201 6005              mov REG[0x5],A
 0203                   .dbline 96
 0203 5202              mov A,[X+2]
 0205 73                cpl A
 0206 5300              mov [__r0],A
 0208 5D04              mov A,REG[0x4]
 020A 2200              and A,[__r0]
 020C 6004              mov REG[0x4],A
 020E                   .dbline 96
 020E 70CF              and F,0xCF      ; iopage = 0
 0210 813C              xjmp L28
 0212           L33:
 0212                   .dbline 97
 0212           ;                       else if(port == 2) { PRT2DM2 &= ~bitMask; PRT2DM1 &= ~bitMask; PRT2DM0 &= ~bitMask; }
 0212 3DFC02            cmp [X-4],2
 0215 B137              jnz L28
 0217                   .dbline 97
 0217                   .dbline 97
 0217 5202              mov A,[X+2]
 0219 73                cpl A
 021A 5300              mov [__r0],A
 021C 5D0B              mov A,REG[0xb]
 021E 2200              and A,[__r0]
 0220 600B              mov REG[0xb],A
 0222                   .dbline 97
 0222 5202              mov A,[X+2]
 0224 73                cpl A
 0225 5300              mov [__r0],A
 0227 7110              or F,0x10  ; iopage = 1
 0229 5D09              mov A,REG[0x9]
 022B 2200              and A,[__r0]
 022D 6009              mov REG[0x9],A
 022F                   .dbline 97
 022F 5202              mov A,[X+2]
 0231 73                cpl A
 0232 5300              mov [__r0],A
 0234 5D08              mov A,REG[0x8]
 0236 2200              and A,[__r0]
 0238 6008              mov REG[0x8],A
 023A                   .dbline 97
 023A                   .dbline 98
 023A           ;                       break;
 023A 70CF              and F,0xCF      ; iopage = 0
 023C 8110              xjmp L28
 023E           L37:
 023E                   .dbline 100
 023E           ;               case 1: // Strong
 023E           ;                       if(port == 0) { PRT0DM2 &= ~bitMask; PRT0DM1 &= ~bitMask; PRT0DM0 |= bitMask; }
 023E 3DFC00            cmp [X-4],0
 0241 B029              jnz L38
 0243                   .dbline 100
 0243                   .dbline 100
 0243 5202              mov A,[X+2]
 0245 73                cpl A
 0246 5300              mov [__r0],A
 0248 5D03              mov A,REG[0x3]
 024A 2200              and A,[__r0]
 024C 6003              mov REG[0x3],A
 024E                   .dbline 100
 024E 5202              mov A,[X+2]
 0250 73                cpl A
 0251 5300              mov [__r0],A
 0253 7110              or F,0x10  ; iopage = 1
 0255 5D01              mov A,REG[0x1]
 0257 2200              and A,[__r0]
 0259 6001              mov REG[0x1],A
 025B                   .dbline 100
 025B 5D00              mov A,REG[0]
 025D 5300              mov [__r0],A
 025F 5202              mov A,[X+2]
 0261 2C00              or [__r0],A
 0263 5100              mov A,[__r0]
 0265 6000              mov REG[0],A
 0267                   .dbline 100
 0267 70CF              and F,0xCF      ; iopage = 0
 0269 80E3              xjmp L28
 026B           L38:
 026B                   .dbline 101
 026B           ;                       else if(port == 1) { PRT1DM2 &= ~bitMask; PRT1DM1 &= ~bitMask; PRT1DM0 |= bitMask; }
 026B 3DFC01            cmp [X-4],1
 026E B029              jnz L40
 0270                   .dbline 101
 0270                   .dbline 101
 0270 5202              mov A,[X+2]
 0272 73                cpl A
 0273 5300              mov [__r0],A
 0275 5D07              mov A,REG[0x7]
 0277 2200              and A,[__r0]
 0279 6007              mov REG[0x7],A
 027B                   .dbline 101
 027B 5202              mov A,[X+2]
 027D 73                cpl A
 027E 5300              mov [__r0],A
 0280 7110              or F,0x10  ; iopage = 1
 0282 5D05              mov A,REG[0x5]
 0284 2200              and A,[__r0]
 0286 6005              mov REG[0x5],A
 0288                   .dbline 101
 0288 5D04              mov A,REG[0x4]
 028A 5300              mov [__r0],A
 028C 5202              mov A,[X+2]
 028E 2C00              or [__r0],A
 0290 5100              mov A,[__r0]
 0292 6004              mov REG[0x4],A
 0294                   .dbline 101
 0294 70CF              and F,0xCF      ; iopage = 0
 0296 80B6              xjmp L28
 0298           L40:
 0298                   .dbline 102
 0298           ;                       else if(port == 2) { PRT2DM2 &= ~bitMask; PRT2DM1 &= ~bitMask; PRT2DM0 |= bitMask; }
 0298 3DFC02            cmp [X-4],2
 029B B0B1              jnz L28
 029D                   .dbline 102
 029D                   .dbline 102
 029D 5202              mov A,[X+2]
 029F 73                cpl A
 02A0 5300              mov [__r0],A
 02A2 5D0B              mov A,REG[0xb]
 02A4 2200              and A,[__r0]
 02A6 600B              mov REG[0xb],A
 02A8                   .dbline 102
 02A8 5202              mov A,[X+2]
 02AA 73                cpl A
 02AB 5300              mov [__r0],A
 02AD 7110              or F,0x10  ; iopage = 1
 02AF 5D09              mov A,REG[0x9]
 02B1 2200              and A,[__r0]
 02B3 6009              mov REG[0x9],A
 02B5                   .dbline 102
 02B5 5D08              mov A,REG[0x8]
 02B7 5300              mov [__r0],A
 02B9 5202              mov A,[X+2]
 02BB 2C00              or [__r0],A
 02BD 5100              mov A,[__r0]
 02BF 6008              mov REG[0x8],A
 02C1                   .dbline 102
 02C1                   .dbline 103
 02C1           ;                       break;
 02C1 70CF              and F,0xCF      ; iopage = 0
 02C3 8089              xjmp L28
 02C5           L44:
 02C5                   .dbline 105
 02C5           ;               case 3: // Pull up
 02C5           ;                       if(port == 0) { PRT0DM2 &= ~bitMask; PRT0DM1 |= bitMask; PRT0DM0 |= bitMask; }
 02C5 3DFC00            cmp [X-4],0
 02C8 B02A              jnz L45
 02CA                   .dbline 105
 02CA                   .dbline 105
 02CA 5202              mov A,[X+2]
 02CC 73                cpl A
 02CD 5300              mov [__r0],A
 02CF 5D03              mov A,REG[0x3]
 02D1 2200              and A,[__r0]
 02D3 6003              mov REG[0x3],A
 02D5                   .dbline 105
 02D5 7110              or F,0x10  ; iopage = 1
 02D7 5D01              mov A,REG[0x1]
 02D9 5300              mov [__r0],A
 02DB 5202              mov A,[X+2]
 02DD 2C00              or [__r0],A
 02DF 5100              mov A,[__r0]
 02E1 6001              mov REG[0x1],A
 02E3                   .dbline 105
 02E3 5D00              mov A,REG[0]
 02E5 5300              mov [__r0],A
 02E7 5202              mov A,[X+2]
 02E9 2C00              or [__r0],A
 02EB 5100              mov A,[__r0]
 02ED 6000              mov REG[0],A
 02EF                   .dbline 105
 02EF 70CF              and F,0xCF      ; iopage = 0
 02F1 805B              xjmp L28
 02F3           L45:
 02F3                   .dbline 106
 02F3           ;                       else if(port == 1) { PRT1DM2 &= ~bitMask; PRT1DM1 |= bitMask; PRT1DM0 |= bitMask; }
 02F3 3DFC01            cmp [X-4],1
 02F6 B02A              jnz L47
 02F8                   .dbline 106
 02F8                   .dbline 106
 02F8 5202              mov A,[X+2]
 02FA 73                cpl A
 02FB 5300              mov [__r0],A
 02FD 5D07              mov A,REG[0x7]
 02FF 2200              and A,[__r0]
 0301 6007              mov REG[0x7],A
 0303                   .dbline 106
 0303 7110              or F,0x10  ; iopage = 1
 0305 5D05              mov A,REG[0x5]
 0307 5300              mov [__r0],A
 0309 5202              mov A,[X+2]
 030B 2C00              or [__r0],A
 030D 5100              mov A,[__r0]
 030F 6005              mov REG[0x5],A
 0311                   .dbline 106
 0311 5D04              mov A,REG[0x4]
 0313 5300              mov [__r0],A
 0315 5202              mov A,[X+2]
 0317 2C00              or [__r0],A
 0319 5100              mov A,[__r0]
 031B 6004              mov REG[0x4],A
 031D                   .dbline 106
 031D 70CF              and F,0xCF      ; iopage = 0
 031F 802D              xjmp L28
 0321           L47:
 0321                   .dbline 107
 0321           ;                       else if(port == 2) { PRT2DM2 &= ~bitMask; PRT2DM1 |= bitMask; PRT2DM0 |= bitMask; }
 0321 3DFC02            cmp [X-4],2
 0324 B028              jnz L28
 0326                   .dbline 107
 0326                   .dbline 107
 0326 5202              mov A,[X+2]
 0328 73                cpl A
 0329 5300              mov [__r0],A
 032B 5D0B              mov A,REG[0xb]
 032D 2200              and A,[__r0]
 032F 600B              mov REG[0xb],A
 0331                   .dbline 107
 0331 7110              or F,0x10  ; iopage = 1
 0333 5D09              mov A,REG[0x9]
 0335 5300              mov [__r0],A
 0337 5202              mov A,[X+2]
 0339 2C00              or [__r0],A
 033B 5100              mov A,[__r0]
 033D 6009              mov REG[0x9],A
 033F                   .dbline 107
 033F 5D08              mov A,REG[0x8]
 0341 5300              mov [__r0],A
 0343 5202              mov A,[X+2]
 0345 2C00              or [__r0],A
 0347 5100              mov A,[__r0]
 0349 6008              mov REG[0x8],A
 034B                   .dbline 107
 034B                   .dbline 108
 034B           ;                       break;
 034B                   .dbline 110
 034B           ;               default:
 034B           ;                       break;
 034B 70CF              and F,0xCF      ; iopage = 0
 034D           L28:
 034D                   .dbline -2
 034D           L22:
 034D 38FB              add SP,-5
 034F 20                pop X
 0350                   .dbline 0 ; func end
 0350 7F                ret
 0351                   .dbsym l bitMask 2 c
 0351                   .dbsym l i 0 I
 0351                   .dbsym l state -6 c
 0351                   .dbsym l pin -5 c
 0351                   .dbsym l port -4 c
 0351                   .dbend
 0351                   .dbfunc e digitalWrite _digitalWrite fV
 0351           ;        bitMask -> X+2
 0351           ;              i -> X+0
 0351           ;          state -> X-6
 0351           ;            pin -> X-5
 0351           ;           port -> X-4
 0351           _digitalWrite::
 0351                   .dbline -1
 0351 10                push X
 0352 4F                mov X,SP
 0353 3805              add SP,5
 0355                   .dbline 117
 0355           ;       } 
 0355           ; }
 0355           ; 
 0355           ; 
 0355           ; // Function for setting pins
 0355           ; // 0 = low, 1 = high, 2 = toggle
 0355           ; void digitalWrite(unsigned char port, unsigned char pin, unsigned char state) {
 0355                   .dbline 119
 0355           ;       int i ;
 0355           ;       BYTE bitMask = 1; 
 0355 560201            mov [X+2],1
 0358                   .dbline 120
 0358           ;       for(i = 0; i < pin; i++) { bitMask *= 2; }
 0358 560100            mov [X+1],0
 035B 560000            mov [X+0],0
 035E 8008              xjmp L55
 0360           L52:
 0360                   .dbline 120
 0360                   .dbline 120
 0360 6602              asl [X+2]
 0362                   .dbline 120
 0362           L53:
 0362                   .dbline 120
 0362 7701              inc [X+1]
 0364 0F0000            adc [X+0],0
 0367           L55:
 0367                   .dbline 120
 0367 52FB              mov A,[X-5]
 0369 5300              mov [__r1],A
 036B 5201              mov A,[X+1]
 036D 1200              sub A,[__r1]
 036F 5000              mov A,0
 0371 3180              xor A,-128
 0373 5300              mov [__rX],A
 0375 5200              mov A,[X+0]
 0377 3180              xor A,-128
 0379 1A00              sbb A,[__rX]
 037B CFE4              jc L52
 037D           X9:
 037D                   .dbline 122
 037D           ; 
 037D           ;       switch (state) {
 037D 52FA              mov A,[X-6]
 037F 5404              mov [X+4],A
 0381 560300            mov [X+3],0
 0384 3D0300            cmp [X+3],0
 0387 B006              jnz X10
 0389 3D0400            cmp [X+4],0
 038C A017              jz L59
 038E           X10:
 038E 3D0300            cmp [X+3],0
 0391 B006              jnz X11
 0393 3D0401            cmp [X+4],1
 0396 A043              jz L66
 0398           X11:
 0398 3D0300            cmp [X+3],0
 039B B006              jnz X12
 039D 3D0402            cmp [X+4],2
 03A0 A072              jz L73
 03A2           X12:
 03A2 80A7              xjmp L57
 03A4           L59:
 03A4                   .dbline 124
 03A4           ;               case 0:
 03A4           ;                       if(port == 0) PRT0DR &= ~bitMask;
 03A4 3DFC00            cmp [X-4],0
 03A7 B00E              jnz L60
 03A9                   .dbline 124
 03A9 5202              mov A,[X+2]
 03AB 73                cpl A
 03AC 5300              mov [__r0],A
 03AE 5D00              mov A,REG[0]
 03B0 2200              and A,[__r0]
 03B2 6000              mov REG[0],A
 03B4 8095              xjmp L57
 03B6           L60:
 03B6                   .dbline 125
 03B6           ;                       else if(port == 1) PRT1DR &= ~bitMask;
 03B6 3DFC01            cmp [X-4],1
 03B9 B00E              jnz L62
 03BB                   .dbline 125
 03BB 5202              mov A,[X+2]
 03BD 73                cpl A
 03BE 5300              mov [__r0],A
 03C0 5D04              mov A,REG[0x4]
 03C2 2200              and A,[__r0]
 03C4 6004              mov REG[0x4],A
 03C6 8083              xjmp L57
 03C8           L62:
 03C8                   .dbline 126
 03C8           ;                       else if(port == 2) PRT2DR &= ~bitMask;
 03C8 3DFC02            cmp [X-4],2
 03CB B07E              jnz L57
 03CD                   .dbline 126
 03CD 5202              mov A,[X+2]
 03CF 73                cpl A
 03D0 5300              mov [__r0],A
 03D2 5D08              mov A,REG[0x8]
 03D4 2200              and A,[__r0]
 03D6 6008              mov REG[0x8],A
 03D8                   .dbline 127
 03D8           ;                       break;
 03D8 8071              xjmp L57
 03DA           L66:
 03DA                   .dbline 129
 03DA           ;               case 1:
 03DA           ;                       if(port == 0) PRT0DR |= bitMask;
 03DA 3DFC00            cmp [X-4],0
 03DD B00F              jnz L67
 03DF                   .dbline 129
 03DF 5D00              mov A,REG[0]
 03E1 5300              mov [__r0],A
 03E3 5202              mov A,[X+2]
 03E5 2C00              or [__r0],A
 03E7 5100              mov A,[__r0]
 03E9 6000              mov REG[0],A
 03EB 805E              xjmp L57
 03ED           L67:
 03ED                   .dbline 130
 03ED           ;                       else if(port == 1) PRT1DR |= bitMask;
 03ED 3DFC01            cmp [X-4],1
 03F0 B00F              jnz L69
 03F2                   .dbline 130
 03F2 5D04              mov A,REG[0x4]
 03F4 5300              mov [__r0],A
 03F6 5202              mov A,[X+2]
 03F8 2C00              or [__r0],A
 03FA 5100              mov A,[__r0]
 03FC 6004              mov REG[0x4],A
 03FE 804B              xjmp L57
 0400           L69:
 0400                   .dbline 131
 0400           ;                       else if(port == 2) PRT2DR |= bitMask;
 0400 3DFC02            cmp [X-4],2
 0403 B046              jnz L57
 0405                   .dbline 131
 0405 5D08              mov A,REG[0x8]
 0407 5300              mov [__r0],A
 0409 5202              mov A,[X+2]
 040B 2C00              or [__r0],A
 040D 5100              mov A,[__r0]
 040F 6008              mov REG[0x8],A
 0411                   .dbline 132
 0411           ;                       break; 
 0411 8038              xjmp L57
 0413           L73:
 0413                   .dbline 134
 0413           ;               case 2:
 0413           ;                       if(port == 0) PRT0DR ^= bitMask;
 0413 3DFC00            cmp [X-4],0
 0416 B00F              jnz L74
 0418                   .dbline 134
 0418 5D00              mov A,REG[0]
 041A 5300              mov [__r0],A
 041C 5202              mov A,[X+2]
 041E 3400              xor [__r0],A
 0420 5100              mov A,[__r0]
 0422 6000              mov REG[0],A
 0424 8025              xjmp L57
 0426           L74:
 0426                   .dbline 135
 0426           ;                       else if(port == 1) PRT1DR ^= bitMask;
 0426 3DFC01            cmp [X-4],1
 0429 B00F              jnz L76
 042B                   .dbline 135
 042B 5D04              mov A,REG[0x4]
 042D 5300              mov [__r0],A
 042F 5202              mov A,[X+2]
 0431 3400              xor [__r0],A
 0433 5100              mov A,[__r0]
 0435 6004              mov REG[0x4],A
 0437 8012              xjmp L57
 0439           L76:
 0439                   .dbline 136
 0439           ;                       else if(port == 2) PRT2DR ^= bitMask;
 0439 3DFC02            cmp [X-4],2
 043C B00D              jnz L57
 043E                   .dbline 136
 043E 5D08              mov A,REG[0x8]
 0440 5300              mov [__r0],A
 0442 5202              mov A,[X+2]
 0444 3400              xor [__r0],A
 0446 5100              mov A,[__r0]
 0448 6008              mov REG[0x8],A
 044A                   .dbline 137
 044A           ;                       break;
 044A                   .dbline 139
 044A           ;               default:
 044A           ;                       break;
 044A           L57:
 044A                   .dbline -2
 044A           L51:
 044A 38FB              add SP,-5
 044C 20                pop X
 044D                   .dbline 0 ; func end
 044D 7F                ret
 044E                   .dbsym l bitMask 2 c
 044E                   .dbsym l i 0 I
 044E                   .dbsym l state -6 c
 044E                   .dbsym l pin -5 c
 044E                   .dbsym l port -4 c
 044E                   .dbend
