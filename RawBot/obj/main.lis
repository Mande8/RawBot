                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area data(ram, con, rel)
 0000                   .dbfile ./main.c
 0000           _timer8MainTick::
 0000                   .blkb 2
                        .area idata(rom,lit)
 0000 0000              .word 0
                        .area data(ram, con, rel)
 0002                   .dbfile ./main.c
 0002                   .dbfile C:\Projects\RawBot\RawBot\main.c
 0002                   .dbsym e timer8MainTick _timer8MainTick I
 0002           _timer8MainCount::
 0002                   .blkb 2
                        .area idata(rom,lit)
 0002 0000              .word 0
                        .area data(ram, con, rel)
 0004                   .dbfile C:\Projects\RawBot\RawBot\main.c
 0004                   .dbsym e timer8MainCount _timer8MainCount i
 0004           _gpioTick::
 0004                   .blkb 2
                        .area idata(rom,lit)
 0004 0000              .word 0
                        .area data(ram, con, rel)
 0006                   .dbfile C:\Projects\RawBot\RawBot\main.c
 0006                   .dbsym e gpioTick _gpioTick I
 0006           _usRawTime::
 0006                   .blkb 4
                        .area idata(rom,lit)
 0006 00000000          .word 0,0
                        .area data(ram, con, rel)
 000A                   .dbfile C:\Projects\RawBot\RawBot\main.c
 000A                   .dbsym e usRawTime _usRawTime l
 000A           _usDistance::
 000A                   .blkb 4
                        .area idata(rom,lit)
 000A 00000000          .word 0,0
                        .area data(ram, con, rel)
 000E                   .dbfile C:\Projects\RawBot\RawBot\main.c
 000E                   .dbsym e usDistance _usDistance l
 000E           _isrClear::
 000E                   .blkb 2
                        .area idata(rom,lit)
 000E 0000              .word 0
                        .area data(ram, con, rel)
 0010                   .dbfile C:\Projects\RawBot\RawBot\main.c
 0010                   .dbsym e isrClear _isrClear I
 0010           _usEchoRisingEdge::
 0010                   .blkb 2
                        .area idata(rom,lit)
 0010 0000              .word 0
                        .area data(ram, con, rel)
 0012                   .dbfile C:\Projects\RawBot\RawBot\main.c
 0012                   .dbsym e usEchoRisingEdge _usEchoRisingEdge I
 0012           _usEchoFallingEdge::
 0012                   .blkb 2
                        .area idata(rom,lit)
 0012 0000              .word 0
                        .area data(ram, con, rel)
 0014                   .dbfile C:\Projects\RawBot\RawBot\main.c
 0014                   .dbsym e usEchoFallingEdge _usEchoFallingEdge I
 0014           _servoMiddle::
 0014                   .blkb 2
                        .area idata(rom,lit)
 0014 012C              .word 300
                        .area data(ram, con, rel)
 0016                   .dbfile C:\Projects\RawBot\RawBot\main.c
 0016                   .dbsym e servoMiddle _servoMiddle i
 0016           _servoRange::
 0016                   .blkb 2
                        .area idata(rom,lit)
 0016 00C8              .word 200
                        .area data(ram, con, rel)
 0018                   .dbfile C:\Projects\RawBot\RawBot\main.c
 0018                   .dbsym e servoRange _servoRange i
 0018           _servoAngle::
 0018                   .blkb 2
                        .area idata(rom,lit)
 0018 0000              .word 0
                        .area data(ram, con, rel)
 001A                   .dbfile C:\Projects\RawBot\RawBot\main.c
 001A                   .dbsym e servoAngle _servoAngle I
                        .area text(rom, con, rel)
 0000                   .dbfile C:\Projects\RawBot\RawBot\main.c
 0000                   .dbfunc e Timer8Main_ISR _Timer8Main_ISR fV
 0000           _Timer8Main_ISR::
 0000                   .dbline -1
 0000 08                push A
 0001                   .dbline 59
 0001           ; /**********
 0001           ; *  Notes  *
 0001           ; **********/
 0001           ; 
 0001           ; // Connections:
 0001           ; // Port 0 - Outputs
 0001           ; //    P00 - HBRIDGE_IN1
 0001           ; //    P01 - HBRIDGE_IN2
 0001           ; //    P02 - HBRIDGE_IN3
 0001           ; //    P03 - HBRIDGE_IN4
 0001           ; //    P04 - 
 0001           ; //    P05 - 
 0001           ; //    P06 - US_TRIG
 0001           ; //    P07 - SERVO
 0001           ; // Port 1 - Inputs
 0001           ; //    P10 - Not usable
 0001           ; //    P11 - 
 0001           ; //    P12 - 
 0001           ; //    P13 - 
 0001           ; //    P14 - 
 0001           ; //    P15 - 
 0001           ; //    P16 - 
 0001           ; //    P17 - US_ECHO
 0001           ; 
 0001           ; /*************
 0001           ; *  Includes  *
 0001           ; *************/
 0001           ; 
 0001           ; #include <m8c.h>
 0001           ; #include <stdbool.h>
 0001           ; #include "PSoCAPI.h"
 0001           ; #include "LCD.h"
 0001           ; #include "Timer8Main.h"
 0001           ; #include "Timer8UsTrig.h"
 0001           ; #include "Timer16UsEcho.h"
 0001           ; #include "Functions.h"
 0001           ; 
 0001           ; /**************************
 0001           ; *  Variable declarations  *
 0001           ; **************************/
 0001           ; 
 0001           ; bool timer8MainTick = false;
 0001           ; unsigned int timer8MainCount = 0;
 0001           ; bool gpioTick = false;
 0001           ; unsigned long usRawTime = 0;
 0001           ; unsigned long usDistance = 0;
 0001           ; int isrClear = 0;
 0001           ; int usEchoRisingEdge = 0;
 0001           ; int usEchoFallingEdge = 0;
 0001           ; unsigned int servoMiddle = 300;
 0001           ; unsigned int servoRange = 200;
 0001           ; int servoAngle = 0;
 0001           ; 
 0001           ; /***********************
 0001           ; *  Interrupt handlers  *
 0001           ; ***********************/
 0001           ; 
 0001           ; #pragma interrupt_handler Timer8Main_ISR
 0001           ; void Timer8Main_ISR(void) {
 0001                   .dbline 60
 0001           ;       timer8MainTick = true;
 0001 550101            mov [_timer8MainTick+1],1
 0004 550000            mov [_timer8MainTick],0
 0007                   .dbline 61
 0007           ;       timer8MainCount++;
 0007 7603              inc [_timer8MainCount+1]
 0009 0E0200            adc [_timer8MainCount],0
 000C                   .dbline -2
 000C           L1:
 000C 18                pop A
 000D                   .dbline 0 ; func end
 000D 7E                reti
 000E                   .dbend
 000E                   .dbfunc e Timer8UsTrig_ISR _Timer8UsTrig_ISR fV
 000E           _Timer8UsTrig_ISR::
 000E                   .dbline -1
 000E 08                push A
 000F 5100              mov A,[__r0]
 0011 08                push A
 0012 5100              mov A,[__r1]
 0014 08                push A
 0015 5100              mov A,[__r2]
 0017 08                push A
 0018 5100              mov A,[__r3]
 001A 08                push A
 001B 5100              mov A,[__r4]
 001D 08                push A
 001E 5100              mov A,[__r5]
 0020 08                push A
 0021 5100              mov A,[__r6]
 0023 08                push A
 0024 5100              mov A,[__r7]
 0026 08                push A
 0027 5100              mov A,[__r8]
 0029 08                push A
 002A 5100              mov A,[__r9]
 002C 08                push A
 002D 5100              mov A,[__r10]
 002F 08                push A
 0030 5100              mov A,[__r11]
 0032 08                push A
 0033 5100              mov A,[__rX]
 0035 08                push A
 0036 5100              mov A,[__rY]
 0038 08                push A
 0039 5100              mov A,[__rZ]
 003B 08                push A
 003C                   .dbline 66
 003C           ;       
 003C           ; }
 003C           ; 
 003C           ; #pragma interrupt_handler Timer8UsTrig_ISR
 003C           ; void Timer8UsTrig_ISR(void) {
 003C                   .dbline 67
 003C           ;       digitalWrite(0, 6, 0); // Stop the trigger signal
 003C 5000              mov A,0
 003E 08                push A
 003F 5006              mov A,6
 0041 08                push A
 0042 5000              mov A,0
 0044 08                push A
 0045 7C0000            xcall _digitalWrite
 0048 38FD              add SP,-3
 004A                   .dbline 68
 004A           ;       Timer8UsTrig_Stop();
 004A 10                push X
 004B 7C0000            xcall _Timer8UsTrig_Stop
 004E 20                pop X
 004F                   .dbline -2
 004F           L2:
 004F 18                pop A
 0050 5300              mov [__rZ],A
 0052 18                pop A
 0053 5300              mov [__rY],A
 0055 18                pop A
 0056 5300              mov [__rX],A
 0058 18                pop A
 0059 5300              mov [__r11],A
 005B 18                pop A
 005C 5300              mov [__r10],A
 005E 18                pop A
 005F 5300              mov [__r9],A
 0061 18                pop A
 0062 5300              mov [__r8],A
 0064 18                pop A
 0065 5300              mov [__r7],A
 0067 18                pop A
 0068 5300              mov [__r6],A
 006A 18                pop A
 006B 5300              mov [__r5],A
 006D 18                pop A
 006E 5300              mov [__r4],A
 0070 18                pop A
 0071 5300              mov [__r3],A
 0073 18                pop A
 0074 5300              mov [__r2],A
 0076 18                pop A
 0077 5300              mov [__r1],A
 0079 18                pop A
 007A 5300              mov [__r0],A
 007C 18                pop A
 007D                   .dbline 0 ; func end
 007D 7E                reti
 007E                   .dbend
 007E                   .dbfunc e Timer16UsEcho_ISR _Timer16UsEcho_ISR fV
 007E           ; timer16Overflow -> X+0
 007E           _Timer16UsEcho_ISR::
 007E                   .dbline -1
 007E 08                push A
 007F 10                push X
 0080 4F                mov X,SP
 0081 3802              add SP,2
 0083                   .dbline 73
 0083           ; }
 0083           ; 
 0083           ; // usDistance > 400 cm --> no objects in sight
 0083           ; #pragma interrupt_handler Timer16UsEcho_ISR
 0083           ; void Timer16UsEcho_ISR(void) {
 0083                   .dbline 74
 0083           ;       int timer16Overflow = 1;
 0083 560101            mov [X+1],1
 0086 560000            mov [X+0],0
 0089                   .dbline 75
 0089           ;       timer16Overflow++;
 0089 7701              inc [X+1]
 008B 0F0000            adc [X+0],0
 008E                   .dbline -2
 008E           L3:
 008E 38FE              add SP,-2
 0090 20                pop X
 0091 18                pop A
 0092                   .dbline 0 ; func end
 0092 7E                reti
 0093                   .dbsym l timer16Overflow 0 I
 0093                   .dbend
 0093                   .dbfunc e GPIO_ISR _GPIO_ISR fV
 0093           _GPIO_ISR::
 0093                   .dbline -1
 0093 08                push A
 0094 5100              mov A,[__r0]
 0096 08                push A
 0097 5100              mov A,[__r1]
 0099 08                push A
 009A 5100              mov A,[__r2]
 009C 08                push A
 009D 5100              mov A,[__r3]
 009F 08                push A
 00A0 5100              mov A,[__r4]
 00A2 08                push A
 00A3 5100              mov A,[__r5]
 00A5 08                push A
 00A6 5100              mov A,[__r6]
 00A8 08                push A
 00A9 5100              mov A,[__r7]
 00AB 08                push A
 00AC 5100              mov A,[__r8]
 00AE 08                push A
 00AF 5100              mov A,[__r9]
 00B1 08                push A
 00B2 5100              mov A,[__r10]
 00B4 08                push A
 00B5 5100              mov A,[__r11]
 00B7 08                push A
 00B8 5100              mov A,[__rX]
 00BA 08                push A
 00BB 5100              mov A,[__rY]
 00BD 08                push A
 00BE 5100              mov A,[__rZ]
 00C0 08                push A
 00C1                   .dbline 79
 00C1           ; }
 00C1           ; 
 00C1           ; #pragma interrupt_handler GPIO_ISR
 00C1           ; void GPIO_ISR(void) {
 00C1                   .dbline 80
 00C1           ;       gpioTick = true;
 00C1 550501            mov [_gpioTick+1],1
 00C4 550400            mov [_gpioTick],0
 00C7                   .dbline 83
 00C7           ;       
 00C7           ;       // Echo signal rising edge
 00C7           ;       if (US_ECHO_Data_ADDR & US_ECHO_MASK) {
 00C7 5D04              mov A,REG[0x4]
 00C9 5300              mov [__r0],A
 00CB 470080            tst [__r0],-128
 00CE A014              jz L5
 00D0                   .dbline 84
 00D0           ;               Timer16UsEcho_WritePeriod(46400);       
 00D0                   .dbline 84
 00D0 10                push X
 00D1 57B5              mov X,-75
 00D3 5040              mov A,64
 00D5 7C0000            xcall _Timer16UsEcho_WritePeriod
 00D8                   .dbline 85
 00D8           ;               Timer16UsEcho_Start(); // Used to measure time until echo signal is returned
 00D8 7C0000            xcall _Timer16UsEcho_Start
 00DB 20                pop X
 00DC                   .dbline 86
 00DC           ;               usEchoRisingEdge++;
 00DC 7611              inc [_usEchoRisingEdge+1]
 00DE 0E1000            adc [_usEchoRisingEdge],0
 00E1                   .dbline 89
 00E1           ;               
 00E1           ;       // Echo signal falling edge
 00E1           ;       } else {
 00E1 8064              xjmp L6
 00E3           L5:
 00E3                   .dbline 89
 00E3                   .dbline 90
 00E3           ;               usRawTime = Timer16UsEcho_wReadTimer();
 00E3 10                push X
 00E4 7C0000            xcall _Timer16UsEcho_wReadTimer
 00E7 5A00              mov [__r0],X
 00E9 20                pop X
 00EA 5309              mov [_usRawTime+3],A
 00EC 5F0800            mov [_usRawTime+2],[__r0]
 00EF 550700            mov [_usRawTime+1],0
 00F2 550600            mov [_usRawTime],0
 00F5                   .dbline 91
 00F5           ;               lcdAssign(usRawTime, LCD_TOP);
 00F5 5000              mov A,0
 00F7 08                push A
 00F8 08                push A
 00F9 5106              mov A,[_usRawTime]
 00FB 08                push A
 00FC 5107              mov A,[_usRawTime+1]
 00FE 08                push A
 00FF 5108              mov A,[_usRawTime+2]
 0101 08                push A
 0102 5109              mov A,[_usRawTime+3]
 0104 08                push A
 0105 7C0000            xcall _lcdAssign
 0108 38FA              add SP,-6
 010A                   .dbline 92
 010A           ;               usDistance = usCalculateDistance(usRawTime);
 010A 5106              mov A,[_usRawTime]
 010C 08                push A
 010D 5107              mov A,[_usRawTime+1]
 010F 08                push A
 0110 5108              mov A,[_usRawTime+2]
 0112 08                push A
 0113 5109              mov A,[_usRawTime+3]
 0115 08                push A
 0116 7C0000            xcall _usCalculateDistance
 0119 5F0A00            mov [_usDistance],[__r0]
 011C 5F0B00            mov [_usDistance+1],[__r1]
 011F 5F0C00            mov [_usDistance+2],[__r2]
 0122 5F0D00            mov [_usDistance+3],[__r3]
 0125                   .dbline 93
 0125           ;               lcdAssign(usDistance, LCD_BOTTOM);
 0125 5000              mov A,0
 0127 08                push A
 0128 5001              mov A,1
 012A 08                push A
 012B 510A              mov A,[_usDistance]
 012D 08                push A
 012E 510B              mov A,[_usDistance+1]
 0130 08                push A
 0131 510C              mov A,[_usDistance+2]
 0133 08                push A
 0134 510D              mov A,[_usDistance+3]
 0136 08                push A
 0137 7C0000            xcall _lcdAssign
 013A 38F6              add SP,-10
 013C                   .dbline 94
 013C           ;               Timer16UsEcho_Stop();
 013C 10                push X
 013D 7C0000            xcall _Timer16UsEcho_Stop
 0140 20                pop X
 0141                   .dbline 95
 0141           ;               usEchoFallingEdge++;
 0141 7613              inc [_usEchoFallingEdge+1]
 0143 0E1200            adc [_usEchoFallingEdge],0
 0146                   .dbline 96
 0146           ;       }
 0146           L6:
 0146                   .dbline 98
 0146           ;       
 0146           ;       isrClear = PRT1DR; // Needed for ChangeFromRead interrupt type
 0146 5D04              mov A,REG[0x4]
 0148 530F              mov [_isrClear+1],A
 014A 550E00            mov [_isrClear],0
 014D                   .dbline -2
 014D           L4:
 014D 18                pop A
 014E 5300              mov [__rZ],A
 0150 18                pop A
 0151 5300              mov [__rY],A
 0153 18                pop A
 0154 5300              mov [__rX],A
 0156 18                pop A
 0157 5300              mov [__r11],A
 0159 18                pop A
 015A 5300              mov [__r10],A
 015C 18                pop A
 015D 5300              mov [__r9],A
 015F 18                pop A
 0160 5300              mov [__r8],A
 0162 18                pop A
 0163 5300              mov [__r7],A
 0165 18                pop A
 0166 5300              mov [__r6],A
 0168 18                pop A
 0169 5300              mov [__r5],A
 016B 18                pop A
 016C 5300              mov [__r4],A
 016E 18                pop A
 016F 5300              mov [__r3],A
 0171 18                pop A
 0172 5300              mov [__r2],A
 0174 18                pop A
 0175 5300              mov [__r1],A
 0177 18                pop A
 0178 5300              mov [__r0],A
 017A 18                pop A
 017B                   .dbline 0 ; func end
 017B 7E                reti
 017C                   .dbend
 017C                   .dbfunc e main _main fV
 017C           _main::
 017C                   .dbline -1
 017C                   .dbline 105
 017C           ; }
 017C           ; 
 017C           ; /******************
 017C           ; *  Main function  *
 017C           ; ******************/
 017C           ; 
 017C           ; void main(void) {
 017C                   .dbline 106
 017C           ;       M8C_EnableGInt;
 017C 7101                      or  F, 01h
 017E           
 017E                   .dbline 107
 017E           ;       M8C_EnableIntMask(INT_MSK0, INT_MSK0_GPIO);
 017E 43E020            or REG[0xe0],32
 0181                   .dbline 108
 0181           ;       LCD_Init();
 0181 10                push X
 0182 7C0000            xcall _LCD_Init
 0185                   .dbline 109
 0185           ;       LCD_Start();
 0185 7C0000            xcall _LCD_Start
 0188                   .dbline 110
 0188           ;       Timer8UsTrig_EnableInt();
 0188 7C0000            xcall _Timer8UsTrig_EnableInt
 018B                   .dbline 111
 018B           ;       Timer8UsTrig_Start();
 018B 7C0000            xcall _Timer8UsTrig_Start
 018E                   .dbline 112
 018E           ;       Timer8Main_EnableInt();
 018E 7C0000            xcall _Timer8Main_EnableInt
 0191                   .dbline 113
 0191           ;       Timer8Main_Start();
 0191 7C0000            xcall _Timer8Main_Start
 0194                   .dbline 114
 0194           ;       Timer16UsEcho_EnableInt();
 0194 7C0000            xcall _Timer16UsEcho_EnableInt
 0197 20                pop X
 0198                   .dbline 115
 0198           ;       servoStart(3999);
 0198 500F              mov A,15
 019A 08                push A
 019B 509F              mov A,-97
 019D 08                push A
 019E 7C0000            xcall _servoStart
 01A1 38FE              add SP,-2
 01A3 806B              xjmp L9
 01A5           L8:
 01A5                   .dbline 117
 01A5           ; 
 01A5           ;       while (1) {
 01A5                   .dbline 118
 01A5           ;               if (timer8MainTick) {
 01A5 3C0000            cmp [_timer8MainTick],0
 01A8 B006              jnz X1
 01AA 3C0100            cmp [_timer8MainTick+1],0
 01AD A061              jz L11
 01AF           X1:
 01AF                   .dbline 119
 01AF           ;                       timer8MainTick = false;
 01AF                   .dbline 119
 01AF 550100            mov [_timer8MainTick+1],0
 01B2 550000            mov [_timer8MainTick],0
 01B5                   .dbline 121
 01B5           ;                       
 01B5           ;                       if (timer8MainTick % 3) {
 01B5 5000              mov A,0
 01B7 08                push A
 01B8 5003              mov A,3
 01BA 08                push A
 01BB 5100              mov A,[_timer8MainTick]
 01BD 08                push A
 01BE 5101              mov A,[_timer8MainTick+1]
 01C0 08                push A
 01C1 7C0000            xcall __divmod_16X16_16
 01C4 38FE              add SP,-2
 01C6 18                pop A
 01C7 5300              mov [__r1],A
 01C9 18                pop A
 01CA 3900              cmp A,0
 01CC B006              jnz X2
 01CE 3C0000            cmp [__r1],0
 01D1 A009              jz L13
 01D3           X2:
 01D3                   .dbline 122
 01D3           ;                               drive(HALT); // Slowing down the motors
 01D3                   .dbline 122
 01D3 5005              mov A,5
 01D5 08                push A
 01D6 7C0000            xcall _drive
 01D9 38FF              add SP,-1
 01DB                   .dbline 123
 01DB           ;                       } else {
 01DB           L13:
 01DB                   .dbline 123
 01DB                   .dbline 125
 01DB           ;                               
 01DB           ;                       }
 01DB           L14:
 01DB                   .dbline 127
 01DB           ;                       
 01DB           ;                       if (timer8MainCount % 9) {
 01DB 5000              mov A,0
 01DD 08                push A
 01DE 5009              mov A,9
 01E0 08                push A
 01E1 5102              mov A,[_timer8MainCount]
 01E3 08                push A
 01E4 5103              mov A,[_timer8MainCount+1]
 01E6 08                push A
 01E7 7C0000            xcall __divmodu_16X16_16
 01EA 38FE              add SP,-2
 01EC 18                pop A
 01ED 5300              mov [__r1],A
 01EF 18                pop A
 01F0 3900              cmp A,0
 01F2 B006              jnz X3
 01F4 3C0000            cmp [__r1],0
 01F7 A004              jz L15
 01F9           X3:
 01F9                   .dbline 128
 01F9           ;                               lcdPrint();
 01F9                   .dbline 128
 01F9 7C0000            xcall _lcdPrint
 01FC                   .dbline 129
 01FC           ;                       }
 01FC           L15:
 01FC                   .dbline 132
 01FC           ;                       
 01FC           ;                       // Every 1,0s
 01FC           ;                       if (timer8MainCount >= 999) {
 01FC 5103              mov A,[_timer8MainCount+1]
 01FE 11E7              sub A,-25
 0200 5102              mov A,[_timer8MainCount]
 0202 1903              sbb A,3
 0204 C00A              jc L17
 0206           X4:
 0206                   .dbline 133
 0206           ;                               timer8MainCount = 0;
 0206                   .dbline 133
 0206 550300            mov [_timer8MainCount+1],0
 0209 550200            mov [_timer8MainCount],0
 020C                   .dbline 134
 020C           ;                               usTrigSend();
 020C 7C0000            xcall _usTrigSend
 020F                   .dbline 135
 020F           ;                       }
 020F           L17:
 020F                   .dbline 136
 020F           ;               }
 020F           L11:
 020F                   .dbline 137
 020F           ;       }
 020F           L9:
 020F                   .dbline 117
 020F 8F95              xjmp L8
 0211           X0:
 0211                   .dbline -2
 0211           L7:
 0211                   .dbline 0 ; func end
 0211 8FFF              jmp .
 0213                   .dbend
