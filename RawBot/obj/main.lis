                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area data(ram, con, rel)
 0000                   .dbfile ./main.c
 0000           _timer8MainTick::
 0000                   .blkb 2
                        .area idata(rom,lit)
 0000 0000              .word 0
                        .area data(ram, con, rel)
 0002                   .dbfile ./main.c
 0002                   .dbfile C:\Projects\RawBot\RawBot\main.c
 0002                   .dbsym e timer8MainTick _timer8MainTick I
 0002           _timer8MainCount::
 0002                   .blkb 2
                        .area idata(rom,lit)
 0002 0000              .word 0
                        .area data(ram, con, rel)
 0004                   .dbfile C:\Projects\RawBot\RawBot\main.c
 0004                   .dbsym e timer8MainCount _timer8MainCount i
 0004           _gpioTick::
 0004                   .blkb 2
                        .area idata(rom,lit)
 0004 0000              .word 0
                        .area data(ram, con, rel)
 0006                   .dbfile C:\Projects\RawBot\RawBot\main.c
 0006                   .dbsym e gpioTick _gpioTick I
 0006           _usRawTime::
 0006                   .blkb 4
                        .area idata(rom,lit)
 0006 00000000          .word 0,0
                        .area data(ram, con, rel)
 000A                   .dbfile C:\Projects\RawBot\RawBot\main.c
 000A                   .dbsym e usRawTime _usRawTime l
 000A           _usDistance::
 000A                   .blkb 2
                        .area idata(rom,lit)
 000A 0000              .word 0
                        .area data(ram, con, rel)
 000C                   .dbfile C:\Projects\RawBot\RawBot\main.c
 000C                   .dbsym e usDistance _usDistance i
 000C           _lcdUpdate::
 000C                   .blkb 2
                        .area idata(rom,lit)
 000C 0000              .word 0
                        .area data(ram, con, rel)
 000E                   .dbfile C:\Projects\RawBot\RawBot\main.c
 000E                   .dbsym e lcdUpdate _lcdUpdate i
 000E           _isrClear::
 000E                   .blkb 2
                        .area idata(rom,lit)
 000E 0000              .word 0
                        .area data(ram, con, rel)
 0010                   .dbfile C:\Projects\RawBot\RawBot\main.c
 0010                   .dbsym e isrClear _isrClear I
                        .area text(rom, con, rel)
 0000                   .dbfile C:\Projects\RawBot\RawBot\main.c
 0000                   .dbfunc e Timer8Main_ISR _Timer8Main_ISR fV
 0000           _Timer8Main_ISR::
 0000                   .dbline -1
 0000 08                push A
 0001                   .dbline 47
 0001           ; /**********
 0001           ; *  Notes  *
 0001           ; **********/
 0001           ; 
 0001           ; // Connections:
 0001           ; // Port 0 - Outputs
 0001           ; //    P00 - Hbridge IN1
 0001           ; //    P01 - Hbridge IN2
 0001           ; //    P02 - Hbridge IN3
 0001           ; //    P03 - Hbrdige IN4
 0001           ; //    P04 -
 0001           ; //    P05 - 
 0001           ; //    P06 - Ultrasound Trigger
 0001           ; //    P07 - Servo (ServoPWM connected here)
 0001           ; 
 0001           ; /*************
 0001           ; *  Includes  *
 0001           ; *************/
 0001           ; 
 0001           ; #include <m8c.h>
 0001           ; #include <stdlib.h>
 0001           ; #include <stdbool.h>
 0001           ; #include "PSoCAPI.h"
 0001           ; #include "LCD.h"
 0001           ; #include "Timer8Main.h"
 0001           ; #include "Timer8UsTrig.h"
 0001           ; #include "Timer16UsEcho.h"
 0001           ; #include "Functions.h"
 0001           ; 
 0001           ; /**************************
 0001           ; *  Variable declarations  *
 0001           ; **************************/
 0001           ; 
 0001           ; bool timer8MainTick = false;
 0001           ; unsigned int timer8MainCount = 0;
 0001           ; bool gpioTick = false;
 0001           ; unsigned long usRawTime = 0;
 0001           ; unsigned int usDistance = 0;
 0001           ; unsigned int lcdUpdate = 0;
 0001           ; int isrClear = 0;
 0001           ; 
 0001           ; /***********************
 0001           ; *  Interrupt handlers  *
 0001           ; ***********************/
 0001           ; 
 0001           ; #pragma interrupt_handler Timer8Main_ISR
 0001           ; void Timer8Main_ISR(void) {
 0001                   .dbline 48
 0001           ;       timer8MainTick = true;
 0001 550101            mov [_timer8MainTick+1],1
 0004 550000            mov [_timer8MainTick],0
 0007                   .dbline 49
 0007           ;       timer8MainCount++;
 0007 7603              inc [_timer8MainCount+1]
 0009 0E0200            adc [_timer8MainCount],0
 000C                   .dbline -2
 000C           L1:
 000C 18                pop A
 000D                   .dbline 0 ; func end
 000D 7E                reti
 000E                   .dbend
 000E                   .dbfunc e Timer8UsTrig_ISR _Timer8UsTrig_ISR fV
 000E           _Timer8UsTrig_ISR::
 000E                   .dbline -1
 000E 08                push A
 000F 5100              mov A,[__r0]
 0011 08                push A
 0012 5100              mov A,[__r1]
 0014 08                push A
 0015 5100              mov A,[__r2]
 0017 08                push A
 0018 5100              mov A,[__r3]
 001A 08                push A
 001B 5100              mov A,[__r4]
 001D 08                push A
 001E 5100              mov A,[__r5]
 0020 08                push A
 0021 5100              mov A,[__r6]
 0023 08                push A
 0024 5100              mov A,[__r7]
 0026 08                push A
 0027 5100              mov A,[__r8]
 0029 08                push A
 002A 5100              mov A,[__r9]
 002C 08                push A
 002D 5100              mov A,[__r10]
 002F 08                push A
 0030 5100              mov A,[__r11]
 0032 08                push A
 0033 5100              mov A,[__rX]
 0035 08                push A
 0036 5100              mov A,[__rY]
 0038 08                push A
 0039 5100              mov A,[__rZ]
 003B 08                push A
 003C                   .dbline 53
 003C           ; }
 003C           ; 
 003C           ; #pragma interrupt_handler Timer8UsTrig_ISR
 003C           ; void Timer8UsTrig_ISR(void) {
 003C                   .dbline 54
 003C           ;       digitalWrite(0, 6, 0); // Stop the trigger signal
 003C 5000              mov A,0
 003E 08                push A
 003F 5006              mov A,6
 0041 08                push A
 0042 5000              mov A,0
 0044 08                push A
 0045 7C0000            xcall _digitalWrite
 0048 38FD              add SP,-3
 004A                   .dbline 55
 004A           ;       Timer8UsTrig_Stop();
 004A 10                push X
 004B 7C0000            xcall _Timer8UsTrig_Stop
 004E 20                pop X
 004F                   .dbline -2
 004F           L2:
 004F 18                pop A
 0050 5300              mov [__rZ],A
 0052 18                pop A
 0053 5300              mov [__rY],A
 0055 18                pop A
 0056 5300              mov [__rX],A
 0058 18                pop A
 0059 5300              mov [__r11],A
 005B 18                pop A
 005C 5300              mov [__r10],A
 005E 18                pop A
 005F 5300              mov [__r9],A
 0061 18                pop A
 0062 5300              mov [__r8],A
 0064 18                pop A
 0065 5300              mov [__r7],A
 0067 18                pop A
 0068 5300              mov [__r6],A
 006A 18                pop A
 006B 5300              mov [__r5],A
 006D 18                pop A
 006E 5300              mov [__r4],A
 0070 18                pop A
 0071 5300              mov [__r3],A
 0073 18                pop A
 0074 5300              mov [__r2],A
 0076 18                pop A
 0077 5300              mov [__r1],A
 0079 18                pop A
 007A 5300              mov [__r0],A
 007C 18                pop A
 007D                   .dbline 0 ; func end
 007D 7E                reti
 007E                   .dbend
 007E                   .dbfunc e Timer16UsEcho_ISR _Timer16UsEcho_ISR fV
 007E           _Timer16UsEcho_ISR::
 007E                   .dbline -1
 007E 08                push A
 007F                   .dbline 60
 007F           ; }
 007F           ; 
 007F           ; // usDistance > 400 cm --> no objects in sight
 007F           ; #pragma interrupt_handler Timer16UsEcho_ISR
 007F           ; void Timer16UsEcho_ISR(void) { }
 007F                   .dbline -2
 007F           L3:
 007F 18                pop A
 0080                   .dbline 0 ; func end
 0080 7E                reti
 0081                   .dbend
 0081                   .dbfunc e GPIO_ISR _GPIO_ISR fV
 0081           _GPIO_ISR::
 0081                   .dbline -1
 0081 08                push A
 0082 5100              mov A,[__r0]
 0084 08                push A
 0085 5100              mov A,[__r1]
 0087 08                push A
 0088 5100              mov A,[__r2]
 008A 08                push A
 008B 5100              mov A,[__r3]
 008D 08                push A
 008E 5100              mov A,[__r4]
 0090 08                push A
 0091 5100              mov A,[__r5]
 0093 08                push A
 0094 5100              mov A,[__r6]
 0096 08                push A
 0097 5100              mov A,[__r7]
 0099 08                push A
 009A 5100              mov A,[__r8]
 009C 08                push A
 009D 5100              mov A,[__r9]
 009F 08                push A
 00A0 5100              mov A,[__r10]
 00A2 08                push A
 00A3 5100              mov A,[__r11]
 00A5 08                push A
 00A6 5100              mov A,[__rX]
 00A8 08                push A
 00A9 5100              mov A,[__rY]
 00AB 08                push A
 00AC 5100              mov A,[__rZ]
 00AE 08                push A
 00AF                   .dbline 63
 00AF           ; 
 00AF           ; #pragma interrupt_handler GPIO_ISR
 00AF           ; void GPIO_ISR(void) { 
 00AF                   .dbline 64
 00AF           ;       if (US_ECHO_Data_ADDR & US_ECHO_MASK) { // Rising edge
 00AF 5D04              mov A,REG[0x4]
 00B1 5300              mov [__r0],A
 00B3 470080            tst [__r0],-128
 00B6 A008              jz L5
 00B8                   .dbline 65
 00B8           ;               Timer16UsEcho_Start(); // Used to measure time until echo signal is returned
 00B8                   .dbline 65
 00B8 10                push X
 00B9 7C0000            xcall _Timer16UsEcho_Start
 00BC 20                pop X
 00BD                   .dbline 66
 00BD           ;       } else { // Falling edge
 00BD 8039              xjmp L6
 00BF           L5:
 00BF                   .dbline 66
 00BF                   .dbline 67
 00BF           ;               usDistance = usCalculateDistance(Timer16UsEcho_wReadTimer());
 00BF 10                push X
 00C0 7C0000            xcall _Timer16UsEcho_wReadTimer
 00C3 5A00              mov [__r0],X
 00C5 20                pop X
 00C6 5300              mov [__r3],A
 00C8 5000              mov A,0
 00CA 08                push A
 00CB 08                push A
 00CC 5100              mov A,[__r0]
 00CE 08                push A
 00CF 5100              mov A,[__r3]
 00D1 08                push A
 00D2 7C0000            xcall _usCalculateDistance
 00D5 5F0B00            mov [_usDistance+1],[__r1]
 00D8 5F0A00            mov [_usDistance],[__r0]
 00DB                   .dbline 68
 00DB           ;               lcdAssign(usDistance, 0);
 00DB 5000              mov A,0
 00DD 08                push A
 00DE 08                push A
 00DF 5F000B            mov [__r3],[_usDistance+1]
 00E2 5F000A            mov [__r2],[_usDistance]
 00E5 08                push A
 00E6 08                push A
 00E7 5100              mov A,[__r2]
 00E9 08                push A
 00EA 5100              mov A,[__r3]
 00EC 08                push A
 00ED 7C0000            xcall _lcdAssign
 00F0 38F6              add SP,-10
 00F2                   .dbline 70
 00F2           ;               
 00F2           ;               Timer16UsEcho_Stop();
 00F2 10                push X
 00F3 7C0000            xcall _Timer16UsEcho_Stop
 00F6 20                pop X
 00F7                   .dbline 71
 00F7           ;       }
 00F7           L6:
 00F7                   .dbline 73
 00F7           ;       
 00F7           ;       gpioTick = true;
 00F7 550501            mov [_gpioTick+1],1
 00FA 550400            mov [_gpioTick],0
 00FD                   .dbline 74
 00FD           ;       isrClear = PRT1DR;
 00FD 5D04              mov A,REG[0x4]
 00FF 530F              mov [_isrClear+1],A
 0101 550E00            mov [_isrClear],0
 0104                   .dbline -2
 0104           L4:
 0104 18                pop A
 0105 5300              mov [__rZ],A
 0107 18                pop A
 0108 5300              mov [__rY],A
 010A 18                pop A
 010B 5300              mov [__rX],A
 010D 18                pop A
 010E 5300              mov [__r11],A
 0110 18                pop A
 0111 5300              mov [__r10],A
 0113 18                pop A
 0114 5300              mov [__r9],A
 0116 18                pop A
 0117 5300              mov [__r8],A
 0119 18                pop A
 011A 5300              mov [__r7],A
 011C 18                pop A
 011D 5300              mov [__r6],A
 011F 18                pop A
 0120 5300              mov [__r5],A
 0122 18                pop A
 0123 5300              mov [__r4],A
 0125 18                pop A
 0126 5300              mov [__r3],A
 0128 18                pop A
 0129 5300              mov [__r2],A
 012B 18                pop A
 012C 5300              mov [__r1],A
 012E 18                pop A
 012F 5300              mov [__r0],A
 0131 18                pop A
 0132                   .dbline 0 ; func end
 0132 7E                reti
 0133                   .dbend
 0133                   .dbfunc e main _main fV
 0133           _main::
 0133                   .dbline -1
 0133                   .dbline 81
 0133           ; }
 0133           ; 
 0133           ; /******************
 0133           ; *  Main function  *
 0133           ; ******************/
 0133           ; 
 0133           ; void main(void) {
 0133                   .dbline 82
 0133           ;       M8C_EnableGInt;
 0133 7101                      or  F, 01h
 0135           
 0135                   .dbline 83
 0135           ;       M8C_EnableIntMask(INT_MSK0, INT_MSK0_GPIO);
 0135 43E020            or REG[0xe0],32
 0138                   .dbline 84
 0138           ;       LCD_Init();
 0138 10                push X
 0139 7C0000            xcall _LCD_Init
 013C                   .dbline 85
 013C           ;       LCD_Start();
 013C 7C0000            xcall _LCD_Start
 013F                   .dbline 86
 013F           ;       Timer8UsTrig_EnableInt();
 013F 7C0000            xcall _Timer8UsTrig_EnableInt
 0142                   .dbline 87
 0142           ;       Timer8UsTrig_Start();
 0142 7C0000            xcall _Timer8UsTrig_Start
 0145                   .dbline 88
 0145           ;       Timer8Main_EnableInt();
 0145 7C0000            xcall _Timer8Main_EnableInt
 0148                   .dbline 89
 0148           ;       Timer8Main_Start();
 0148 7C0000            xcall _Timer8Main_Start
 014B                   .dbline 90
 014B           ;       Timer16UsEcho_EnableInt();
 014B 7C0000            xcall _Timer16UsEcho_EnableInt
 014E 20                pop X
 014F 808B              xjmp L9
 0151           L8:
 0151                   .dbline 92
 0151           ; 
 0151           ;       while (1) {             
 0151                   .dbline 93
 0151           ;               if (gpioTick) {
 0151 3C0400            cmp [_gpioTick],0
 0154 B006              jnz X1
 0156 3C0500            cmp [_gpioTick+1],0
 0159 A007              jz L11
 015B           X1:
 015B                   .dbline 94
 015B           ;                       gpioTick = false;
 015B                   .dbline 94
 015B 550500            mov [_gpioTick+1],0
 015E 550400            mov [_gpioTick],0
 0161                   .dbline 95
 0161           ;               }
 0161           L11:
 0161                   .dbline 97
 0161           ;               
 0161           ;               if (timer8MainTick) {
 0161 3C0000            cmp [_timer8MainTick],0
 0164 B006              jnz X2
 0166 3C0100            cmp [_timer8MainTick+1],0
 0169 A071              jz L13
 016B           X2:
 016B                   .dbline 98
 016B           ;                       timer8MainTick = false;
 016B                   .dbline 98
 016B 550100            mov [_timer8MainTick+1],0
 016E 550000            mov [_timer8MainTick],0
 0171                   .dbline 99
 0171           ;                       lcdUpdate++;
 0171 760D              inc [_lcdUpdate+1]
 0173 0E0C00            adc [_lcdUpdate],0
 0176                   .dbline 101
 0176           ;                       
 0176           ;                       if (lcdUpdate >= 499) {
 0176 510D              mov A,[_lcdUpdate+1]
 0178 11F3              sub A,-13
 017A 510C              mov A,[_lcdUpdate]
 017C 1901              sbb A,1
 017E C049              jc L15
 0180           X3:
 0180                   .dbline 102
 0180           ;                               lcdUpdate = 0;
 0180                   .dbline 102
 0180 550D00            mov [_lcdUpdate+1],0
 0183 550C00            mov [_lcdUpdate],0
 0186                   .dbline 104
 0186           ;                               
 0186           ;                               lcdAssign(usCalculateDistance(34422), 3);
 0186 5000              mov A,0
 0188 08                push A
 0189 08                push A
 018A 5086              mov A,-122
 018C 08                push A
 018D 5076              mov A,118
 018F 08                push A
 0190 7C0000            xcall _usCalculateDistance
 0193 38FC              add SP,-4
 0195 5000              mov A,0
 0197 08                push A
 0198 5003              mov A,3
 019A 08                push A
 019B 5F0000            mov [__r3],[__r1]
 019E 5F0000            mov [__r2],[__r0]
 01A1 470080            tst [__r2],-128
 01A4 A009              jz X4
 01A6 5500FF            mov [__r1],-1
 01A9 5500FF            mov [__r0],-1
 01AC 8007              jmp X5
 01AE           X4:
 01AE 550000            mov [__r1],0
 01B1 550000            mov [__r0],0
 01B4           X5:
 01B4 5100              mov A,[__r0]
 01B6 08                push A
 01B7 5100              mov A,[__r1]
 01B9 08                push A
 01BA 5100              mov A,[__r2]
 01BC 08                push A
 01BD 5100              mov A,[__r3]
 01BF 08                push A
 01C0 7C0000            xcall _lcdAssign
 01C3 38FA              add SP,-6
 01C5                   .dbline 106
 01C5           ;                               
 01C5           ;                               lcdPrint();
 01C5 7C0000            xcall _lcdPrint
 01C8                   .dbline 107
 01C8           ;                       }
 01C8           L15:
 01C8                   .dbline 110
 01C8           ;                       
 01C8           ;                       // 1 s
 01C8           ;                       if (timer8MainCount >= 99) {
 01C8 5103              mov A,[_timer8MainCount+1]
 01CA 1163              sub A,99
 01CC 5102              mov A,[_timer8MainCount]
 01CE 1900              sbb A,0
 01D0 C00A              jc L17
 01D2           X6:
 01D2                   .dbline 111
 01D2           ;                               timer8MainCount = 0;
 01D2                   .dbline 111
 01D2 550300            mov [_timer8MainCount+1],0
 01D5 550200            mov [_timer8MainCount],0
 01D8                   .dbline 112
 01D8           ;                               usTrigSend();
 01D8 7C0000            xcall _usTrigSend
 01DB                   .dbline 113
 01DB           ;                       }
 01DB           L17:
 01DB                   .dbline 114
 01DB           ;               }
 01DB           L13:
 01DB                   .dbline 115
 01DB           ;       }
 01DB           L9:
 01DB                   .dbline 92
 01DB 8F75              xjmp L8
 01DD           X0:
 01DD                   .dbline -2
 01DD           L7:
 01DD                   .dbline 0 ; func end
 01DD 8FFF              jmp .
 01DF                   .dbend
